[
    [
        "/en-US/docs/Web/API/AbortController",
        "",
        "AbortController",
        "The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.",
        [
            [
                "AbortController()",
                "Creates a new AbortController object instance."
            ],
            [
                "AbortController.signal Read only",
                "Returns an AbortSignal object instance, which can be used to communicate with, or to abort, a DOM request."
            ],
            [
                "AbortController.abort()",
                "Aborts a DOM request before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AbortSignal",
        "",
        "AbortSignal",
        "The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a fetch request) and abort it if required via an AbortController object.",
        [
            [
                "AbortSignal.aborted Read only",
                "A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted (true) or not (false)."
            ],
            [
                "abort",
                "Invoked when the DOM requests the signal is communicating with is/are aborted. Also available via the onabort property."
            ],
            [
                "AbortSignal.abort()",
                "Returns an AbortSignal instance that is already set as aborted."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AbsoluteOrientationSensor",
        "",
        "AbsoluteOrientationSensor",
        "The AbsoluteOrientationSensor interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.",
        [
            [
                "AbsoluteOrientationSensor()",
                "Creates a new AbsoluteOrientationSensor object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AbstractRange",
        "",
        "AbstractRange",
        "The AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.",
        [
            [
                "collapsed Read only",
                "A Boolean value which is true if the range is collapsed. A collapsed range is one whose start position and end position are the same, resulting in a zero-character-long range."
            ],
            [
                "endContainer Read only",
                "The DOM Node in which the end of the range, as specified by the endOffset property, is located."
            ],
            [
                "endOffset Read only",
                "An integer value indicating the offset, in characters, from the beginning of the node's contents to the beginning of the range represented by the range object. This value must be less than the length of the endContainer node."
            ],
            [
                "startContainer Read only",
                "The DOM Node in which the beginning of the range, as specified by the startOffset property, is located."
            ],
            [
                "startOffset Read only",
                "An integer value indicating the offset, in characters, from the beginning of the node's contents to the last character of the contents referred to by the range object. This value must be less than the length of the node indicated in startContainer."
            ],
            [
                "Range",
                "The Range interface has been around for a long time and has only recently been redefined to be based upon AbstractRange as the need arose to define other forms of range data. Range provides methods that allow you to alter the range's endpoints, as well as methods to compare ranges, detect intersections beween ranges, and so forth."
            ],
            [
                "StaticRange",
                "A StaticRange is a basic range which cannot be changed once it's been created. Specifically, as the node tree mutates and changes, the range does not. This is useful when you need to specify a range that will only be used once, since it avoids the performance and resource impact of the more complex Range interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Accelerometer",
        "",
        "Accelerometer",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Accelerometer()",
                "Creates a new Accelerometer object."
            ],
            [
                "Accelerometer.x Read only",
                "Returns a double containing the acceleration of the device along the device's x axis."
            ],
            [
                "Accelerometer.y Read only",
                "Returns a double containing the acceleration of the device along the device's y axis."
            ],
            [
                "Accelerometer.z Read only",
                "Returns a double containing the acceleration of the device along the device's z axis."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AddressErrors",
        "",
        "AddressErrors",
        "The AddressErrors dictionary is used by the Payment Request API to report validation errors in a physical address (typically a billing address or a shipping address). Any members which is present indicates that a validation error occurred for the member of the same name in an address described using PaymentAddress.",
        [
            [
                "addressLine",
                "A DOMString which, if present, indicates that the addressLine property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "city",
                "A DOMString which, if present, indicates that the city property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "country",
                "A DOMString which, if present, indicates that the country property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "dependentLocality",
                "A DOMString which, if present, indicates that the dependentLocality property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "organization",
                "A DOMString which, if present, indicates that the organization property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "phone",
                "A DOMString which, if present, indicates that the phone property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "postalCode",
                "A DOMString which, if present, indicates that the postalCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "recipient",
                "A DOMString which, if present, indicates that the recipient property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "region",
                "A DOMString which, if present, indicates that the region property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "sortingCode",
                "A DOMString which, if present, indicates that the sortingCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ],
            [
                "languageCode",
                "A DOMString which, if present, indicates that the languageCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AesCbcParams",
        "",
        "AesCbcParams",
        "The AesCbcParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CBC algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to AES-CBC."
            ],
            [
                "iv",
                "A BufferSource. The initialization vector. Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret (for example, it may be transmitted unencrypted along with the ciphertext)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AesCtrParams",
        "",
        "AesCtrParams",
        "The AesCtrParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CTR algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to AES-CTR."
            ],
            [
                "counter",
                "A BufferSource — the initial value of the counter block. This must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter."
            ],
            [
                "length",
                "A Number — the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap: if the message is n blocks and the counter is m bits long, then the following must be true: n <= 2^m. The NIST SP800-38A standard, which defines CTR, suggests that the counter should occupy half of the counter block (see Appendix B.2), so for AES it would be 64."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AesGcmParams",
        "",
        "AesGcmParams",
        "The AesGcmParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-GCM algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to AES-GCM."
            ],
            [
                "iv",
                "A BufferSource — the initialization vector. This must be unique for every encryption operation carried out with a given key. Put another way: never reuse an IV with the same key. The AES-GCM specification recommends that the IV should be 96 bits long, and typically contains bits from a random number generator. Section 8.2 of the specification outlines methods for constructing IVs. Note that the IV does not have to be secret, just unique: so it is OK, for example, to transmit it in the clear alongside the encrypted message."
            ],
            [
                "additionalData Optional",
                "A BufferSource. This contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If additionalData is given here then the same data must be given in the corresponding call to decrypt(): if the data given to the decrypt() call does not match the original data, the decryption will throw an exception. This gives you a way to authenticate associated data without having to encrypt it. The bit length of additionalData must be smaller than 2^64 - 1. The additionalData property is optional and may be omitted without compromising the security of the encryption operation."
            ],
            [
                "tagLength Optional",
                "A Number. This determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption. According to the Web Crypto specification this must have one of the following values: 32, 64, 96, 104, 112, 120, or 128. The AES-GCM specification recommends that it should be 96, 104, 112, 120 or 128, although 32 or 64 bits may be acceptable in some applications: Appendix C of the specification provides additional guidance here. tagLength is optional and defaults to 128 if it is not specified."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AesKeyGenParams",
        "",
        "AesKeyGenParams",
        "",
        [
            [
                "name",
                "A DOMString. This should be set to AES-CBC, AES-CTR, AES-GCM, or AES-KW, depending on the algorithm you want to use."
            ],
            [
                "length",
                "A Number — the length in bits of the key to generate. This must be one of: 128, 192, or 256."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AmbientLightSensor",
        "",
        "AmbientLightSensor",
        "",
        [
            [
                "AmbientLightSensor()",
                "Creates a new AmbientLightSensor object."
            ],
            [
                "AmbientLightSensor.illuminance",
                "Returns the current light level in lux of the ambient light level around the hosting device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AnalyserNode",
        "",
        "AnalyserNode",
        "",
        [
            [
                "AnalyserNode()",
                "Creates a new instance of an AnalyserNode object."
            ],
            [
                "AnalyserNode.fftSize",
                "Is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain."
            ],
            [
                "AnalyserNode.frequencyBinCount Read only",
                "Is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization."
            ],
            [
                "AnalyserNode.minDecibels",
                "Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using getByteFrequencyData()."
            ],
            [
                "AnalyserNode.maxDecibels",
                "Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using getByteFrequencyData()."
            ],
            [
                "AnalyserNode.smoothingTimeConstant",
                "Is a double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother."
            ],
            [
                "AnalyserNode.getFloatFrequencyData()",
                "Copies the current frequency data into a Float32Array array passed into it."
            ],
            [
                "AnalyserNode.getByteFrequencyData()",
                "Copies the current frequency data into a Uint8Array (unsigned byte array) passed into it."
            ],
            [
                "AnalyserNode.getFloatTimeDomainData()",
                "Copies the current waveform, or time-domain, data into a Float32Array array passed into it."
            ],
            [
                "AnalyserNode.getByteTimeDomainData()",
                "Copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ANGLE_instanced_arrays",
        "",
        "ANGLE_instanced_arrays",
        "The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.",
        [
            [
                "ext.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
                "Returns a GLint describing the frequency divisor used for instanced rendering when used in the gl.getVertexAttrib() as the pname parameter."
            ],
            [
                "ext.drawArraysInstancedANGLE()",
                "Behaves identically to gl.drawArrays() except that multiple instances of the range of elements are executed, and the instance advances for each iteration."
            ],
            [
                "ext.drawElementsInstancedANGLE()",
                "Behaves identically to gl.drawElements() except that multiple instances of the set of elements are executed and the instance advances between each set."
            ],
            [
                "ext.vertexAttribDivisorANGLE()",
                "Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with ext.drawArraysInstancedANGLE() and ext.drawElementsInstancedANGLE()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Animation",
        "",
        "Animation",
        "The Animation interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.",
        [
            [
                "Animation()",
                "Creates a new Animation object instance."
            ],
            [
                "Animation.currentTime",
                "The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a timeline, is inactive or hasn't been played yet, its value is null."
            ],
            [
                "Animation.effect",
                "Gets and sets the AnimationEffect associated with this animation. This will usually be a KeyframeEffect object."
            ],
            [
                "Animation.finished Read only",
                "Returns the current finished Promise for this animation."
            ],
            [
                "Animation.id",
                "Gets and sets the String used to identify the animation."
            ],
            [
                "Animation.pending Read only",
                "Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation."
            ],
            [
                "Animation.playState Read only",
                "Returns an enumerated value describing the playback state of an animation."
            ],
            [
                "Animation.playbackRate",
                "Gets or sets the playback rate of the animation."
            ],
            [
                "Animation.ready Read only",
                "Returns the current ready Promise for this animation."
            ],
            [
                "animation.replaceState",
                "Returns the replace state of the animation. This will be active if the animation has been replaced, or persisted if Animation.persist() has been invoked on it."
            ],
            [
                "Animation.startTime",
                "Gets or sets the scheduled time when an animation's playback should begin."
            ],
            [
                "Animation.timeline",
                "Gets or sets the timeline associated with this animation."
            ],
            [
                "Animation.oncancel",
                "Gets and sets the event handler for the cancel event."
            ],
            [
                "Animation.onfinish",
                "Gets and sets the event handler for the finish event."
            ],
            [
                "animation.onremove",
                "Allows you to set and run an event handler that fires when the animation is removed (i.e., put into an active replace state)."
            ],
            [
                "Animation.cancel()",
                "Clears all keyframeEffects caused by this animation and aborts its playback."
            ],
            [
                "animation.commitStyles()",
                "Commits the end styling state of an animation to the element being animated, even after that animation has been removed. It will cause the end styling state to be written to the element being animated, in the form of properties inside a style attribute."
            ],
            [
                "Animation.finish()",
                "Seeks either end of an animation, depending on whether the animation is playing or reversing."
            ],
            [
                "Animation.pause()",
                "Suspends playing of an animation."
            ],
            [
                "animation.persist()",
                "Explicitly persists an animation, when it would otherwise be removed due to the browser's Automatically removing filling animations behavior."
            ],
            [
                "Animation.play()",
                "Starts or resumes playing of an animation, or begins the animation again if it previously finished."
            ],
            [
                "Animation.reverse()",
                "Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning."
            ],
            [
                "Animation.updatePlaybackRate()",
                "Sets the speed of an animation after first synchronizing its playback position."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AnimationEffect",
        "",
        "AnimationEffect",
        "",
        [
            [
                "AnimationEffect.getTiming()",
                "Returns the EffectTiming object associated with the animation containing all the animation's timing values."
            ],
            [
                "AnimationEffect.getComputedTiming()",
                "Returns the calculated timing properties for this AnimationEffect."
            ],
            [
                "AnimationEffect.updateTiming()",
                "Updates the specified timing properties of this AnimationEffect."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AnimationEvent",
        "",
        "AnimationEvent",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "AnimationEvent()",
                "Creates an AnimationEvent event with the given parameters."
            ],
            [
                "AnimationEvent.animationName Read only",
                "Is a DOMString containing the value of the animation-name that generated the animation."
            ],
            [
                "AnimationEvent.elapsedTime Read only",
                "Is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay)."
            ],
            [
                "AnimationEvent.pseudoElement Read only",
                "Is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''."
            ],
            [
                "AnimationEvent.initAnimationEvent()",
                "Initializes a AnimationEvent created using the deprecated Document.createEvent(\"AnimationEvent\") method."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AnimationPlaybackEvent",
        "",
        "AnimationPlaybackEvent",
        "",
        [
            [
                "AnimationPlaybackEvent.AnimationPlaybackEvent()",
                "Constructs a new AnimationPlaybackEvent object instance."
            ],
            [
                "AnimationPlaybackEvent.currentTime",
                "The current time of the animation that generated the event."
            ],
            [
                "AnimationPlaybackEvent.timelineTime",
                "The time value of the timeline of the animation that generated the event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AnimationTimeline",
        "",
        "AnimationTimeline",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "AnimationTimeline.currentTime Read only",
                "Returns the time value in milliseconds for this timeline or null if this timeline is inactive."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ArrayBufferView",
        "",
        "ArrayBufferView",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/Attr",
        "",
        "Attr",
        "The Attr interface represents one of a DOM element's attributes as an object. In most DOM methods, you will directly retrieve the attribute as a string (e.g., Element.getAttribute()), but certain functions (e.g., Element.getAttributeNode()) or means of iterating return Attr types.",
        [
            [
                "name Read only",
                "The attribute's name."
            ],
            [
                "namespaceURI Read only",
                "A DOMString representing the namespace URI of the attribute, or null if there is no namespace."
            ],
            [
                "localName Read only",
                "A DOMString representing the local part of the qualified name of the attribute."
            ],
            [
                "prefix Read only",
                "A DOMString representing the namespace prefix of the attribute, or null if no prefix is specified."
            ],
            [
                "ownerElement Read only",
                "The element holding the attribute. Note: DOM Level 4 removed this property. The assumption was that since you get an Attr object from an Element, you should already know the associated element. As that doesn't hold true in cases like Attr objects being returned by Document.evaluate, the DOM Living Standard reintroduced the property. Gecko outputs a deprecation note starting from Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4). This note was removed again in Gecko 49.0 (Firefox 49.0 / Thunderbird 49.0 / SeaMonkey 2.46)."
            ],
            [
                "specified Read only",
                "This property always returns true. Originally, it returned true if the attribute was explicitly specified in the source code or by a script, and false if its value came from the default one defined in the document's DTD."
            ],
            [
                "value",
                "The attribute's value."
            ],
            [
                "attributes",
                "This property now always returns NULL."
            ],
            [
                "childNodes",
                "This property now always returns an empty NodeList."
            ],
            [
                "firstChild",
                "This property now always returns NULL."
            ],
            [
                "isId Read only",
                "Indicates whether the attribute is an \"ID attribute\". An \"ID attribute\" being an attribute which value is expected to be unique across a DOM Document. In HTML DOM, \"id\" is the only ID attribute, but XML documents could define others. Whether or not an attribute is unique is often determined by a DTD or other schema description."
            ],
            [
                "lastChild",
                "This property now always returns NULL."
            ],
            [
                "nextSibling",
                "This property now always returns NULL."
            ],
            [
                "nodeName",
                "Use Attr.name instead."
            ],
            [
                "nodeType",
                "This property now always returns 2 (ATTRIBUTE_NODE)."
            ],
            [
                "nodeValue",
                "Use Attr.value instead."
            ],
            [
                "ownerDocument",
                "You shouldn't have been using this in the first place, so you probably don't care that this is going away."
            ],
            [
                "parentNode",
                "This property now always returns NULL."
            ],
            [
                "previousSibling",
                "This property now always returns NULL."
            ],
            [
                "schemaTypeInfo Read only",
                "The type information associated with this attribute. While the type information contained in this attribute is guaranteed to be correct after loading the document or invoking Document.normalizeDocument, this property may not be reliable if the node was moved."
            ],
            [
                "specified",
                "This property now always returns true."
            ],
            [
                "textContent",
                "Use Attr.value instead."
            ],
            [
                "appendChild()",
                "Modify the value of Attr.value instead."
            ],
            [
                "cloneNode()",
                "You shouldn't have been using this in the first place, so you probably don't care that this is going away."
            ],
            [
                "createAttribute()",
                "Use Element.setAttribute() instead."
            ],
            [
                "createAttributeNS()",
                "Use Element.setAttributeNS() instead."
            ],
            [
                "getAttributeNode()",
                "Use Element.getAttribute() instead."
            ],
            [
                "getAttributeNodeNS()",
                "Use Element.getAttributeNS() instead."
            ],
            [
                "hasAttributes()",
                "This method now always returns false."
            ],
            [
                "hasChildNodes()",
                "This method now always returns false."
            ],
            [
                "insertBefore()",
                "Modify the value of Attr.value instead."
            ],
            [
                "isSupported()",
                "You shouldn't have been using this in the first place, so you probably don't care that this is going away."
            ],
            [
                "isEqualNode()",
                "You shouldn't have been using this in the first place, so you probably don't care that this is going away."
            ],
            [
                "normalize()",
                "You shouldn't have been using this in the first place, so you probably don't care that this is going away."
            ],
            [
                "removeAttributeNode()",
                "Use Element.removeAttribute() instead."
            ],
            [
                "removeChild()",
                "Modify the value of Attr.value instead."
            ],
            [
                "replaceChild()",
                "Modify the value of Attr.value instead."
            ],
            [
                "setAttributeNode()",
                "Use Element.setAttribute() instead."
            ],
            [
                "setAttributeNodeNS()",
                "Use Element.setAttributeNS() instead."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioBuffer",
        "",
        "AudioBuffer",
        "",
        [
            [
                "AudioBuffer()",
                "Creates and returns a new AudioBuffer object instance."
            ],
            [
                "AudioBuffer.sampleRate Read only",
                "Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer."
            ],
            [
                "AudioBuffer.length Read only",
                "Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer."
            ],
            [
                "AudioBuffer.duration Read only",
                "Returns a double representing the duration, in seconds, of the PCM data stored in the buffer."
            ],
            [
                "AudioBuffer.numberOfChannels Read only",
                "Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer."
            ],
            [
                "AudioBuffer.getChannelData()",
                "Returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel)."
            ],
            [
                "AudioBuffer.copyFromChannel()",
                "Copies the samples from the specified channel of the AudioBuffer to the destination array."
            ],
            [
                "AudioBuffer.copyToChannel()",
                "Copies the samples to the specified channel of the AudioBuffer, from the source array."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioBufferSourceNode",
        "",
        "AudioBufferSourceNode",
        "",
        [
            [
                "AudioBufferSourceNode()",
                "Creates and returns a new AudioBufferSourceNode object. An AudioBufferSourceNode can be instantiated using the AudioContext.createBufferSource() method."
            ],
            [
                "AudioBufferSourceNode.buffer",
                "An AudioBuffer that defines the audio asset to be played, or when set to the value null, defines a single channel of silence (in which every sample is 0.0)."
            ],
            [
                "AudioBufferSourceNode.detune",
                "Is a k-rate AudioParam representing detuning of playback in cents. This value is compounded with playbackRate to determine the speed at which the sound is played. Its default value is 0 (meaning no detuning), and its nominal range is -∞ to ∞."
            ],
            [
                "AudioBufferSourceNode.loop",
                "A Boolean attribute indicating if the audio asset must be replayed when the end of the AudioBuffer is reached. Its default value is false."
            ],
            [
                "AudioBufferSourceNode.loopStart Optional",
                "A floating-point value indicating the time, in seconds, at which playback of the AudioBuffer must begin when loop is true. Its default value is 0 (meaning that at the beginning of each loop, playback begins at the start of the audio buffer)."
            ],
            [
                "AudioBufferSourceNode.loopEnd Optional",
                "A floating-point number indicating the time, in seconds, at which playback of the AudioBuffer stops and loops back to the time indicated by loopStart, if loop is true. The default value is 0."
            ],
            [
                "AudioBufferSourceNode.playbackRate",
                "An a-rate AudioParam that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with detune to determine the final playback rate."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioConfiguration",
        "",
        "AudioConfiguration",
        "The AudioConfiguration dictionary of the Media Capabilities API defines the audio file being tested when calling MediaCapabilities.encodingInfo() or MediaCapabilities.decodingInfo() to query whether a specific audio configuration is supported, smooth, and/or power efficient.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioContext",
        "",
        "AudioContext",
        "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode. An audio context controls both the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an AudioContext before you do anything else, as everything happens inside a context. It's recommended to create one AudioContext and reuse it instead of initializing a new one each time, and it's OK to use a single AudioContext for several different audio sources and pipeline concurrently.",
        [
            [
                "AudioContext()",
                "Creates and returns a new AudioContext object."
            ],
            [
                "AudioContext.baseLatency Read only",
                "Returns the number of seconds of processing latency incurred by the AudioContext passing the audio from the AudioDestinationNode to the audio subsystem."
            ],
            [
                "AudioContext.outputLatency Read only",
                "Returns an estimation of the output latency of the current audio context."
            ],
            [
                "AudioContext.close()",
                "Closes the audio context, releasing any system audio resources that it uses."
            ],
            [
                "AudioContext.createMediaElementSource()",
                "Creates a MediaElementAudioSourceNode associated with an HTMLMediaElement. This can be used to play and manipulate audio from <video> or <audio> elements."
            ],
            [
                "AudioContext.createMediaStreamSource()",
                "Creates a MediaStreamAudioSourceNode associated with a MediaStream representing an audio stream which may come from the local computer microphone or other sources."
            ],
            [
                "AudioContext.createMediaStreamDestination()",
                "Creates a MediaStreamAudioDestinationNode associated with a MediaStream representing an audio stream which may be stored in a local file or sent to another computer."
            ],
            [
                "AudioContext.createMediaStreamTrackSource()",
                "Creates a MediaStreamTrackAudioSourceNode associated with a MediaStream representing an media stream track."
            ],
            [
                "AudioContext.getOutputTimestamp()",
                "Returns a new AudioTimestamp object containing two audio timestamp values relating to the current audio context."
            ],
            [
                "AudioContext.resume()",
                "Resumes the progression of time in an audio context that has previously been suspended/paused."
            ],
            [
                "AudioContext.suspend()",
                "Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioDestinationNode",
        "",
        "AudioDestinationNode",
        "",
        [
            [
                "AudioDestinationNode.maxChannelCount",
                "Is an unsigned long defining the maximum number of channels that the physical device can handle."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioListener",
        "",
        "AudioListener",
        "",
        [
            [
                "AudioListener.positionX",
                "Represents the horizontal position of the listener in a right-hand cartesian coordinate system. The default is 0."
            ],
            [
                "AudioListener.positionY",
                "Represents the vertical position of the listener in a right-hand cartesian coordinate system. The default is 0."
            ],
            [
                "AudioListener.positionZ",
                "Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate system. The default is 0."
            ],
            [
                "AudioListener.forwardX",
                "Represents the horizontal position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
            ],
            [
                "AudioListener.forwardY",
                "Represents the vertical position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
            ],
            [
                "AudioListener.forwardZ",
                "Represents the longitudinal (back and forth) position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is -1."
            ],
            [
                "AudioListener.upX",
                "Represents the horizontal position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
            ],
            [
                "AudioListener.upY",
                "Represents the vertical position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 1."
            ],
            [
                "AudioListener.upZ",
                "Represents the longitudinal (back and forth) position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0."
            ],
            [
                "AudioListener.setOrientation()",
                "Sets the orientation of the listener."
            ],
            [
                "AudioListener.setPosition()",
                "Sets the position of the listener."
            ],
            [
                "AudioListener.dopplerFactor",
                "A double value representing the amount of pitch shift to use when rendering a doppler effect."
            ],
            [
                "AudioListener.speedOfSound",
                "Is a double value representing the speed of sound, in meters per second."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioNode",
        "",
        "AudioNode",
        "The AudioNode interface is a generic interface for representing an audio processing module.",
        [
            [
                "AudioNode.context Read only",
                "Returns the associated BaseAudioContext, that is the object representing the processing graph the node is participating in."
            ],
            [
                "AudioNode.numberOfInputs Read only",
                "Returns the number of inputs feeding the node. Source nodes are defined as nodes having a numberOfInputs property with a value of 0."
            ],
            [
                "AudioNode.numberOfOutputs Read only",
                "Returns the number of outputs coming out of the node. Destination nodes — like AudioDestinationNode — have a value of 0 for this attribute."
            ],
            [
                "AudioNode.channelCount",
                "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of AudioNode.channelCountMode."
            ],
            [
                "AudioNode.channelCountMode",
                "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs."
            ],
            [
                "AudioNode.channelInterpretation",
                "Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen. The possible values are \"speakers\" or \"discrete\"."
            ],
            [
                "AudioNode.connect()",
                "Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an AudioParam."
            ],
            [
                "AudioNode.disconnect()",
                "Allows us to disconnect the current node from another one it is already connected to."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioNodeOptions",
        "",
        "AudioNodeOptions",
        "",
        [
            [
                "channelCount Optional",
                "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See AudioNode.channelCount for more information.) Its usage and precise definition depend on the value of AudioNodeOptions.channelCountMode."
            ],
            [
                "channelCountMode Optional",
                "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See AudioNode.channelCountMode for more information including default values.)"
            ],
            [
                "channelInterpretation Optional",
                "Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen. The possible values are \"speakers\" or \"discrete\". (See AudioNode.channelCountMode for more information including default values.)"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioParam",
        "",
        "AudioParam",
        "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain). An AudioParam can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.",
        [
            [
                "AudioParam.defaultValue Read only",
                "Represents the initial volume of the attribute as defined by the specific AudioNode creating the AudioParam."
            ],
            [
                "AudioParam.maxValue Read only",
                "Represents the maximum possible value for the parameter's nominal (effective) range."
            ],
            [
                "AudioParam.minValue Read only",
                "Represents the minimum possible value for the parameter's nominal (effective) range."
            ],
            [
                "AudioParam.value",
                "Represents the parameter's current value as of the current time; initially set to the value of defaultValue."
            ],
            [
                "AudioParam.setValueAtTime()",
                "Schedules an instant change to the value of the AudioParam at a precise time, as measured against AudioContext.currentTime. The new value is given by the value parameter."
            ],
            [
                "AudioParam.linearRampToValueAtTime()",
                "Schedules a gradual linear change in the value of the AudioParam. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter."
            ],
            [
                "AudioParam.exponentialRampToValueAtTime()",
                "Schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter."
            ],
            [
                "AudioParam.setTargetAtTime()",
                "Schedules the start of a change to the value of the AudioParam. The change starts at the time specified in startTime and exponentially moves towards the value given by the target parameter. The exponential decay rate is defined by the timeConstant parameter, which is a time measured in seconds."
            ],
            [
                "AudioParam.setValueCurveAtTime()",
                "Schedules the values of the AudioParam to follow a set of values, defined by an array of floating-point numbers scaled to fit into the given interval, starting at a given start time and spanning a given duration of time."
            ],
            [
                "AudioParam.cancelScheduledValues()",
                "Cancels all scheduled future changes to the AudioParam."
            ],
            [
                "AudioParam.cancelAndHoldAtTime()",
                "Cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioParamDescriptor",
        "",
        "AudioParamDescriptor",
        "The AudioParamDescriptor dictionary of the Web Audio API specifies properties for AudioParam objects. It is used to create custom AudioParams on an AudioWorkletNode. If the underlying AudioWorkletProcessor has a parameterDescriptors static getter, then the returned array of objects based on this dictionary is used internally by AudioWorkletNode constructor to populate its parameters property accordingly.",
        [
            [
                "name",
                "The DOMString which represents the name of the AudioParam. Under this name the AudioParam will be available in the parameters property of the node, and under this name the AudioWorkletProcessor.process method will acquire the calculated values of this AudioParam."
            ],
            [
                "automationRate Optional",
                "Either \"a-rate\", or \"k-rate\" string which represents an automation rate of this AudioParam. Defaults to \"a-rate\"."
            ],
            [
                "minValue Optional",
                "A float which represents minimum value of the AudioParam. Defaults to -3.4028235e38."
            ],
            [
                "maxValue Optional",
                "A float which represents maximum value of the AudioParam. Defaults to 3.4028235e38."
            ],
            [
                "defaultValue Optional",
                "A float which represents initial value of the AudioParam. Defaults to 0."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioParamMap",
        "",
        "AudioParamMap",
        "This page is not complete.",
        [
            [
                "size",
                "?"
            ],
            [
                "entries()",
                "?"
            ],
            [
                "forEach()",
                "?"
            ],
            [
                "has()",
                "?"
            ],
            [
                "keys()",
                "?"
            ],
            [
                "values()",
                "?"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioProcessingEvent",
        "",
        "AudioProcessingEvent",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioScheduledSourceNode",
        "",
        "AudioScheduledSourceNode",
        "The AudioScheduledSourceNode interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the start() and stop() methods, as well as the onended event handler.",
        [
            [
                "start()",
                "Schedules the node to begin playing the constant sound at the specified time. If no time is specified, the node begins playing immediately."
            ],
            [
                "stop()",
                "Schedules the node to stop playing at the specified time. If no time is specified, the node stops playing at once."
            ],
            [
                "ended",
                "Fired when the source node has stopped playing, either because it's reached a predetermined stop time, the full duration of the audio has been performed, or because the entire buffer has been played. Also available using the onended event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioTrack",
        "",
        "AudioTrack",
        "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>. The most common use for accessing an AudioTrack object is to toggle its enabled property in order to mute and unmute the track.",
        [
            [
                "enabled",
                "A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to false mutes the track's audio."
            ],
            [
                "id Read only",
                "A DOMString which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling AudioTrackList.getTrackById(). The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification."
            ],
            [
                "kind Read only",
                "A DOMString specifying the category into which the track falls. For example, the main audio track would have a kind of \"main\"."
            ],
            [
                "label Read only",
                "A DOMString providing a human-readable label for the track. For example, an audio commentary track for a movie might have a label of \"Commentary with director John Q. Public and actors John Doe and Jane Eod.\" This string is empty if no label is provided."
            ],
            [
                "language Read only",
                "A DOMString specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 (RFC 5646) language code, such as \"en-US\" or \"pt-BR\"."
            ],
            [
                "sourceBuffer Read only",
                "The SourceBuffer that created the track. Returns null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioTrackList",
        "",
        "AudioTrackList",
        "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
        [
            [
                "length Read only",
                "The number of tracks in the list."
            ],
            [
                "onaddtrack",
                "An event handler to be called when the addtrack event is fired, indicating that a new audio track has been added to the media element."
            ],
            [
                "onchange",
                "An event handler to be called when the change event occurs. This occurs when one or more tracks have been enabled or disabled by their enabled flag being changed."
            ],
            [
                "onremovetrack",
                "An event handler to call when the removetrack event is sent, indicating that an audio track has been removed from the media element."
            ],
            [
                "getTrackById()",
                "Returns the AudioTrack found within the AudioTrackList whose id matches the specified string. If no match is found, null is returned."
            ],
            [
                "addtrack",
                "Fired when a new audio track has been added to the media element. Also available via the onaddtrack property."
            ],
            [
                "change",
                "Fired when a track has been enabled or disabled. Also available via the onchange property."
            ],
            [
                "removetrack",
                "Fired when a new audio track has been removed from the media element. Also available via the onremovetrack property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioWorklet",
        "",
        "AudioWorklet",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioWorkletGlobalScope",
        "",
        "AudioWorkletGlobalScope",
        "",
        [
            [
                "currentFrame Read only",
                "Returns an integer that represents the ever-increasing current sample-frame of the audio block being processed. It is incremented by 128 (the size of a render quantum) after the processing of each audio block."
            ],
            [
                "currentTime Read only",
                "Returns a double that represents the ever-increasing context time of the audio block being processed. It is equal to the currentTime property of the BaseAudioContext the worklet belongs to."
            ],
            [
                "sampleRate Read only",
                "Returns a float that represents the sample rate of the associated BaseAudioContext."
            ],
            [
                "registerProcessor()",
                "Registers a class derived from the AudioWorkletProcessor interface. The class can then be used by creating an AudioWorkletNode, providing its registered name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioWorkletNode",
        "",
        "AudioWorkletNode",
        "",
        [
            [
                "AudioWorkletNode()",
                "Creates a new instance of an AudioWorkletNode object."
            ],
            [
                "AudioWorkletNode.port Read only",
                "Returns a MessagePort used for bidirectional communication between the node and its associated AudioWorkletProcessor. The other end is available under the port property of the processor."
            ],
            [
                "AudioWorkletNode.parameters Read only",
                "Returns an AudioParamMap — a collection of AudioParam objects. They are instantiated during the creation of the underlying AudioWorkletProcessor. If the AudioWorkletProcessor has a static parameterDescriptors getter, the AudioParamDescriptor array returned from it is used to create AudioParam objects on the AudioWorkletNode. With this mechanism it is possible to make your own AudioParam objects accessible from your AudioWorkletNode. You can then use their values in the associated AudioWorkletProcessor."
            ],
            [
                "AudioWorkletNode.onprocessorerror",
                "Fired when an error is thrown in associated AudioWorkletProcessor. Once fired, the processor and consequently the node will output silence throughout its lifetime."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AudioWorkletProcessor",
        "",
        "AudioWorkletProcessor",
        "",
        [
            [
                "AudioWorkletProcessor()",
                "Creates a new instance of an AudioWorkletProcessor object."
            ],
            [
                "port Read only",
                "Returns a MessagePort used for bidirectional communication between the processor and the AudioWorkletNode which it belongs to. The other end is available under the port property of the node."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AuthenticatorAssertionResponse",
        "",
        "AuthenticatorAssertionResponse",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "AuthenticatorAssertionResponse.clientDataJSON Secure contextRead only",
                "The client data for the authentication, such as origin and challenge. The clientDataJSON property is inherited from the AuthenticatorResponse."
            ],
            [
                "AuthenticatorAssertionResponse.authenticatorData Secure contextRead only",
                "An ArrayBuffer containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence and user verification flags, and any extensions processed by the authenticator."
            ],
            [
                "AuthenticatorAssertionResponse.signature Secure contextRead only",
                "An assertion signature over AuthenticatorAssertionResponse.authenticatorData and AuthenticatorResponse.clientDataJSON. The assertion signature is created with the private key of keypair that was created during the navigator.credentials.create() call and verified using the public key of that same keypair."
            ],
            [
                "AuthenticatorAssertionResponse.userHandle Secure contextRead only",
                "An ArrayBuffer containing an opaque user identifier."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AuthenticatorAttestationResponse",
        "",
        "AuthenticatorAttestationResponse",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "AuthenticatorAttestationResponse.clientDataJSON Secure contextRead only",
                "Client data for the authentication, such as origin and challenge. The clientDataJSON property is inherited from the AuthenticatorResponse."
            ],
            [
                "AuthenticatorAttestationResponse.attestationObject Secure contextRead only",
                "An ArrayBuffer containing authenticator data and an attestation statement for a newly-created key pair."
            ],
            [
                "AuthenticatorAttestationResponse.getTransports()Secure context",
                "Returns an Array of strings describing which transport methods (e.g. usb, nfc) are believed to be supported with the authenticator. The array may be empty if the information is not available."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/AuthenticatorResponse",
        "",
        "AuthenticatorResponse",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "AuthenticatorResponse.clientDataJSON",
                "A JSON string in an ArrayBuffer, representing the client data that was passed to CredentialsContainer.create() or CredentialsContainer.get()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BackgroundFetchEvent",
        "",
        "BackgroundFetchEvent",
        "The BackgroundFetchEvent interface of the Background Fetch API is the event type for background fetch events dispatched on the service worker global scope.",
        [
            [
                "BackgroundFetchEvent()",
                "Creates a new BackgroundFetchEvent object. This constructor is not typically used, as the browser creates these objects itself and provides them to background fetch event callbacks."
            ],
            [
                "BackgroundFetchEvent.registrationRead only",
                "Returns the BackgroundFetchRegistration that the event was initialized to."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BackgroundFetchManager",
        "",
        "BackgroundFetchManager",
        "The BackgroundFetchManager interface of the Background Fetch API is a map where the keys are background fetch IDs and the values are BackgroundFetchRegistration objects.",
        [
            [
                "fetch()",
                "Returns a Promise that resolves with a BackgroundFetchRegistration object for a supplied array of URLs and Request objects."
            ],
            [
                "get()",
                "Returns a Promise that resolves with the BackgroundFetchRegistration associated with the provided id or undefined if the id is not found."
            ],
            [
                "getIDs()",
                "Returns the IDs of all registered background fetches."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BackgroundFetchRecord",
        "",
        "BackgroundFetchRecord",
        "The BackgroundFetchRecord interface of the Background Fetch API represents an individual request and response.",
        [
            [
                "requestRead only",
                "Returns a Request."
            ],
            [
                "responseReadyRead only",
                "Returns a promise that resolves with a Response."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BackgroundFetchRegistration",
        "",
        "BackgroundFetchRegistration",
        "The BackgroundFetchRegistration interface of the Background Fetch API represents an individual background fetch.",
        [
            [
                "BackgroundFetchRegistration.idRead only",
                "A string containing the background fetch's ID."
            ],
            [
                "BackgroundFetchRegistration.uploadTotalRead only",
                "A number containing the total number of bytes to be uploaded."
            ],
            [
                "BackgroundFetchRegistration.uploadedRead only",
                "A number containing the size in bytes successfully sent, initially 0."
            ],
            [
                "BackgroundFetchRegistration.downloadTotalRead only",
                "A number containing the total size in bytes of this download. This is the value set when the background fetch was registered, or 0."
            ],
            [
                "BackgroundFetchRegistration.downloadedRead only",
                "A number containing the size in bytes that has been downloaded, initially 0."
            ],
            [
                "BackgroundFetchRegistration.resultRead only",
                "Returns an empty string initially, on completion either the string \"success\" or \"failure\"."
            ],
            [
                "BackgroundFetchRegistration.failureReasonRead only",
                "One of the following strings: \"\" The background fetch has not completed, or was successful. \"aborted\" The operation was cancelled by the user, or abort() was called. \"bad-status\" A response had a not-ok status (a status outside the range 200-299). \"fetch-error\" A fetch failed for other reasons, for example CORS, or a network failure. \"quota-exceeded\" Storage quota was reached during the operation. \"download-total-exceeded\" The provided downloadTotal was exceeded. This value was set when the background fetch was registered."
            ],
            [
                "\"\"",
                "The background fetch has not completed, or was successful."
            ],
            [
                "\"aborted\"",
                "The operation was cancelled by the user, or abort() was called."
            ],
            [
                "\"bad-status\"",
                "A response had a not-ok status (a status outside the range 200-299)."
            ],
            [
                "\"fetch-error\"",
                "A fetch failed for other reasons, for example CORS, or a network failure."
            ],
            [
                "\"quota-exceeded\"",
                "Storage quota was reached during the operation."
            ],
            [
                "\"download-total-exceeded\"",
                "The provided downloadTotal was exceeded. This value was set when the background fetch was registered."
            ],
            [
                "BackgroundFetchRegistration.recordsAvailableRead only",
                "A boolean indicating whether the recordsAvailable flag is set."
            ],
            [
                "BackgroundFetchRegistration.onprogress",
                "Fired when there is a change to any of the following properties: uploaded downloaded result failureReason"
            ],
            [
                "BackgroundFetchRegistration.abort()",
                "Aborts the background fetch. Returns a Promise that resolves with true if the fetch was successfully aborted."
            ],
            [
                "BackgroundFetchRegistration.match()",
                "Returns a single BackgroundFetchRecord object which is the first match for the arguments."
            ],
            [
                "BackgroundFetchRegistration.matchAll()",
                "Returns a Promise that resolves with an array of BackgroundFetchRecord objects containing requests and responses."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BackgroundFetchUpdateUIEvent",
        "",
        "BackgroundFetchUpdateUIEvent",
        "The BackgroundFetchUpdateUIEvent interface of the Background Fetch API is an event type passed to ServiceWorkerGlobalScope.onbackgroundfetchsuccess and ServiceWorkerGlobalScope.onbackgroundfetchfail, and provides a method for updating the title and icon of the app to inform a user of the success or failure of a background fetch.",
        [
            [
                "BackgroundFetchUpdateUIEvent()",
                "Creates a new BackgroundFetchUIEvent object. This constructor is not typically used, as the browser creates these objects itself and passed them to ServiceWorkerGlobalScope.onbackgroundfetchsuccess and ServiceWorkerGlobalScope.onbackgroundfetchfail."
            ],
            [
                "BackgroundFetchUpdateUIEvent.updateUI()",
                "Updates the title and icon in the user interface to show the status of a background fetch. Resolves with a Promise."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BarcodeDetector",
        "",
        "BarcodeDetector",
        "This page is not complete.",
        [
            [
                "BarcodeDetector.BarcodeDetector()",
                "Creates and returns a BarcodeDetector object, with optional barcodeDetectorOptions"
            ],
            [
                "detect()",
                "Returns a Promise which fulfills with an array of detectedBarcode objects with the following properties: boundingBox: A DOMRectReadOnly, which returns the dimensions of a rectangle representing the extent of a detected barcode, aligned with the image. cornerPoints: The x and y co-ordinates of the four corner points of the detected barcode relative to the image, starting with the top left and working clockwise. This may not be square due to perspective distortions within the image. format: The detected barcode format. (For a full list of formats see the [landing page]) rawValue: A String decoded from the barcode data."
            ],
            [
                "getSupportedFormats()",
                "Returns a Promise which fulfills with an Array of supported barcode format types."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BaseAudioContext",
        "",
        "BaseAudioContext",
        "The BaseAudioContext interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively. You wouldn't use BaseAudioContext directly — you'd use its features via one of these two inheriting interfaces.",
        [
            [
                "BaseAudioContext.audioWorklet Read only Secure context",
                "Returns the AudioWorklet object, which can be used to create and manage AudioNodes in which JavaScript code implementing the AudioWorkletProcessor interface are run in the background to process audio data."
            ],
            [
                "BaseAudioContext.currentTime Read only",
                "Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at 0."
            ],
            [
                "BaseAudioContext.destination Read only",
                "Returns an AudioDestinationNode representing the final destination of all audio in the context. It can be thought of as the audio-rendering device."
            ],
            [
                "BaseAudioContext.listener Read only",
                "Returns the AudioListener object, used for 3D spatialization."
            ],
            [
                "BaseAudioContext.sampleRate Read only",
                "Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an AudioContext cannot be changed."
            ],
            [
                "BaseAudioContext.state Read only",
                "Returns the current state of the AudioContext."
            ],
            [
                "BaseAudioContext.onstatechange",
                "An event handler that runs when an event of type statechange has fired. This occurs when the AudioContext's state changes, due to the calling of one of the state change methods (AudioContext.suspend, AudioContext.resume, or AudioContext.close)."
            ],
            [
                "BaseAudioContext.createAnalyser()",
                "Creates an AnalyserNode, which can be used to expose audio time and frequency data and for example to create data visualisations."
            ],
            [
                "BaseAudioContext.createBiquadFilter()",
                "Creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types: high-pass, low-pass, band-pass, etc"
            ],
            [
                "BaseAudioContext.createBuffer()",
                "Creates a new, empty AudioBuffer object, which can then be populated by data and played via an AudioBufferSourceNode."
            ],
            [
                "BaseAudioContext.createBufferSource()",
                "Creates an AudioBufferSourceNode, which can be used to play and manipulate audio data contained within an AudioBuffer object. AudioBuffers are created using AudioContext.createBuffer() or returned by AudioContext.decodeAudioData() when it successfully decodes an audio track."
            ],
            [
                "BaseAudioContext.createConstantSource()",
                "Creates a ConstantSourceNode object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value."
            ],
            [
                "BaseAudioContext.createChannelMerger()",
                "Creates a ChannelMergerNode, which is used to combine channels from multiple audio streams into a single audio stream."
            ],
            [
                "BaseAudioContext.createChannelSplitter()",
                "Creates a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately."
            ],
            [
                "BaseAudioContext.createConvolver()",
                "Creates a ConvolverNode, which can be used to apply convolution effects to your audio graph, for example a reverberation effect."
            ],
            [
                "BaseAudioContext.createDelay()",
                "Creates a DelayNode, which is used to delay the incoming audio signal by a certain amount. This node is also useful to create feedback loops in a Web Audio API graph."
            ],
            [
                "BaseAudioContext.createDynamicsCompressor()",
                "Creates a DynamicsCompressorNode, which can be used to apply acoustic compression to an audio signal."
            ],
            [
                "BaseAudioContext.createGain()",
                "Creates a GainNode, which can be used to control the overall volume of the audio graph."
            ],
            [
                "BaseAudioContext.createIIRFilter()",
                "Creates an IIRFilterNode, which represents a second order filter configurable as several different common filter types."
            ],
            [
                "BaseAudioContext.createOscillator()",
                "Creates an OscillatorNode, a source representing a periodic waveform. It basically generates a tone."
            ],
            [
                "BaseAudioContext.createPanner()",
                "Creates a PannerNode, which is used to spatialise an incoming audio stream in 3D space."
            ],
            [
                "BaseAudioContext.createPeriodicWave()",
                "Creates a PeriodicWave, used to define a periodic waveform that can be used to determine the output of an OscillatorNode."
            ],
            [
                "BaseAudioContext.createScriptProcessor()",
                "Creates a ScriptProcessorNode, which can be used for direct audio processing via JavaScript."
            ],
            [
                "BaseAudioContext.createStereoPanner()",
                "Creates a StereoPannerNode, which can be used to apply stereo panning to an audio source."
            ],
            [
                "BaseAudioContext.createWaveShaper()",
                "Creates a WaveShaperNode, which is used to implement non-linear distortion effects."
            ],
            [
                "BaseAudioContext.decodeAudioData()",
                "Asynchronously decodes audio file data contained in an ArrayBuffer. In this case, the ArrayBuffer is usually loaded from an XMLHttpRequest's response attribute after setting the responseType to arraybuffer. This method only works on complete files, not fragments of audio files."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BasicCardRequest",
        "",
        "BasicCardRequest",
        "",
        [
            [
                "BasicCardRequest.supportedNetworks Optional Secure context",
                "An optional array of DOMStrings representing the card networks that the retailer supports (e.g. \"amex\", \"mastercard\"); see Card network identifiers for a complete list. If the property is missing, it implies that all networks are supported."
            ],
            [
                "BasicCardRequest.supportedTypes Optional Secure context",
                "This obsolete property was used to provide an optional array of DOMStrings representing the card types that the retailer supports (e.g. credit, debit, prepaid). If the property is missing, it implies that all the card types are supported. Instead of using this property, it is up to the server to check support for the card given the information coded into the account number."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BasicCardResponse",
        "",
        "BasicCardResponse",
        "",
        [
            [
                "BasicCardResponse.cardNumber Read only Secure context",
                "Contains the number of the card used to make the payment."
            ],
            [
                "BasicCardResponse.cardholderName Read only Secure context Optional",
                "Contains the cardholder name of the card used to make the payment."
            ],
            [
                "BasicCardResponse.cardSecurityCode Read only Secure context Optional",
                "Contains the security code of the card used to make the payment."
            ],
            [
                "BasicCardResponse.expiryMonth Read only Secure context Optional",
                "Contains the expiry month of the card used to make the payment."
            ],
            [
                "BasicCardResponse.expiryYear Read only Secure context Optional",
                "Contains the expiry year of the card used to make the payment."
            ],
            [
                "BasicCardResponse.billingAddress Read only Secure context Optional",
                "Contains the billing address of the card used to make the payment."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BatteryManager",
        "",
        "BatteryManager",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "BatteryManager.charging Read only",
                "A Boolean value indicating whether the battery is currently being charged."
            ],
            [
                "BatteryManager.chargingTime Read only",
                "A number representing the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged."
            ],
            [
                "BatteryManager.dischargingTime Read only",
                "A number representing the remaining time in seconds until the battery is completely discharged and the system suspends."
            ],
            [
                "BatteryManager.level Read only",
                "A number representing the system's battery charge level scaled to a value between 0.0 and 1.0."
            ],
            [
                "BatteryManager.onchargingchange",
                "A handler for the chargingchange event; This event is sent when the battery charging state is updated."
            ],
            [
                "BatteryManager.onchargingtimechange",
                "A handler for the chargingtimechange event; This event is sent when the battery charging time is updated"
            ],
            [
                "BatteryManager.ondischargingtimechange",
                "A handler for the dischargingtimechange event; This event is sent when the battery discharging time is updated."
            ],
            [
                "BatteryManager.onlevelchange",
                "A handler for the levelchange event; This event is sent when the battery level is updated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BeforeInstallPromptEvent",
        "",
        "BeforeInstallPromptEvent",
        "This interface inherits from the Event interface.",
        [
            [
                "BeforeInstallPromptEvent()",
                "Creates a new BeforeInstallPromptEvent."
            ],
            [
                "BeforeInstallPromptEvent.platforms Read only",
                "Returns an array of DOMString items containing the platforms on which the event was dispatched. This is provided for user agents that want to present a choice of versions to the user such as, for example, \"web\" or \"play\" which would allow the user to chose between a web version or an Android version."
            ],
            [
                "BeforeInstallPromptEvent.userChoice Read only",
                "Returns a Promise that resolves to a DOMString containing either \"accepted\" or \"dismissed\"."
            ],
            [
                "BeforeInstallPromptEvent.prompt()",
                "Allows a developer to show the install prompt at a time of their own choosing. This method returns a Promise."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BeforeUnloadEvent",
        "",
        "BeforeUnloadEvent",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/BiquadFilterNode",
        "",
        "BiquadFilterNode",
        "",
        [
            [
                "BiquadFilterNode()",
                "Creates a new instance of a BiquadFilterNode object."
            ],
            [
                "BiquadFilterNode.frequency Read only",
                "Is an a-rate AudioParam, a double representing a frequency in the current filtering algorithm measured in hertz (Hz)."
            ],
            [
                "BiquadFilterNode.detune Read only",
                "Is an a-rate AudioParam representing detuning of the frequency in cents."
            ],
            [
                "BiquadFilterNode.Q Read only",
                "Is an a-rate AudioParam, a double representing a Q factor, or quality factor."
            ],
            [
                "BiquadFilterNode.gain Read only",
                "Is an a-rate AudioParam, a double representing the gain used in the current filtering algorithm."
            ],
            [
                "BiquadFilterNode.type",
                "Is a string value defining the kind of filtering algorithm the node is implementing. The meaning of the different parameters depending of the type of the filter (detune has the same meaning regardless, so isn't listed below) type Description frequency Q gain lowpass Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated. The cutoff frequency. Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak. Not used highpass Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through. The cutoff frequency. Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak. Not used bandpass Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through. The center of the range of frequencies. Controls the width of the frequency band. The greater the Q value, the smaller the frequency band. Not used lowshelf Standard second-order lowshelf filter. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged. The upper limit of the frequencies getting a boost or an attenuation. Not used The boost, in dB, to be applied; if negative, it will be an attenuation. highshelf Standard second-order highshelf filter. Frequencies higher than the frequency get a boost or an attenuation; frequencies lower than it are unchanged. The lower limit of the frequencies getting a boost or an attenuation. Not used The boost, in dB, to be applied; if negative, it will be an attenuation. peaking Frequencies inside the range get a boost or an attenuation; frequencies outside it are unchanged. The middle of the frequency range getting a boost or an attenuation. Controls the width of the frequency band. The greater the Q value, the smaller the frequency band. The boost, in dB, to be applied; if negative, it will be an attenuation. notch Standard notch filter, also called a band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated. The center of the range of frequencies. Controls the width of the frequency band. The greater the Q value, the smaller the frequency band. Not used allpass Standard second-order allpass filter. It lets all frequencies through, but changes the phase-relationship between the various frequencies. The frequency with the maximal group delay, that is, the frequency where the center of the phase transition occurs. Controls how sharp the transition is at the medium frequency. The larger this parameter is, the sharper and larger the transition will be. Not used"
            ],
            [
                "BiquadFilterNode.getFrequencyResponse()",
                "From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Blob",
        "",
        "Blob",
        "The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.",
        [
            [
                "Blob()",
                "Returns a newly created Blob object which contains a concatenation of all of the data in the array passed into the constructor."
            ],
            [
                "Blob.prototype.size Read only",
                "The size, in bytes, of the data contained in the Blob object."
            ],
            [
                "Blob.prototype.type Read only",
                "A string indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty."
            ],
            [
                "Blob.prototype.arrayBuffer()",
                "Returns a promise that resolves with an ArrayBuffer containing the entire contents of the Blob as binary data."
            ],
            [
                "Blob.prototype.slice()",
                "Returns a new Blob object containing the data in the specified range of bytes of the blob on which it's called."
            ],
            [
                "Blob.prototype.stream()",
                "Returns a ReadableStream that can be used to read the contents of the Blob."
            ],
            [
                "Blob.prototype.text()",
                "Returns a promise that resolves with a USVString containing the entire contents of the Blob interpreted as UTF-8 text."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BlobBuilder",
        "",
        "BlobBuilder",
        "",
        [
            [
                "data",
                "The data to append to the Blob being constructed."
            ],
            [
                "endings",
                "Specifies how strings containing \\n are to be written out. This can be \"transparent\" (endings unchanged) or \"native\" (endings changed to match host OS filesystem convention). The default value is \"transparent\"."
            ],
            [
                "contentType Optional",
                "The MIME type of the data to be returned in the Blob. This will be the value of the Blob object's type property."
            ],
            [
                "name",
                "The file name."
            ],
            [
                "contentType Optional",
                "The MIME type of the data to be returned in the File. This will be the value of the File object's type property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BlobEvent",
        "",
        "BlobEvent",
        "The BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily, associated with media content.",
        [
            [
                "BlobEvent()",
                "Creates a BlobEvent event with the given parameters."
            ],
            [
                "BlobEvent.data Read only",
                "A Blob representing the data associated with the event. The event was fired on the EventTarget because of something happening on that specific Blob."
            ],
            [
                "BlobEvent.timecode Read only",
                "A DOMHighResTimeStamp indicating the difference between the timestamp of the first chunk in data and the timestamp of the first chunk in the first BlobEvent produced by this recorder. Note that the timecode in the first produced BlobEvent does not need to be zero."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Bluetooth",
        "",
        "Bluetooth",
        "",
        [
            [
                "Bluetooth.referringDevice Read only",
                "Returns a reference to the device, if any, from which the user opened the current page. For example, an Eddystone beacon might advertise a URL, which the user agent allows the user to open. A BluetoothDevice representing the beacon would be available through navigator.bluetooth.referringDevice."
            ],
            [
                "Bluetooth.onavailabilitychanged",
                "An event handler that runs when an event of type availabilitychanged has fired."
            ],
            [
                "Bluetooth.getAvailability()",
                "Returns a Promise that resolved to a Boolean indicating whether the user-agent has the ability to support Bluetooth. Some user-agents let the user configure an option that affects what is returned by this value. If this option is set, that is the value returned by this method."
            ],
            [
                "Bluetooth.getDevices()",
                "Returns a Promise that resolved to an array of BluetoothDevices which the origin already obtained permission for via a call to Bluetooth.requestDevice()."
            ],
            [
                "Bluetooth.requestDevice()",
                "Returns a Promise to a BluetoothDevice object with the specified options."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BluetoothCharacteristicProperties",
        "",
        "BluetoothCharacteristicProperties",
        "",
        [
            [
                "authenticatedSignedWritesRead only",
                "Returns a boolean that is true if signed writing to the characteristic value is permitted."
            ],
            [
                "broadcastRead only",
                "Returns a boolean that is true if the broadcast of the characteristic value is permitted using the Server Characteristic Configuration Descriptor."
            ],
            [
                "indicateRead only",
                "Returns a boolean that is true if indications of the characteristic value with acknowledgement is permitted."
            ],
            [
                "notifyRead only",
                "Returns a boolean that is true if notifications of the characteristic value without acknowledgement is permitted."
            ],
            [
                "readRead only",
                "Returns a boolean that is true if the reading of the characteristic value is permitted."
            ],
            [
                "reliableWriteRead only",
                "Returns a boolean that is true if reliable writes to the characteristic is permitted."
            ],
            [
                "writableAuxiliariesRead only",
                "Returns a boolean that is true if reliable writes to the characteristic descriptor is permitted."
            ],
            [
                "writeRead only",
                "Returns a boolean that is true if the writing to the characteristic with response is permitted."
            ],
            [
                "writeWithoutResponseRead only",
                "Returns a boolean that is true if the writing to the characteristic without response is permitted."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BluetoothDevice",
        "",
        "BluetoothDevice",
        "",
        [
            [
                "BluetoothDevice.id Read only",
                "A DOMString that uniquely identifies a device."
            ],
            [
                "BluetoothDevice.name Read only",
                "A DOMString that provices a human-readable name for the device."
            ],
            [
                "BluetoothDevice.gatt Read only",
                "A reference to the device's BluetoothRemoteGATTServer."
            ],
            [
                "BluetoothDevice.watchAdvertisments()",
                "A Promise that resolves to undefined or is rejected with an error if advetisments can’t shown for any reason."
            ],
            [
                "BluetoothDevice.unwatchAdvertisments()",
                "Stops watching for advertisments."
            ],
            [
                "BluetoothDevice.connectGATT()",
                "A Promise that resolves to an instance of BluetoothRemoteGATTServer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic",
        "",
        "BluetoothRemoteGATTCharacteristic",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "BluetoothRemoteGATTCharacteristic.serviceRead only",
                "Returns the BluetoothRemoteGATTService this characteristic belongs to."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.uuidRead only",
                "Returns a DOMString containing the UUID of the characteristic, for example '00002a37-0000-1000-8000-00805f9b34fb' for the Heart Rate Measurement characteristic."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.propertiesRead only",
                "Returns the properties of this characteristic."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.valueRead only",
                "The currently cached characteristic value. This value gets updated when the value of the characteristic is read or updated via a notification or indication."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.getDescriptor()",
                "Returns a Promise that resolves to the first BluetoothRemoteGATTDescriptor for a given descriptor UUID."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.getDescriptors()",
                "Returns a Promise that resolves to an Array of all BluetoothRemoteGATTDescriptor objects for a given descriptor UUID."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.readValue()",
                "Returns a Promise that resolves to an ArrayBuffer holding a duplicate of the value property if it is available and supported. Otherwise it throws an error."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.writeValue(value)",
                "Sets the value property to the bytes contained in a given ArrayBuffer, calls WriteCharacteristicValue(this=this, value=value, response=\"optional\"), and returns the resulting Promise."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.writeValueWithResponse(value)",
                "Sets the value property to the bytes contained in a given ArrayBuffer, calls WriteCharacteristicValue(this=this, value=value, response=\"required\"), and returns the resulting Promise."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.writeValueWithoutResponse(value)",
                "Sets the value property to the bytes contained in a given ArrayBuffer, calls WriteCharacteristicValue(this=this, value=value, response=\"never\"), and returns the resulting Promise."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.startNotifications()",
                "Returns a Promise when navigator.bluetooth is added to the active notification context."
            ],
            [
                "BluetoothRemoteGATTCharacteristic.stopNotifications()",
                "Returns a Promise when navigator.bluetooth is removed from the active notification context."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor",
        "",
        "BluetoothRemoteGATTDescriptor",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "BluetoothRemoteGATTDescriptor.characteristicRead only",
                "Returns the BluetoothRemoteGATTCharacteristic this descriptor belongs to."
            ],
            [
                "BluetoothRemoteGATTDescriptor.uuidRead only",
                "Returns the UUID of the characteristic descriptor, for example '00002902-0000-1000-8000-00805f9b34fb' for theClient Characteristic Configuration descriptor."
            ],
            [
                "BluetoothRemoteGATTDescriptor.valueRead only",
                "Returns the currently cached descriptor value. This value gets updated when the value of the descriptor is read."
            ],
            [
                "BluetoothRemoteGATTDescriptor.readValue()",
                "Returns a Promise that resolves to an ArrayBuffer holding a duplicate of the value property if it is available and supported. Otherwise it throws an error."
            ],
            [
                "BluetoothRemoteGATTDescriptor.writeValue()",
                "Sets the value property to the bytes contained in an ArrayBuffer and returns a Promise."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BluetoothRemoteGATTServer",
        "",
        "BluetoothRemoteGATTServer",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "BluetoothRemoteGATTServer.connectedRead only",
                "A boolean value that returns true while this script execution environment is connected to this.device. It can be false while the user agent is physically connected."
            ],
            [
                "BluetoothRemoteGATTServer.deviceRead only",
                "A reference to the BluetoothDevice running the server."
            ],
            [
                "BluetoothRemoteGATTServer.connect()",
                "Causes the script execution environment to connect to this.device."
            ],
            [
                "BluetoothRemoteGATTServer.disconnect()",
                "Causes the script execution environment to disconnect from this.device."
            ],
            [
                "BluetoothRemoteGATTServer.getPrimaryService()",
                "Returns a promise to the primary BluetoothRemoteGATTService offered by the bluetooth device for a specified BluetoothServiceUUID."
            ],
            [
                "BluetoothRemoteGATTServer.getPrimaryServices()",
                "Returns a promise to a list of primary BluetoothRemoteGATTService objects offered by the bluetooth device for a specified BluetoothServiceUUID."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BluetoothRemoteGATTService",
        "",
        "BluetoothRemoteGATTService",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "BluetoothRemoteGATTService.deviceRead only",
                "Returns information about a Bluetooth device through an instance of BluetoothDevice."
            ],
            [
                "BluetoothRemoteGATTService.isPrimaryRead only",
                "Returns a Boolean Indicating whether this is a primary or secondary service."
            ],
            [
                "BluetoothRemoteGATTService.uuidRead only",
                "Returns a DOMString representing the UUID of this service."
            ],
            [
                "BluetoothRemoteGATTService.getCharacteristic()",
                "Returns a Promise to an instance of BluetoothRemoteGATTCharacteristic for a given universally unique identifier (UUID)."
            ],
            [
                "BluetoothRemoteGATTService.getCharacteristics()",
                "Returns a Promise to an Array of BluetoothRemoteGATTCharacteristic instances for an optional universally unique identifier (UUID)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BroadcastChannel",
        "",
        "BroadcastChannel",
        "",
        [
            [
                "BroadcastChannel()",
                "Creates an object linking to the named channel."
            ],
            [
                "BroadcastChannel.name Read only",
                "Returns a DOMString, the name of the channel."
            ],
            [
                "BroadcastChannel.onmessage",
                "An event handler property that specifies the function to execute when a message event is fired on this object."
            ],
            [
                "BroadcastChannel.onmessageerror",
                "An event handler called when a MessageEvent of type MessageError is fired—that is, when it receives a message that cannot be deserialized."
            ],
            [
                "BroadcastChannel.postMessage()",
                "Sends the message, of any type of object, to each BroadcastChannel object listening to the same channel."
            ],
            [
                "BroadcastChannel.close()",
                "Closes the channel object, indicating it won't get any new messages, and allowing it to be, eventually, garbage collected."
            ],
            [
                "message",
                "Fired when a message arrives on the channel. Also available via the onmessage property."
            ],
            [
                "messageerror",
                "Fired when a message arrives that can't be deserialized. Also available via the onmessageerror property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/BufferSource",
        "",
        "BufferSource",
        "BufferSource is a typedef used to represent objects that are either themselves an ArrayBuffer, or which are a TypedArray providing an ArrayBufferView.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/ByteLengthQueuingStrategy",
        "",
        "ByteLengthQueuingStrategy",
        "",
        [
            [
                "ByteLengthQueuingStrategy()",
                "Creates a new ByteLengthQueuingStrategy object instance."
            ],
            [
                "ByteLengthQueuingStrategy.size()",
                "Returns the given chunk’s byteLength property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ByteString",
        "",
        "ByteString",
        "ByteString is a UTF-8 String that corresponds to the set of all possible sequences of bytes. ByteString maps to a String when returned in JavaScript; generally, it's only used when interfacing with protocols that use bytes and strings interchangeably, such as HTTP.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/Cache",
        "",
        "Cache",
        "The Cache interface provides a persistent storage mechanism for Request / Response object pairs that are cached in long lived memory. How long a Cache lives is browser dependent, but a single origin's scripts can typically rely on the presence of a previously populated Cache. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.",
        [
            [
                "Cache.match(request, options)",
                "Returns a Promise that resolves to the response associated with the first matching request in the Cache object."
            ],
            [
                "Cache.matchAll(request, options)",
                "Returns a Promise that resolves to an array of all matching requests in the Cache object."
            ],
            [
                "Cache.add(request)",
                "Takes a URL, retrieves it and adds the resulting response object to the given cache. This is functionally equivalent to calling fetch(), then using put() to add the results to the cache."
            ],
            [
                "Cache.addAll(requests)",
                "Takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache."
            ],
            [
                "Cache.put(request, response)",
                "Takes both a request and its response and adds it to the given cache."
            ],
            [
                "Cache.delete(request, options)",
                "Finds the Cache entry whose key is the request, returning a Promise that resolves to true if a matching Cache entry is found and deleted. If no Cache entry is found, the promise resolves to false."
            ],
            [
                "Cache.keys(request, options)",
                "Returns a Promise that resolves to an array of Cache keys."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CacheStorage",
        "",
        "CacheStorage",
        "",
        [
            [
                "CacheStorage.match()",
                "Checks if a given Request is a key in any of the Cache objects that the CacheStorage object tracks, and returns a Promise that resolves to that match."
            ],
            [
                "CacheStorage.has()",
                "Returns a Promise that resolves to true if a Cache object matching the cacheName exists."
            ],
            [
                "CacheStorage.open()",
                "Returns a Promise that resolves to the Cache object matching the cacheName (a new cache is created if it doesn't already exist.)"
            ],
            [
                "CacheStorage.delete()",
                "Finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true. If no Cache object is found, it resolves to false."
            ],
            [
                "CacheStorage.keys()",
                "Returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage. Use this method to iterate over a list of all the Cache objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CanvasCaptureMediaStreamTrack",
        "",
        "CanvasCaptureMediaStreamTrack",
        "The CanvasCaptureMediaStreamTrack interface represents the video track contained in a MediaStream being generated from a <canvas> following a call to HTMLCanvasElement.captureStream().",
        [
            [
                "CanvasCaptureMediaStreamTrack.canvas Read only",
                "Returns the HTMLCanvasElement object whose surface is captured in real-time."
            ],
            [
                "CanvasCaptureMediaStreamTrack.requestFrame()",
                "Manually forces a frame to be captured and sent to the stream. This lets applications that wish to specify the frame capture times directly do so, if they specified a frameRate of 0 when calling captureStream()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CanvasGradient",
        "",
        "CanvasGradient",
        "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient(), CanvasRenderingContext2D.createConicGradient() or CanvasRenderingContext2D.createRadialGradient().",
        [
            [
                "CanvasGradient.addColorStop()",
                "Adds a new stop, defined by an offset and a color, to the gradient. If the offset is not between 0 and 1, inclusive, an INDEX_SIZE_ERR is raised; if the color can't be parsed as a CSS <color>, a SYNTAX_ERR is raised."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CanvasImageSource",
        "",
        "CanvasImageSource",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/CanvasPattern",
        "",
        "CanvasPattern",
        "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.",
        [
            [
                "CanvasPattern.setTransform()",
                "Applies an SVGMatrix or DOMMatrix representing a linear transform to the pattern."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CanvasRenderingContext2D",
        "",
        "CanvasRenderingContext2D",
        "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
        [
            [
                "CanvasRenderingContext2D.clearRect()",
                "Sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content."
            ],
            [
                "CanvasRenderingContext2D.fillRect()",
                "Draws a filled rectangle at (x, y) position whose size is determined by width and height."
            ],
            [
                "CanvasRenderingContext2D.strokeRect()",
                "Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style."
            ],
            [
                "CanvasRenderingContext2D.fillText()",
                "Draws (fills) a given text at the given (x, y) position."
            ],
            [
                "CanvasRenderingContext2D.strokeText()",
                "Draws (strokes) a given text at the given (x, y) position."
            ],
            [
                "CanvasRenderingContext2D.measureText()",
                "Returns a TextMetrics object."
            ],
            [
                "CanvasRenderingContext2D.lineWidth",
                "Width of lines. Default 1.0."
            ],
            [
                "CanvasRenderingContext2D.lineCap",
                "Type of endings on the end of lines. Possible values: butt (default), round, square."
            ],
            [
                "CanvasRenderingContext2D.lineJoin",
                "Defines the type of corners where two lines meet. Possible values: round, bevel, miter (default)."
            ],
            [
                "CanvasRenderingContext2D.miterLimit",
                "Miter limit ratio. Default 10."
            ],
            [
                "CanvasRenderingContext2D.getLineDash()",
                "Returns the current line dash pattern array containing an even number of non-negative numbers."
            ],
            [
                "CanvasRenderingContext2D.setLineDash()",
                "Sets the current line dash pattern."
            ],
            [
                "CanvasRenderingContext2D.lineDashOffset",
                "Specifies where to start a dash array on a line."
            ],
            [
                "CanvasRenderingContext2D.font",
                "Font setting. Default value 10px sans-serif."
            ],
            [
                "CanvasRenderingContext2D.textAlign",
                "Text alignment setting. Possible values: start (default), end, left, right, center."
            ],
            [
                "CanvasRenderingContext2D.textBaseline",
                "Baseline alignment setting. Possible values: top, hanging, middle, alphabetic (default), ideographic, bottom."
            ],
            [
                "CanvasRenderingContext2D.direction",
                "Directionality. Possible values: ltr, rtl, inherit (default)."
            ],
            [
                "CanvasRenderingContext2D.fillStyle",
                "Color or style to use inside shapes. Default #000 (black)."
            ],
            [
                "CanvasRenderingContext2D.strokeStyle",
                "Color or style to use for the lines around shapes. Default #000 (black)."
            ],
            [
                "CanvasRenderingContext2D.createConicGradient()",
                "Creates a conic gradient around a point given by coordinates represented by the parameters."
            ],
            [
                "CanvasRenderingContext2D.createLinearGradient()",
                "Creates a linear gradient along the line given by the coordinates represented by the parameters."
            ],
            [
                "CanvasRenderingContext2D.createRadialGradient()",
                "Creates a radial gradient given by the coordinates of the two circles represented by the parameters."
            ],
            [
                "CanvasRenderingContext2D.createPattern()",
                "Creates a pattern using the specified image (a CanvasImageSource). It repeats the source in the directions specified by the repetition argument. This method returns a CanvasPattern."
            ],
            [
                "CanvasRenderingContext2D.shadowBlur",
                "Specifies the blurring effect. Default: 0"
            ],
            [
                "CanvasRenderingContext2D.shadowColor",
                "Color of the shadow. Default: fully-transparent black."
            ],
            [
                "CanvasRenderingContext2D.shadowOffsetX",
                "Horizontal distance the shadow will be offset. Default: 0."
            ],
            [
                "CanvasRenderingContext2D.shadowOffsetY",
                "Vertical distance the shadow will be offset. Default: 0."
            ],
            [
                "CanvasRenderingContext2D.beginPath()",
                "Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path."
            ],
            [
                "CanvasRenderingContext2D.closePath()",
                "Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing."
            ],
            [
                "CanvasRenderingContext2D.moveTo()",
                "Moves the starting point of a new sub-path to the (x, y) coordinates."
            ],
            [
                "CanvasRenderingContext2D.lineTo()",
                "Connects the last point in the current sub-path to the specified (x, y) coordinates with a straight line."
            ],
            [
                "CanvasRenderingContext2D.bezierCurveTo()",
                "Adds a cubic Bézier curve to the current path."
            ],
            [
                "CanvasRenderingContext2D.quadraticCurveTo()",
                "Adds a quadratic Bézier curve to the current path."
            ],
            [
                "CanvasRenderingContext2D.arc()",
                "Adds a circular arc to the current path."
            ],
            [
                "CanvasRenderingContext2D.arcTo()",
                "Adds an arc to the current path with the given control points and radius, connected to the previous point by a straight line."
            ],
            [
                "CanvasRenderingContext2D.ellipse()",
                "Adds an elliptical arc to the current path."
            ],
            [
                "CanvasRenderingContext2D.rect()",
                "Creates a path for a rectangle at position (x, y) with a size that is determined by width and height."
            ],
            [
                "CanvasRenderingContext2D.fill()",
                "Fills the current sub-paths with the current fill style."
            ],
            [
                "CanvasRenderingContext2D.stroke()",
                "Strokes the current sub-paths with the current stroke style."
            ],
            [
                "CanvasRenderingContext2D.drawFocusIfNeeded()",
                "If a given element is focused, this method draws a focus ring around the current path."
            ],
            [
                "CanvasRenderingContext2D.scrollPathIntoView()",
                "Scrolls the current path or a given path into the view."
            ],
            [
                "CanvasRenderingContext2D.clip()",
                "Creates a clipping path from the current sub-paths. Everything drawn after clip() is called appears inside the clipping path only. For an example, see Clipping paths in the Canvas tutorial."
            ],
            [
                "CanvasRenderingContext2D.isPointInPath()",
                "Reports whether or not the specified point is contained in the current path."
            ],
            [
                "CanvasRenderingContext2D.isPointInStroke()",
                "Reports whether or not the specified point is inside the area contained by the stroking of a path."
            ],
            [
                "CanvasRenderingContext2D.currentTransform",
                "Current transformation matrix (DOMMatrix object)."
            ],
            [
                "CanvasRenderingContext2D.getTransform()",
                "Retrieves the current transformation matrix being applied to the context."
            ],
            [
                "CanvasRenderingContext2D.rotate()",
                "Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians."
            ],
            [
                "CanvasRenderingContext2D.scale()",
                "Adds a scaling transformation to the canvas units by x horizontally and by y vertically."
            ],
            [
                "CanvasRenderingContext2D.translate()",
                "Adds a translation transformation by moving the canvas and its origin x horzontally and y vertically on the grid."
            ],
            [
                "CanvasRenderingContext2D.transform()",
                "Multiplies the current transformation matrix with the matrix described by its arguments."
            ],
            [
                "CanvasRenderingContext2D.setTransform()",
                "Resets the current transform to the identity matrix, and then invokes the transform() method with the same arguments."
            ],
            [
                "CanvasRenderingContext2D.resetTransform()",
                "Resets the current transform by the identity matrix."
            ],
            [
                "CanvasRenderingContext2D.globalAlpha",
                "Alpha value that is applied to shapes and images before they are composited onto the canvas. Default 1.0 (opaque)."
            ],
            [
                "CanvasRenderingContext2D.globalCompositeOperation",
                "With globalAlpha applied this sets how shapes and images are drawn onto the existing bitmap."
            ],
            [
                "CanvasRenderingContext2D.drawImage()",
                "Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use."
            ],
            [
                "CanvasRenderingContext2D.createImageData()",
                "Creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black."
            ],
            [
                "CanvasRenderingContext2D.getImageData()",
                "Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height."
            ],
            [
                "CanvasRenderingContext2D.putImageData()",
                "Paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted."
            ],
            [
                "CanvasRenderingContext2D.imageSmoothingEnabled",
                "Image smoothing mode; if disabled, images will not be smoothed if scaled."
            ],
            [
                "CanvasRenderingContext2D.imageSmoothingQuality",
                "Allows you to set the quality of image smoothing."
            ],
            [
                "CanvasRenderingContext2D.save()",
                "Saves the current drawing style state using a stack so you can revert any change you make to it using restore()."
            ],
            [
                "CanvasRenderingContext2D.restore()",
                "Restores the drawing style state to the last element on the 'state stack' saved by save()."
            ],
            [
                "CanvasRenderingContext2D.canvas",
                "A read-only back-reference to the HTMLCanvasElement. Might be null if it is not associated with a <canvas> element."
            ],
            [
                "CanvasRenderingContext2D.getContextAttributes()",
                "Returns an object containing the actual context attributes. Context attributes can be requested with HTMLCanvasElement.getContext()."
            ],
            [
                "CanvasRenderingContext2D.addHitRegion()",
                "Adds a hit region to the canvas."
            ],
            [
                "CanvasRenderingContext2D.removeHitRegion()",
                "Removes the hit region with the specified id from the canvas."
            ],
            [
                "CanvasRenderingContext2D.clearHitRegions()",
                "Removes all hit regions from the canvas."
            ],
            [
                "CanvasRenderingContext2D.filter",
                "Applies a CSS or SVG filter to the canvas, e.g., to change its brightness or bluriness."
            ],
            [
                "CanvasRenderingContext2D.clearShadow()",
                "Removes all shadow settings like CanvasRenderingContext2D.shadowColor and CanvasRenderingContext2D.shadowBlur."
            ],
            [
                "CanvasRenderingContext2D.drawImageFromRect()",
                "This is redundant with an equivalent overload of drawImage."
            ],
            [
                "CanvasRenderingContext2D.setAlpha()",
                "Use CanvasRenderingContext2D.globalAlpha instead."
            ],
            [
                "CanvasRenderingContext2D.setCompositeOperation()",
                "Use CanvasRenderingContext2D.globalCompositeOperation instead."
            ],
            [
                "CanvasRenderingContext2D.setLineWidth()",
                "Use CanvasRenderingContext2D.lineWidth instead."
            ],
            [
                "CanvasRenderingContext2D.setLineJoin()",
                "Use CanvasRenderingContext2D.lineJoin instead."
            ],
            [
                "CanvasRenderingContext2D.setLineCap()",
                "Use CanvasRenderingContext2D.lineCap instead."
            ],
            [
                "CanvasRenderingContext2D.setMiterLimit()",
                "Use CanvasRenderingContext2D.miterLimit instead."
            ],
            [
                "CanvasRenderingContext2D.setStrokeColor()",
                "Use CanvasRenderingContext2D.strokeStyle instead."
            ],
            [
                "CanvasRenderingContext2D.setFillColor()",
                "Use CanvasRenderingContext2D.fillStyle instead."
            ],
            [
                "CanvasRenderingContext2D.setShadow()",
                "Use CanvasRenderingContext2D.shadowColor and CanvasRenderingContext2D.shadowBlur instead."
            ],
            [
                "CanvasRenderingContext2D.webkitLineDash",
                "Use CanvasRenderingContext2D.getLineDash() and CanvasRenderingContext2D.setLineDash() instead."
            ],
            [
                "CanvasRenderingContext2D.webkitLineDashOffset",
                "Use CanvasRenderingContext2D.lineDashOffset instead."
            ],
            [
                "CanvasRenderingContext2D.webkitImageSmoothingEnabled",
                "Use CanvasRenderingContext2D.imageSmoothingEnabled instead."
            ],
            [
                "CanvasRenderingContext2D.isContextLost()",
                "Inspired by the same WebGLRenderingContext method it returns true if the Canvas context has been lost, or false if not."
            ],
            [
                "CanvasRenderingContext2D.webkitBackingStorePixelRatio",
                "The backing store size in relation to the canvas element. See High DPI Canvas."
            ],
            [
                "CanvasRenderingContext2D.webkitGetImageDataHD",
                "Intended for HD backing stores, but removed from canvas specifications."
            ],
            [
                "CanvasRenderingContext2D.webkitPutImageDataHD",
                "Intended for HD backing stores, but removed from canvas specifications."
            ],
            [
                "CanvasRenderingContext2D.mozCurrentTransform",
                "Sets or gets the current transformation matrix, see CanvasRenderingContext2D.currentTransform."
            ],
            [
                "CanvasRenderingContext2D.mozCurrentTransformInverse",
                "Sets or gets the current inversed transformation matrix."
            ],
            [
                "CanvasRenderingContext2D.mozImageSmoothingEnabled",
                "See CanvasRenderingContext2D.imageSmoothingEnabled."
            ],
            [
                "CanvasRenderingContext2D.mozTextStyle",
                "Introduced in Gecko 1.9, deprecated in favor of the CanvasRenderingContext2D.font property."
            ],
            [
                "CanvasRenderingContext2D.mozDrawText()",
                "This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0. Use CanvasRenderingContext2D.strokeText() or CanvasRenderingContext2D.fillText() instead."
            ],
            [
                "CanvasRenderingContext2D.mozMeasureText()",
                "This method was introduced in Gecko 1.9 and is unimplemented starting with Gecko 7.0. Use CanvasRenderingContext2D.measureText() instead."
            ],
            [
                "CanvasRenderingContext2D.mozPathText()",
                "This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0."
            ],
            [
                "CanvasRenderingContext2D.mozTextAlongPath()",
                "This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0."
            ],
            [
                "CanvasRenderingContext2D.drawWindow()",
                "Renders a region of a window into the canvas. The contents of the window's viewport are rendered, ignoring viewport clipping and scrolling."
            ],
            [
                "CanvasRenderingContext2D.demote()",
                "This causes a context that is currently using a hardware-accelerated backend to fallback to a software one. All state should be preserved."
            ],
            [
                "CanvasRenderingContext2D.msFillRule",
                "The fill rule to use. This must be one of evenodd or nonzero (default)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CaretPosition",
        "",
        "CaretPosition",
        "",
        [
            [
                "CaretPosition.offsetNode Read only",
                "Returns a Node containing the found node at the caret's position."
            ],
            [
                "CaretPosition.offset Read only",
                "Returns a long representing the character offset in the caret position node."
            ],
            [
                "CaretPosition.getClientRect",
                ""
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CDATASection",
        "",
        "CDATASection",
        "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/ChannelMergerNode",
        "",
        "ChannelMergerNode",
        "",
        [
            [
                "ChannelMergerNode()",
                "Creates a new ChannelMergerNode object instance."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ChannelSplitterNode",
        "",
        "ChannelSplitterNode",
        "",
        [
            [
                "ChannelSplitterNode()",
                "Creates a new ChannelSplitterNode object instance."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CharacterData",
        "",
        "CharacterData",
        "",
        [
            [
                "CharacterData.data",
                "Is a DOMString representing the textual data contained in this object."
            ],
            [
                "CharacterData.length Read only",
                "Returns an unsigned long representing the size of the string contained in CharacterData.data."
            ],
            [
                "Element.nextElementSibling Read only",
                "Returns the Element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list."
            ],
            [
                "Element.previousElementSibling Read only",
                "Returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list."
            ],
            [
                "CharacterData.after()",
                "Inserts a set of Node or DOMString objects in the children list of the CharacterData's parent, just after the CharacterData object."
            ],
            [
                "CharacterData.appendData()",
                "Appends the given DOMString to the CharacterData.data string; when this method returns, data contains the concatenated DOMString."
            ],
            [
                "CharacterData.before()",
                "Inserts a set of Node or DOMString objects in the children list of the CharacterData's parent, just before the CharacterData object."
            ],
            [
                "CharacterData.deleteData()",
                "Removes the specified amount of characters, starting at the specified offset, from the CharacterData.data string; when this method returns, data contains the shortened DOMString."
            ],
            [
                "CharacterData.insertData()",
                "Inserts the specified characters, at the specified offset, in the CharacterData.data string; when this method returns, data contains the modified DOMString."
            ],
            [
                "CharacterData.remove()",
                "Removes the object from its parent children list."
            ],
            [
                "CharacterData.replaceData()",
                "Replaces the specified amount of characters, starting at the specified offset, with the specified DOMString; when this method returns, data contains the modified DOMString."
            ],
            [
                "CharacterData.replaceWith()",
                "Replaces the characters in the children list of its parent with a set of Node or DOMString objects."
            ],
            [
                "CharacterData.substringData()",
                "Returns a DOMString containing the part of CharacterData.data of the specified length and starting at the specified offset."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Client",
        "",
        "Client",
        "",
        [
            [
                "Client.postMessage()",
                "Sends a message to the client."
            ],
            [
                "Client.id Read only",
                "The universally unique identifier of the client as a string."
            ],
            [
                "Client.type Read only",
                "The client's type as a string. It can be \"window\", \"worker\", or \"sharedworker\"."
            ],
            [
                "Client.url Read only",
                "The URL of the client as a string."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Clients",
        "",
        "Clients",
        "",
        [
            [
                "Clients.get()",
                "Returns a Promise for a Client matching a given id."
            ],
            [
                "Clients.matchAll()",
                "Returns a Promise for an array of Client objects. An options argument allows you to control the types of clients returned."
            ],
            [
                "Clients.openWindow()",
                "Opens a new browser window for a given url and returns a Promise for the new WindowClient."
            ],
            [
                "Clients.claim()",
                "Allows an active service worker to set itself as the controller for all clients within its scope."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Clipboard",
        "",
        "Clipboard",
        "",
        [
            [
                "read()",
                "Requests arbitrary data (such as images) from the clipboard, returning a Promise. When the data has been retrieved, the promise is resolved with a DataTransfer object that provides the data."
            ],
            [
                "readText()",
                "Requests text from the system clipboard; returns a Promise which is resolved with a DOMString containing the clipboard's text once it's available."
            ],
            [
                "write()",
                "Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned Promise."
            ],
            [
                "writeText()",
                "Writes text to the system clipboard, returning a Promise which is resolved once the text is fully copied into the clipboard."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ClipboardEvent",
        "",
        "ClipboardEvent",
        "",
        [
            [
                "ClipboardEvent()",
                "Creates a ClipboardEvent event with the given parameters."
            ],
            [
                "ClipboardEvent.clipboardData Read only",
                "Is a DataTransfer object containing the data affected by the user-initiated cut, copy, or paste operation, along with its MIME type."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ClipboardItem",
        "",
        "ClipboardItem",
        "The ClipboardItem interface of the Clipboard API represents a single item format, used when reading or writing data via the Clipboard API. That is clipboard.read() and clipboard.write() respectively.",
        [
            [
                "ClipboardItem.ClipboardItem()",
                "Creates a new ClipboardItem object, with the MIME type as the key and Blob as the value"
            ],
            [
                "types Read only",
                "Returns an Array of MIME types available within the ClipboardItem."
            ],
            [
                "presentationStyle Read only",
                "Returns one of the following: \"unspecified\", \"inline\" or \"attachment\"."
            ],
            [
                "getType()",
                "Returns a Promise that resolves with a Blob of the requested MIME type, or an error if the MIME type is not found."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CloseEvent",
        "",
        "CloseEvent",
        "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.",
        [
            [
                "CloseEvent()",
                "Creates a new CloseEvent."
            ],
            [
                "CloseEvent.code Read only",
                "Returns an unsigned short containing the close code sent by the server. The following values are permitted status codes. The following definitions are sourced from the IANA website [Ref]. Note that the 1xxx codes are only WebSocket-internal and not for the same meaning by the transported data (like when the application-layer protocol is invalid). The only permitted codes to be specified in Firefox are 1000 and 3000 to 4999 [Source, Bug]. Status code Name Description 0–999 Reserved and not used. 1000 Normal Closure Normal closure; the connection successfully completed whatever purpose for which it was created. 1001 Going Away The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection. 1002 Protocol Error The endpoint is terminating the connection due to a protocol error. 1003 Unsupported Data The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data). 1004 Reserved. A meaning might be defined in the future. 1005 No Status Received Reserved. Indicates that no status code was provided even though one was expected. 1006 Abnormal Closure Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected. 1007 Invalid frame payload data The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message). 1008 Policy Violation The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable. 1009 Message too big The endpoint is terminating the connection because a data frame was received that is too large. 1010 Missing Extension The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't. 1011 Internal Error The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request. 1012 Service Restart The server is terminating the connection because it is restarting. [Ref] 1013 Try Again Later The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients. [Ref] 1014 Bad Gateway The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code. 1015 TLS Handshake Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified). 1016–1999 Reserved for future use by the WebSocket standard. 2000–2999 Reserved for use by WebSocket extensions. 3000–3999 Available for use by libraries and frameworks. May not be used by applications. Available for registration at the IANA via first-come, first-serve. 4000–4999 Available for use by applications."
            ],
            [
                "CloseEvent.reason Read only",
                "Returns a DOMString indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol."
            ],
            [
                "CloseEvent.wasClean Read only",
                "Returns a Boolean that Indicates whether or not the connection was cleanly closed."
            ],
            [
                "CloseEvent.initCloseEvent()",
                "Initializes the value of a CloseEvent created. If the event has already being dispatched, this method does nothing. Do not use this method anymore, use the CloseEvent() constructor instead."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Comment",
        "",
        "Comment",
        "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '<!--' and '-->'. In XML, the character sequence '--' cannot be used within a comment.",
        [
            [
                "Comment()",
                "Returns a Comment object with the parameter as its textual content."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CompositionEvent",
        "",
        "CompositionEvent",
        "The DOM CompositionEvent represents events that occur due to the user indirectly entering text.",
        [
            [
                "CompositionEvent()",
                "Creates a new CompositionEvent object instance."
            ],
            [
                "CompositionEvent.data Read only",
                "Returns the characters generated by the input method that raised the event; its varies depending on the type of event that generated the CompositionEvent object."
            ],
            [
                "CompositionEvent.locale Read only",
                "Returns the locale of current input method (for example, the keyboard layout locale if the composition is associated with IME)."
            ],
            [
                "CompositionEvent.initCompositionEvent()",
                "Initializes the attributes of a CompositionEvent object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CompressionStream",
        "",
        "CompressionStream",
        "The CompressionStream interface of the Compression Streams API is an API for compressing a stream of data.",
        [
            [
                "CompressionStream.CompressionStream()",
                "Creates a new CompressionStream"
            ],
            [
                "CompressionStream.readable",
                "Returns the ReadableStream instance controlled by this object."
            ],
            [
                "CompressionStream.writable",
                "Returns the WritableStream instance controlled by this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/console",
        "",
        "console",
        "",
        [
            [
                "console.assert()",
                "Log a message and stack trace to console if the first argument is false."
            ],
            [
                "console.clear()",
                "Clear the console."
            ],
            [
                "console.count()",
                "Log the number of times this line has been called with the given label."
            ],
            [
                "console.countReset()",
                "Resets the value of the counter with the given label."
            ],
            [
                "console.debug()",
                "Outputs a message to the console with the log level debug."
            ],
            [
                "console.dir()",
                "Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects."
            ],
            [
                "console.dirxml()",
                "Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible."
            ],
            [
                "console.error()",
                "Outputs an error message. You may use string substitution and additional arguments with this method."
            ],
            [
                "console.exception()",
                "An alias for error()."
            ],
            [
                "console.group()",
                "Creates a new inline group, indenting all following output by another level. To move back out a level, call groupEnd()."
            ],
            [
                "console.groupCollapsed()",
                "Creates a new inline group, indenting all following output by another level. However, unlike group() this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call groupEnd()."
            ],
            [
                "console.groupEnd()",
                "Exits the current inline group."
            ],
            [
                "console.info()",
                "Informative logging of information. You may use string substitution and additional arguments with this method."
            ],
            [
                "console.log()",
                "For general output of logging information. You may use string substitution and additional arguments with this method."
            ],
            [
                "console.profile()",
                "Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile."
            ],
            [
                "console.profileEnd()",
                "Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool)."
            ],
            [
                "console.table()",
                "Displays tabular data as a table."
            ],
            [
                "console.time()",
                "Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page."
            ],
            [
                "console.timeEnd()",
                "Stops the specified timer and logs the elapsed time in milliseconds since it started."
            ],
            [
                "console.timeLog()",
                "Logs the value of the specified timer to the console."
            ],
            [
                "console.timeStamp()",
                "Adds a marker to the browser's Timeline or Waterfall tool."
            ],
            [
                "console.trace()",
                "Outputs a stack trace."
            ],
            [
                "console.warn()",
                "Outputs a warning message. You may use string substitution and additional arguments with this method."
            ],
            [
                "%o or %O",
                "Outputs a JavaScript object. Clicking the object name opens more information about it in the inspector."
            ],
            [
                "%d or %i",
                "Outputs an integer. Number formatting is supported, for example console.log(\"Foo %.2d\", 1.1) will output the number as two significant figures with a leading 0: Foo 01"
            ],
            [
                "%s",
                "Outputs a string."
            ],
            [
                "%f",
                "Outputs a floating-point value. Formatting is supported, for example console.log(\"Foo %.2f\", 1.1) will output the number to 2 decimal places: Foo 1.10"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ConstantSourceNode",
        "",
        "ConstantSourceNode",
        "The ConstantSourceNode interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible AudioParam by automating the value of its offset or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.",
        [
            [
                "ConstantSourceNode()",
                "Creates and returns a new ConstantSourceNode instance, optionally specifying an object which establishes initial values for the object's properties. You can also create a ConstantSourceNode whose properties are initialized to their default values by calling AudioContext.createConstantSource()."
            ],
            [
                "offset",
                "An AudioParam which specifies the value that this source continuously outputs. The default value is 1.0."
            ],
            [
                "onended",
                "Fired whenever the ConstantSourceNode data has stopped playing."
            ],
            [
                "start()",
                "Schedules a sound to playback at an exact time."
            ],
            [
                "stop()",
                "Schedules a sound to stop playback at an exact time."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ConstrainBoolean",
        "",
        "ConstrainBoolean",
        "The ConstrainBoolean dictionary is used to specify a constraint for a property whose value is a Boolean value. You can specify an exact value which must be matched, an ideal value that should be matched if at all possible, and a fallback value to attempt to match once all more specific constraints have been applied.",
        [
            [
                "exact",
                "A Boolean which indicates a value the property must have."
            ],
            [
                "ideal",
                "A Boolean value indicating the ideal, but not required, value the property should ideally have. If possible, this value will be used, but the user agent will use the other value if it needs to in order to come up with a workable configuration."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ConstrainDOMString",
        "",
        "ConstrainDOMString",
        "The ConstrainDOMString dictionary is used to specify a constraint for a property whose value is a string. It allows you to specify one or more exact string values from which one must be the parameter's value, or a set of ideal values which should be used if possible. You can also specify a single string (or an array of strings) which the user agent will do its best to match once all more stringent constraints have been applied.",
        [
            [
                "exact",
                "Either a single DOMString which must be the value of the property, or an array of DOMString objects one of which must be the property's value. If the property can't be set to one of the listed values, matching will fail."
            ],
            [
                "ideal",
                "Either a single DOMString or an array of DOMStrings specifying ideal values for the property. If possible, one of the listed values will be used, but if it's not possible, the user agent will use the closest possible match."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ConstrainDouble",
        "",
        "ConstrainDouble",
        "The ConstrainDouble type is used to specify a constraint for a property whose value is a double-precision floating-point number. It extends the DoubleRange dictionary (which provides the ability to specify a permitted range of property values) to also support an exact value and/or an ideal value the property should take on. Additionally, you can specify the property's value as a simple floating-point value, in which case the user agent does its best to match the value once all other more stringent constraints are met.",
        [
            [
                "exact",
                "A double-precision floating-point number specifying a specific, required, value the property must have to be considered acceptable."
            ],
            [
                "ideal",
                "A double-precision floating-point number specifying a value the property would ideally have, but which can be considered optional if necessary to find a match."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ConstrainULong",
        "",
        "ConstrainULong",
        "The ConstrainULong type is used to specify a constraint for a property whose value is an integral number. It extends the ULongRange dictionary (which provides the ability to specify a permitted range of property values) to also support an exact value and/or an ideal value the property should take on. In addition, you can specify the value as a simple long integer value, in which case the user agent does its best to match the value once all other more stringent constraints are met.",
        [
            [
                "exact",
                "An integer specifying precise, required, value the property must have to be considered acceptable."
            ],
            [
                "ideal",
                "An integer specifying a value the property would ideally have, but which can be considered optional if necessary to find a match."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ContactsManager",
        "",
        "ContactsManager",
        "This page is not complete.",
        [
            [
                "select()",
                "Returns a Promise which, when resolved, presents the user with a contact picker which allows them to select contact(s) they wish to share."
            ],
            [
                "getProperties()",
                "Returns a Promise which resolves with an Array of strings indicating which contact properties are available."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ContentIndex",
        "",
        "ContentIndex",
        "This page is not complete.",
        [
            [
                "ContentIndex.add()",
                "Registers an item with the content index."
            ],
            [
                "ContentIndex.delete()",
                "Unregisters an item from the currently indexed content."
            ],
            [
                "ContentIndex.getAll()",
                "Returns a Promise that resolves with an iterable list of content index entries."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ContentIndexEvent",
        "",
        "ContentIndexEvent",
        "This page is not complete.",
        [
            [
                "ContentIndexEvent()",
                "Creates and returns a new ContentIndexEvent object whose type and other options are configured as specified."
            ],
            [
                "id Read only",
                "A String which identifies the deleted content index via it's id."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ConvolverNode",
        "",
        "ConvolverNode",
        "",
        [
            [
                "ConvolverNode()",
                "Creates a new ConvolverNode object instance."
            ],
            [
                "ConvolverNode.buffer",
                "A mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect."
            ],
            [
                "ConvolverNode.normalize",
                "A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CookieChangeEvent",
        "",
        "CookieChangeEvent",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "CookieChangeEvent.CookieChangeEvent()",
                "Creates a new CookieChangeEvent."
            ],
            [
                "CookieChangeEvent.changedRead only",
                "Returns an array containing one or more changed cookies."
            ],
            [
                "CookieChangeEvent.deletedRead only",
                "Returns an array containing one or more deleted cookies."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CookieStore",
        "",
        "CookieStore",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "CookieStore.onChange",
                "The onchange EventHandler is called whenever a cookie is changed."
            ],
            [
                "CookieStore.delete()",
                "The delete() method deletes a cookie with the given name or options object, it returns a Promise that resolves when the deletion completes."
            ],
            [
                "CookieStore.get()",
                "The get() method gets a single cookie with the given name or options object, it returns a Promise that resolves with details of a single cookie."
            ],
            [
                "CookieStore.getAll()",
                "The getAll() method gets all matching cookies, it returns a Promise that resolves with a list of cookies."
            ],
            [
                "CookieStore.set()",
                "The set() method sets a cookie with the given name and value or options object, it returns a Promise that resolves when the cookie is set."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CookieStoreManager",
        "",
        "CookieStoreManager",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "CookieStoreManager.getSubscriptions()",
                "Returns a promise which resolves to a list of the cookie change subscriptions for this service worker registration."
            ],
            [
                "CookieStoreManager.subscribe()",
                "Subscribes to changes to cookies. It returns a promise which resolves when the subscription is successful."
            ],
            [
                "CookieStoreManager.unsubscribe()",
                "Unsubscribes the registered service worker from changes to cookies. It returns a promise which resolves when the operation is successful."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CountQueuingStrategy",
        "",
        "CountQueuingStrategy",
        "",
        [
            [
                "CountQueuingStrategy()",
                "Creates a new CountQueuingStrategy object instance."
            ],
            [
                "CountQueuingStrategy.size()",
                "Returns 1."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CrashReportBody",
        "",
        "CrashReportBody",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "reason",
                "A string representing the reason for the crash. Current possible reasons are: oom: The browser ran out of memory. unresponsive: The page was killed due to being unresponsive."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Credential",
        "",
        "Credential",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Credential.id Read only",
                "Returns a DOMString containing the credential's identifier. This might be any one of a GUID, username, or email address."
            ],
            [
                "Credential.type Read only",
                "Returns a DOMString containing the credential's type. Valid values are password, federated and public-key. (For PasswordCredential, FederatedCredential and PublicKeyCredential)"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CredentialsContainer",
        "",
        "CredentialsContainer",
        "",
        [
            [
                "CredentialsContainer.create()Secure context",
                "Returns a Promise that resolves with a new Credential instance based on the provided options, or null if no Credential object can be created. In exceptional circumstances, the Promise may reject."
            ],
            [
                "CredentialsContainer.get()Secure context",
                "Returns a Promise that resolves with the Credential instance that matches the provided parameters."
            ],
            [
                "CredentialsContainer.preventSilentAccess()Secure context",
                "Sets a flag that specifies whether automatic log in is allowed for future visits to the current origin, then returns an empty Promise. For example, you might call this, after a user signs out of a website to ensure that they aren't automatically signed in on the next site visit. Earlier versions of the spec called this method requireUserMediation(). See Browser compatibility for support details."
            ],
            [
                "CredentialsContainer.store()Secure context",
                "Stores a set of credentials for a user, inside a provided Credential instance and returns that instance in a Promise."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Crypto",
        "",
        "Crypto",
        "",
        [
            [
                "Crypto.subtle Read only Secure context",
                "Returns a SubtleCrypto object providing access to common cryptographic primitives, like hashing, signing, encryption, or decryption."
            ],
            [
                "Crypto.getRandomValues()",
                "Fills the passed TypedArray with cryptographically sound random values."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CryptoKey",
        "",
        "CryptoKey",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "CryptoKey.type",
                "String which may take one of the following values: \"secret\": This key is a secret key for use with a symmetric algorithm. \"private\": This key is the private half of an asymmetric algorithm's CryptoKeyPair. \"public\": This key is the public half of an asymmetric algorithm's CryptoKeyPair."
            ],
            [
                "CryptoKey.extractable",
                "Boolean indicating whether or not the key may be extracted using SubtleCrypto.exportKey() or SubtleCrypto.wrapKey(). true: The key may be extracted. false The key may not be extracted. exportKey() or wrapKey() will throw an exception if used to extract this key."
            ],
            [
                "CryptoKey.algorithm",
                "An object describing the algorithm for which this key can be used and any associated extra parameters. AesKeyGenParams if the algorithm is any of the AES variants. RsaHashedKeyGenParams if the algorithm is any of the RSA variants. EcKeyGenParams if the algorithm is any of the EC variants. HmacKeyGenParams if the algorithm is HMAC."
            ],
            [
                "CryptoKey.usages",
                "An Array of strings, indicating what can be done with the key. Possible values for array elements are: \"encrypt\": The key may be used to encrypt messages. \"decrypt\": The key may be used to decrypt messages. \"sign\": The key may be used to sign messages. \"verify\": The key may be used to verify signatures. \"deriveKey\": The key may be used in deriving a new key. \"deriveBits\": The key may be used in deriving bits. \"wrapKey\": The key may be used to wrap a key. \"unwrapKey\": The key may be used to unwrap a key."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CryptoKeyPair",
        "",
        "CryptoKeyPair",
        "The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.",
        [
            [
                "CryptoKeyPair.privateKey",
                "A CryptoKey object representing the private key. For encryption and decryption algorithms, this key is used to decrypt. For signing and verification algorithms it is used to sign."
            ],
            [
                "CryptoKeyPair.publicKey",
                "A CryptoKey object representing the public key. For encryption and decryption algorithms, this key is used to encrypt. For signing and verification algorithms it is used to verify signatures."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSS",
        "",
        "CSS",
        "The CSS interface holds useful CSS-related methods. No objects with this interface are implemented: it contains only static methods and is therefore a utilitarian interface.",
        [
            [
                "CSS.paintWorklet Secure context",
                "Provides access to the Worklet responsible for all the classes related to painting."
            ],
            [
                "CSS.registerProperty()",
                "Registers custom properties, allowing for property type checking, default values, and properties that do or do not inherit their value."
            ],
            [
                "CSS.supports()",
                "Returns a Boolean indicating if the pair property-value, or the condition, given in parameter is supported."
            ],
            [
                "CSS.escape()",
                "Can be used to escape a string mostly for use as part of a CSS selector."
            ],
            [
                "CSS factory functions",
                "Can be used to return a new CSSUnitValue with a value of the parameter number of the units of the name of the factory function method used."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSAnimation",
        "",
        "CSSAnimation",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSAnimation.animationNameRead only",
                "Returns the animation name as a CSSOMString."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSConditionRule",
        "",
        "CSSConditionRule",
        "",
        [
            [
                "CSSConditionRule.conditionText",
                "Represents the text of the condition of the rule."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSCounterStyleRule",
        "",
        "CSSCounterStyleRule",
        "",
        [
            [
                "CSSCounterStyleRule.name",
                "Is a CSSOMString object that contains the serialization of the <custom-ident> defined as the name for the associated rule."
            ],
            [
                "CSSCounterStyleRule.system",
                "Is a CSSOMString object that contains the serialization of the system descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.symbols",
                "Is a CSSOMString object that contains the serialization of the symbols descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.additiveSymbols",
                "Is a CSSOMString object that contains the serialization of the additive-symbols descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.negative",
                "Is a CSSOMString object that contains the serialization of the negative descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.prefix",
                "Is a CSSOMString object that contains the serialization of the prefix descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.suffix",
                "Is a CSSOMString object that contains the serialization of the suffix descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.range",
                "Is a CSSOMString object that contains the serialization of the range descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.pad",
                "Is a CSSOMString object that contains the serialization of the pad descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.speakAs",
                "Is a CSSOMString object that contains the serialization of the speak-as descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ],
            [
                "CSSCounterStyleRule.fallback",
                "Is a CSSOMString object that contains the serialization of the fallback descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSFontFaceRule",
        "",
        "CSSFontFaceRule",
        "",
        [
            [
                "CSSFontFaceRule.styleRead only",
                "Returns a CSSStyleDeclaration."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSGroupingRule",
        "",
        "CSSGroupingRule",
        "",
        [
            [
                "CSSGroupingRule.cssRulesRead only",
                "Returns a CSSRuleList of the CSS rules in the media rule."
            ],
            [
                "CSSGroupingRule.deleteRule",
                "Deletes a rule from the style sheet."
            ],
            [
                "CSSGroupingRule.insertRule",
                "Inserts a new style rule into the current style sheet."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSImageValue",
        "",
        "CSSImageValue",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSImportRule",
        "",
        "CSSImportRule",
        "",
        [
            [
                "CSSImportRule.hrefRead only",
                "Returns the url specified by the @import rule."
            ],
            [
                "CSSImportRule.mediaRead only",
                "Returns the value of the media attribute of the associated stylesheet."
            ],
            [
                "CSSImportRule.stylesheetRead only",
                "Returns the associated stylesheet."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSKeyframeRule",
        "",
        "CSSKeyframeRule",
        "The CSSKeyframeRule interface describes an object representing a set of styles for a given keyframe. It corresponds to the contents of a single keyframe of a @keyframes at-rule.",
        [
            [
                "CSSKeyframeRule.keyText",
                "Represents the key of the keyframe, like '10%', '75%'. The from keyword maps to '0%' and the to keyword maps to '100%'."
            ],
            [
                "CSSKeyframeRule.styleRead only",
                "Returns a CSSStyleDeclaration of the CSS style associated with the keyframe."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSKeyframesRule",
        "",
        "CSSKeyframesRule",
        "The CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contents of a whole @keyframes at-rule.",
        [
            [
                "CSSKeyframesRule.name",
                "Represents the name of the keyframes, used by the animation-name property."
            ],
            [
                "CSSKeyframesRule.cssRules Read only",
                "Returns a CSSRuleList of the keyframes in the list."
            ],
            [
                "CSSKeyframesRule.appendRule()",
                "Inserts a new keyframe rule into the current CSSKeyframesRule. The parameter is a DOMString containing a keyframe in the same format as an entry of a @keyframes at-rule. If it contains more than one keyframe rule, a DOMException with a SYNTAX_ERR is thrown."
            ],
            [
                "CSSKeyframesRule.deleteRule()",
                "Deletes a keyframe rule from the current CSSKeyframesRule. The parameter is the index of the keyframe to be deleted, expressed as a DOMString resolving as a number between 0% and 100%."
            ],
            [
                "CSSKeyframesRule.findRule()",
                "Returns a keyframe rule corresponding to the given key. The key is a DOMString containing an index of the keyframe to be returned, resolving to a percentage between 0% and 100%. If no such keyframe exists, findRule returns null."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSKeywordValue",
        "",
        "CSSKeywordValue",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSKeywordValue.CSSKeywordValue()",
                "Creates a new CSSKeywordValue object."
            ],
            [
                "CSSKeywordValue.value",
                "Returns or sets the value of the CSSKeywordValue."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathInvert",
        "",
        "CSSMathInvert",
        "This page is not complete.",
        [
            [
                "CSSMathInvert.CSSMathInvert()",
                "Creates a new CSSMathInvert object."
            ],
            [
                "CSSMathInvert.valueRead only",
                "Returns a CSSNumericValue object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathMax",
        "",
        "CSSMathMax",
        "This page is not complete.",
        [
            [
                "CSSMathMax.CSSMathMax()",
                "Creates a new CSSMathMax object."
            ],
            [
                "CSSMathMax.valuesRead only",
                "Returns a CSSNumericArray object which contains one or more CSSNumericValue objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathMin",
        "",
        "CSSMathMin",
        "This page is not complete.",
        [
            [
                "CSSMathMin.CSSMathMin()",
                "Creates a new CSSMathMin object."
            ],
            [
                "CSSMathMin.valuesRead only",
                "Returns a CSSNumericArray object which contains one or more CSSNumericValue objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathNegate",
        "",
        "CSSMathNegate",
        "This page is not complete.",
        [
            [
                "CSSMathNegate.CSSMathNegate()",
                "Creates a new CSSMathNegate object."
            ],
            [
                "CSSMathNegate.valueRead only",
                "Returns a CSSNumericValue object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathProduct",
        "",
        "CSSMathProduct",
        "This page is not complete.",
        [
            [
                "CSSMathProduct.CSSMathProduct()",
                "Creates a new CSSMathProduct object."
            ],
            [
                "CSSMathProduct.values",
                "Returns a CSSNumericArray object which contains one or more CSSNumericValue objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathSum",
        "",
        "CSSMathSum",
        "This page is not complete.",
        [
            [
                "CSSMathSum.CSSMathSum()",
                "Creates a new CSSMathSum object."
            ],
            [
                "CSSMathSum.values",
                "Returns a CSSNumericArray object which contains one or more CSSNumericValue objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMathValue",
        "",
        "CSSMathValue",
        "This page is not complete.",
        [
            [
                "CSSMathValue.operator",
                "Indicates the operator that the current subtype represents."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMatrixComponent",
        "",
        "CSSMatrixComponent",
        "This page is not complete.",
        [
            [
                "CSSMatrixComponent.CSSMatrixComponent()",
                "Creates a new CSSMatrixComponent object."
            ],
            [
                "matrix",
                "A matrix."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSMediaRule",
        "",
        "CSSMediaRule",
        "The CSSMediaRule interface represents a single CSS @media rule.",
        [
            [
                "CSSMediaRule.media Read only",
                "Returns a MediaList representing the intended destination medium for style information."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSNamespaceRule",
        "",
        "CSSNamespaceRule",
        "",
        [
            [
                "CSSNamespaceRule.namespaceURI",
                "Returns a DOMString containing the text of the URI of the given namespace."
            ],
            [
                "CSSNamespaceRule.prefix",
                "Returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns an empty string."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSNumericArray",
        "",
        "CSSNumericArray",
        "This page is not complete.",
        [
            [
                "CSSNumericArray.length Read only",
                "Returns how many CSSNumericValue objects are contained within the CSSNumericArray."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSNumericValue",
        "",
        "CSSNumericValue",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSNumericValue.add",
                "Adds a supplied number to the CSSNumericValue."
            ],
            [
                "CSSNumericValue.sub",
                "Subtracts a supplied number from the CSSNumericValue."
            ],
            [
                "CSSNumericValue.mul",
                "Multiplies the CSSNumericValue by the supplied value."
            ],
            [
                "CSSNumericValue.div",
                "Divides the CSSNumericValue by the supplied value."
            ],
            [
                "CSSNumericValue.min",
                "Returns the minimum value passed"
            ],
            [
                "CSSNumericValue.max",
                "Returns the maximum value passed"
            ],
            [
                "CSSNumericValue.equals",
                "True if all the values are the exact same type and value, in the same order. Otherwise, false."
            ],
            [
                "CSSNumericValue.to",
                "Converts value into another one with the specified unit."
            ],
            [
                "CSSNumericValue.toSum",
                "Converts an existing CSSNumericValue into a CSSMathSum object with values of a specified unit."
            ],
            [
                "CSSNumericValue.type",
                "Returns the type of CSSNumericValue, one of angle, flex, frequency, length, resolution, percent, percentHint, or time."
            ],
            [
                "CSSNumericValue.parse",
                "Allows a CSSNumericValue to be constructed directly from a string containing CSS."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSOMString",
        "",
        "CSSOMString",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSPageRule",
        "",
        "CSSPageRule",
        "CSSPageRule represents a single CSS @page rule.",
        [
            [
                "CSSPageRule.selectorText",
                "Represents the text of the page selector associated with the at-rule."
            ],
            [
                "CSSPageRule.style Read only",
                "Returns the declaration block associated with the at-rule."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSPerspective",
        "",
        "CSSPerspective",
        "This page is not complete.",
        [
            [
                "CSSPerspective.CSSPerspective()",
                "Creates a new CSSPerspective object."
            ],
            [
                "length",
                "Returns or sets the distance from z=0."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSPositionValue",
        "",
        "CSSPositionValue",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "CSSPositionValue.CSSPositionValue()",
                "Creates a new CSSPositionValue object."
            ],
            [
                "CSSPositionValue.x",
                "Returns the item's position along the web page's horizontal axis."
            ],
            [
                "CSSPositionValue.y",
                "Returns the item's position along the vertical axis."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSPrimitiveValue",
        "",
        "CSSPrimitiveValue",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "CSSPrimitiveValue.primitiveType Read only",
                "An unsigned short representing the type of the value. Possible values are: Constant Description CSS_ATTR The value is an attr() function. The value can be obtained by using the getStringValue() method. CSS_CM The value is a <length> in centimeters. The value can be obtained by using the getFloatValue() method. CSS_COUNTER The value is a counter or counters function. The value can be obtained by using the getCounterValue() method. CSS_DEG The value is an <angle> in degrees. The value can be obtained by using the getFloatValue() method. CSS_DIMENSION The value is a <number> with an unknown dimension. The value can be obtained by using the getFloatValue() method. CSS_EMS The value is a <length> in em units. The value can be obtained by using the getFloatValue() method. CSS_EXS The value is a <length> in ex units. The value can be obtained by using the getFloatValue() method. CSS_GRAD The value is an <angle> in grads. The value can be obtained by using the getFloatValue() method. CSS_HZ The value is a <frequency> in Hertz. The value can be obtained by using the getFloatValue method. CSS_IDENT The value is an identifier. The value can be obtained by using the getStringValue() method. CSS_IN The value is a <length> in inches. The value can be obtained by using the getFloatValue() method. CSS_KHZ The value is a <frequency> in Kilohertz. The value can be obtained by using the getFloatValue() method. CSS_MM The value is a <length> in millimeters. The value can be obtained by using the getFloatValue() method. CSS_MS The value is a <time> in milliseconds. The value can be obtained by using the getFloatValue() method. CSS_NUMBER The value is a simple <number>. The value can be obtained by using the getFloatValue() method. CSS_PC The value is a <length> in picas. The value can be obtained by using the getFloatValue() method. CSS_PERCENTAGE The value is a <percentage>. The value can be obtained by using the getFloatValue() method. CSS_PT The value is a <length> in points. The value can be obtained by using the getFloatValue() method. CSS_PX The value is a <length> in pixels. The value can be obtained by using the getFloatValue() method. CSS_RAD The value is an <angle> in radians. The value can be obtained by using the getFloatValue() method. CSS_RECT The value is a rect() function. The value can be obtained by using the getRectValue() method. CSS_RGBCOLOR The value is an <color>. The value can be obtained by using the getRGBColorValue() method. CSS_S The value is a <time> in seconds. The value can be obtained by using the getFloatValue() method. CSS_STRING The value is a <string>. The value can be obtained by using the getStringValue() method. CSS_UNKNOWN The value is not a recognized CSS2 value. The value can only be obtained by using the cssText attribute. CSS_URI The value is a url(). The value can be obtained by using the getStringValue() method."
            ],
            [
                "CSSPrimitiveValue.getCounterValue()",
                "This method is used to get the counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface."
            ],
            [
                "CSSPrimitiveValue.getFloatValue()",
                "This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised."
            ],
            [
                "CSSPrimitiveValue.getRGBColorValue()",
                "This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface."
            ],
            [
                "CSSPrimitiveValue.getRectValue()",
                "This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface."
            ],
            [
                "CSSPrimitiveValue.getStringValue()",
                "This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised."
            ],
            [
                "CSSPrimitiveValue.setFloatValue()",
                "A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised."
            ],
            [
                "CSSPrimitiveValue.setStringValue()",
                "A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSPropertyRule",
        "",
        "CSSPropertyRule",
        "The CSSPropertyRule interface of the CSS_Properties_and_Values_API represents a single CSS @property rule.",
        [
            [
                "CSSPropertyRule.inherits Read only",
                "Returns the inherit flag of the custom property."
            ],
            [
                "CSSPropertyRule.initialvalue Read only",
                "Returns the initial value of the custom property."
            ],
            [
                "CSSPropertyRule.name Read only",
                "Returns the name of the custom property."
            ],
            [
                "CSSPropertyRule.syntax Read only",
                "Returns the literal syntax of the custom property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSPseudoElement",
        "",
        "CSSPseudoElement",
        "",
        [
            [
                "CSSPseudoElement.element Read only",
                "Returns the originating/parent Element of the pseudo-element."
            ],
            [
                "CSSPseudoElement.type Read only",
                "Returns the pseudo-element selector as a CSSOMString."
            ],
            [
                "EventTarget.addEventListener()",
                "Registers an event handler of a specific event type on the pseudo-element."
            ],
            [
                "EventTarget.dispatchEvent()",
                "Dispatches an event to this pseudo-element."
            ],
            [
                "EventTarget.removeEventListener()",
                "Removes an event listener from the pseudo-element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSRotate",
        "",
        "CSSRotate",
        "This page is not complete.",
        [
            [
                "CSSRotate.CSSRotate()",
                "Creates a new CSSRotate object."
            ],
            [
                "x",
                "Returns or sets the x-axis value."
            ],
            [
                "y",
                "Returns or sets the y-axis value."
            ],
            [
                "z",
                "Returns or sets the z-axis value."
            ],
            [
                "angle",
                "Returns or sets the angle value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSRule",
        "",
        "CSSRule",
        "The CSSRule interface represents a single CSS rule. There are several types of rules which inherit properties from CSSRule.",
        [
            [
                "CSSRule.cssText",
                "Represents the textual representation of the rule, e.g. \"h1,h2 { font-size: 16pt }\" or \"@import 'url'\". To access or modify parts of the rule (e.g. the value of \"font-size\" in the example) use the properties on the specialized interface for the rule's type."
            ],
            [
                "CSSRule.parentRule Read only",
                "Returns the containing rule, otherwise null. E.g. if this rule is a style rule inside an @media block, the parent rule would be that CSSMediaRule."
            ],
            [
                "CSSRule.parentStyleSheet Read only",
                "Returns the CSSStyleSheet object for the style sheet that contains this rule"
            ],
            [
                "CSSRule.type Read only",
                "Returns one of the Type constants to determine which type of rule is represented."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSRuleList",
        "",
        "CSSRuleList",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSScale",
        "",
        "CSSScale",
        "This page is not complete.",
        [
            [
                "CSSScale.CSSScale()",
                "Creates a new CSSScale object."
            ],
            [
                "x",
                "Returns or sets the x-axis value."
            ],
            [
                "y",
                "Returns or sets the y-axis value."
            ],
            [
                "z",
                "Returns or sets the z-axis value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSSkew",
        "",
        "CSSSkew",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSSkew.CSSSkew()",
                "Creates a new CSSSkew object."
            ],
            [
                "ax",
                "Returns or sets the x-axis value."
            ],
            [
                "ay",
                "Returns or sets the y-axis value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSSkewX",
        "",
        "CSSSkewX",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSSkewX.CSSSkewX()",
                "Creates a new CSSSkewX object."
            ],
            [
                "ax",
                "Returns or sets the x-axis value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSSkewY",
        "",
        "CSSSkewY",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSSkewY.CSSSkewY()",
                "Creates a new CSSSkewY object."
            ],
            [
                "ay",
                "Returns or sets the y-axis value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSStyleDeclaration",
        "",
        "CSSStyleDeclaration",
        "The CSSStyleDeclaration interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.",
        [
            [
                "CSSStyleDeclaration.cssText",
                "Textual representation of the declaration block, if and only if it is exposed via HTMLElement.style. Setting this attribute changes the inline style. If you want a text representation of a computed declaration block, you can get it with JSON.stringify()."
            ],
            [
                "CSSStyleDeclaration.lengthRead only",
                "The number of properties. See the item() method below."
            ],
            [
                "CSSStyleDeclaration.parentRuleRead only",
                "The containing CSSRule."
            ],
            [
                "CSSStyleDeclaration.cssFloat",
                "Special alias for the float CSS property."
            ],
            [
                "CSSStyleDeclaration named properties",
                "Dashed and camel-cased attributes for all supported CSS properties."
            ],
            [
                "CSSStyleDeclaration.getPropertyPriority()",
                "Returns the optional priority, \"important\"."
            ],
            [
                "CSSStyleDeclaration.getPropertyValue()",
                "Returns the property value given a property name."
            ],
            [
                "CSSStyleDeclaration.item()",
                "Returns a CSS property name by its index, or the empty string if the index is out-of-bounds."
            ],
            [
                "CSSStyleDeclaration.removeProperty()",
                "Removes a property from the CSS declaration block."
            ],
            [
                "CSSStyleDeclaration.setProperty()",
                "Modifies an existing CSS property or creates a new CSS property in the declaration block."
            ],
            [
                "CSSStyleDeclaration.getPropertyCSSValue()",
                "Only supported via getComputedStyle in Firefox. Returns the property value as a CSSPrimitiveValue or null for shorthand properties."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSStyleRule",
        "",
        "CSSStyleRule",
        "The CSSStyleRule interface represents a single CSS style rule.",
        [
            [
                "CSSStyleRule.selectorText",
                "Returns the textual representation of the selector for this rule, e.g. \"h1,h2\"."
            ],
            [
                "CSSStyleRule.style Read only",
                "Returns the CSSStyleDeclaration object for the rule."
            ],
            [
                "CSSStyleRule.styleMap Read only",
                "Returns a StylePropertyMap object which provides access to the rule's property-value pairs."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSStyleSheet",
        "",
        "CSSStyleSheet",
        "The CSSStyleSheet interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet. It inherits properties and methods from its parent, StyleSheet.",
        [
            [
                "cssRules Read only",
                "Returns a live CSSRuleList which maintains an up-to-date list of the CSSRule objects that comprise the stylesheet. This is normally used to access individual rules like this: styleSheet.cssRules[i] // where i = 0..cssRules.length-1 To add or remove items in cssRules, use the CSSStyleSheet's insertRule() and deleteRule() methods."
            ],
            [
                "ownerRule Read only",
                "If this stylesheet is imported into the document using an @import rule, the ownerRule property returns the corresponding CSSImportRule; otherwise, this property's value is null."
            ],
            [
                "deleteRule()",
                "Deletes the rule at the specified index into the stylesheet's rule list."
            ],
            [
                "insertRule()",
                "Inserts a new rule at the specified position in the stylesheet, given the textual representation of the rule."
            ],
            [
                "rules Read only",
                "The rules property is functionally identical to the standard cssRules property; it returns a live CSSRuleList which maintains an up-to-date list of all of the rules in the style sheet."
            ],
            [
                "addRule()",
                "Adds a new rule to the stylesheet given the selector to which the style applies and the style block to apply to the matching elements. This differs from insertRule(), which takes the textual representation of the entire rule as a single string."
            ],
            [
                "removeRule()",
                "Functionally identical to deleteRule(); removes the rule at the specified index from the stylesheet's rule list."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSStyleValue",
        "",
        "CSSStyleValue",
        "",
        [
            [
                "CSSStyleValue.parse()",
                "Sets a specific CSS property to the specified values and returns the first value as a CSSStyleValue object."
            ],
            [
                "CSSStyleValue.parseAll()",
                "Sets all occurrences of a specific CSS property to the specified valueand returns an array of CSSStyleValue objects, each containing one of the supplied values."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSSupportsRule",
        "",
        "CSSSupportsRule",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSTransformComponent",
        "",
        "CSSTransformComponent",
        "The CSSTransformComponent interface of the of the CSS_Object_Model#css_typed_object_model is part of the CSSTransformValue interface.",
        [
            [
                "CSSTransformComponent.is2D Read only",
                "Returns a boolean indicting whether the transform is 2D or 3D."
            ],
            [
                "CSSTransformComponent.toMatrix()",
                "Returns a new DOMMatrix object."
            ],
            [
                "CSSTransformComponent.toString()",
                "A DOMString in the form of a CSS transforms function. This will use the value of is2D to return either a 2D or 3D transform. For example if the component represents CSSRotate and is2D is false then the string returned will be in the form of the CSS transformation rotate3D() function. If true the string returned will be in the form of the 2-dimensional rotate3D() function."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSTransformValue",
        "",
        "CSSTransformValue",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSTransformValue.CSSTransformValue()",
                "Creates a new CSSTransformValue object."
            ],
            [
                "CSSTransformValue.length Read only",
                "Returns how many transform components are contained within the CSSTransformValue."
            ],
            [
                "CSSTransformValue.is2D Read only",
                "Returns a boolean indicating whether the transform is 2D or 3D."
            ],
            [
                "CSSTransformValue.toMatrix()",
                "Returns a new DOMMatrix object."
            ],
            [
                "CSSUnparsedValue.entries()",
                "Returns an array of a given object's own enumerable property [key, value] pairs in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
            ],
            [
                "CSSUnparsedValue.forEach()",
                "Executes a provided function once for each element of the CSSTransformValue object."
            ],
            [
                "CSSUnparsedValue.keys()",
                "Returns a new Array Iterator object that contains the keys for each index in the CSSTransformValue object."
            ],
            [
                "CSSUnparsedValue.values()",
                "Returns a new Array Iterator object that contains the values for each index in the CSSTransformValue object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSTransition",
        "",
        "CSSTransition",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSTransition.transitionPropertyRead only",
                "Returns the transition CSS property name as a CSSOMString."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSTranslate",
        "",
        "CSSTranslate",
        "This page is not complete.",
        [
            [
                "CSSTranslate.CSSTranslate()",
                "Creates a new CSSTranslate object."
            ],
            [
                "x",
                "Returns or sets the x-axis value."
            ],
            [
                "y",
                "Returns or sets the y-axis value."
            ],
            [
                "z",
                "Returns or sets the z-axis value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSUnitValue",
        "",
        "CSSUnitValue",
        "This page is not complete.",
        [
            [
                "CSSStyleValue.CSSUnitValue()",
                "Creates a new CSSUnitValue object."
            ],
            [
                "CSSUnitValue.value",
                "Returns a double indicating the number of units."
            ],
            [
                "CSSUnitValue.unit",
                "Returns a USVString indicating the type of unit."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSUnparsedValue",
        "",
        "CSSUnparsedValue",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "CSSUnparsedValue.CSSUnparsedValue()",
                "Creates a new CSSUnparsedValue object."
            ],
            [
                "CSSUnparsedValue.length",
                "Returns the number of items in the CSSUnparsedValue object."
            ],
            [
                "CSSUnparsedValue.entries()",
                "Returns an array of a given object's own enumerable property [key, value] pairs in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
            ],
            [
                "CSSUnparsedValue.forEach()",
                "Executes a provided function once for each element of the CSSUnparsedValue object."
            ],
            [
                "CSSUnparsedValue.keys()",
                "Returns a new Array Iterator object that contains the keys for each index in the CSSUnparsedValue object."
            ],
            [
                "CSSUnparsedValue.values()",
                "Returns a new Array Iterator object that contains the values for each index in the CSSUnparsedValue object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSValue",
        "",
        "CSSValue",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "CSSValue.cssText",
                "A DOMString representing the current value."
            ],
            [
                "CSSValue.cssValueTypeRead only",
                "An unsigned short representing a code defining the type of the value. Possible values are: Constant Description CSS_CUSTOM The value is a custom value. CSS_INHERIT The value is inherited and the cssText contains \"inherit\". CSS_PRIMITIVE_VALUE The value is a primitive value and an instance of the CSSPrimitiveValue interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface. CSS_VALUE_LIST The value is a CSSValue list and an instance of the CSSValueList interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSValueList",
        "",
        "CSSValueList",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "CSSValueList.lengthRead only",
                "An unsigned long representing the number of CSSValues in the list."
            ],
            [
                "CSSValueList.item()",
                "This method is used to retrieve a CSSValue by ordinal index. The order in this collection represents the order of the values in the CSS style property. If index is greater than or equal to the number of values in the list, this returns null."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CSSVariableReferenceValue",
        "",
        "CSSVariableReferenceValue",
        "This page is not complete.",
        [
            [
                "CSSVariableReferenceValue.CSSVariableReferenceValue()",
                "Creates a new CSSVariableReferenceValue object."
            ],
            [
                "CSSVariableReferenceValue.variable",
                "Returns the custom name passed to the constructor."
            ],
            [
                "CSSVariableReferenceValue.fallback Read only",
                "Returns the built-in CSS value for the custom name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CustomElementRegistry",
        "",
        "CustomElementRegistry",
        "The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property.",
        [
            [
                "CustomElementRegistry.define()",
                "Defines a new custom element."
            ],
            [
                "CustomElementRegistry.get()",
                "Returns the constructor for the named custom element, or undefined if the custom element is not defined."
            ],
            [
                "CustomElementRegistry.upgrade()",
                "Upgrades a custom element directly, even before it is connected to its shadow root."
            ],
            [
                "CustomElementRegistry.whenDefined()",
                "Returns an empty promise that resolves when a custom element becomes defined with the given name. If such a custom element is already defined, the returned promise is immediately fulfilled."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/CustomEvent",
        "",
        "CustomEvent",
        "The CustomEvent interface represents events initialized by an application for any purpose.",
        [
            [
                "CustomEvent()",
                "Creates a CustomEvent."
            ],
            [
                "CustomEvent.detail Read only",
                "Any data passed when initializing the event."
            ],
            [
                "Event.bubbles Read only",
                "A boolean indicating whether or not the event bubbles up through the DOM."
            ],
            [
                "Event.cancelBubble",
                "A historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event."
            ],
            [
                "Event.cancelable Read only",
                "A boolean indicating whether the event is cancelable."
            ],
            [
                "Event.composed Read only",
                "A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM."
            ],
            [
                "Event.currentTarget Read only",
                "A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting."
            ],
            [
                "Event.deepPath",
                "An Array of DOM Nodes through which the event has bubbled."
            ],
            [
                "Event.defaultPrevented Read only",
                "Indicates whether or not the call to event.preventDefault() canceled the event."
            ],
            [
                "Event.eventPhase Read only",
                "Indicates which phase of the event flow is being processed."
            ],
            [
                "Event.explicitOriginalTarget Read only",
                "The explicit original target of the event (Mozilla-specific.)"
            ],
            [
                "Event.originalTarget Read only",
                "The original target of the event, before any retargetings. (Mozilla-specific.)"
            ],
            [
                "Event.returnValue",
                "A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use Event.preventDefault() and Event.defaultPrevented instead, but you can use returnValue if you choose to do so."
            ],
            [
                "Event.srcElement",
                "A non-standard alias (from old versions of Microsoft Internet Explorer) for Event.target. Some other browsers are starting to support it for web compatibility purposes."
            ],
            [
                "Event.target Read only",
                "A reference to the target to which the event was originally dispatched."
            ],
            [
                "Event.timeStamp Read only",
                "The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead."
            ],
            [
                "Event.type Read only",
                "The name of the event. Case-insensitive."
            ],
            [
                "Event.isTrusted Read only",
                "Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, like Event.initEvent)."
            ],
            [
                "Event.scoped Read only",
                "A Boolean indicating whether the given event will bubble across through the shadow root into the standard DOM. Use composed instead."
            ],
            [
                "CustomEvent.initCustomEvent()",
                "Initializes a CustomEvent object. If the event has already being dispatched, this method does nothing."
            ],
            [
                "Event.composedPath()",
                "Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed."
            ],
            [
                "Event.preventDefault()",
                "Cancels the event (if it is cancelable)."
            ],
            [
                "Event.stopImmediatePropagation()",
                "For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance)."
            ],
            [
                "Event.stopPropagation()",
                "Stops the propagation of events further along in the DOM."
            ],
            [
                "Event.initEvent()",
                "Initializes the value of an Event created. If the event has already been dispatched, this method does nothing."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DataTransfer",
        "",
        "DataTransfer",
        "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.",
        [
            [
                "DataTransfer()",
                "Creates and returns a new DataTransfer object."
            ],
            [
                "DataTransfer.dropEffect",
                "Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be none, copy, link or move."
            ],
            [
                "DataTransfer.effectAllowed",
                "Provides all of the types of operations that are possible. Must be one of none, copy, copyLink, copyMove, link, linkMove, move, all or uninitialized."
            ],
            [
                "DataTransfer.files",
                "Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list."
            ],
            [
                "DataTransfer.items Read only",
                "Gives a DataTransferItemList object which is a list of all of the drag data."
            ],
            [
                "DataTransfer.types Read only",
                "An array of strings giving the formats that were set in the dragstart event."
            ],
            [
                "DataTransfer.mozCursor",
                "Gives the drag cursor's state. This is primarily used to control the cursor during tab drags."
            ],
            [
                "DataTransfer.mozSourceNode Read only",
                "The Node over which the mouse cursor was located when the button was pressed to initiate the drag operation. This value is null for external drags or if the caller can't access the node."
            ],
            [
                "DataTransfer.mozUserCancelled Read only",
                "This property applies only to the dragend event, and is true if the user canceled the drag operation by pressing escape. It will be false in all other cases, including if the drag failed for any other reason, for instance due to a drop over an invalid location."
            ],
            [
                "DataTransfer.mozItemCount Read only",
                "Gives the number of items in the drag operation. Removed in Firefox 71."
            ],
            [
                "DataTransfer.clearData()",
                "Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect."
            ],
            [
                "DataTransfer.getData()",
                "Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data."
            ],
            [
                "DataTransfer.setData()",
                "Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position."
            ],
            [
                "DataTransfer.setDragImage()",
                "Set the image to be used for dragging if a custom one is desired."
            ],
            [
                "DataTransfer.addElement()",
                "Sets the drag source to the given element."
            ],
            [
                "DataTransfer.mozClearDataAt()",
                "Removes the data associated with the given format for an item at the specified index. The index is in the range from zero to the number of items minus one. Removed in Firefox 71."
            ],
            [
                "DataTransfer.mozGetDataAt()",
                "Retrieves the data associated with the given format for an item at the specified index, or null if it does not exist. The index should be in the range from zero to the number of items minus one. Removed in Firefox 71."
            ],
            [
                "DataTransfer.mozSetDataAt()",
                "A data transfer may store multiple items, each at a given zero-based index. mozSetDataAt() may only be called with an index argument less than mozItemCount in which case an existing item is modified, or equal to mozItemCount in which case a new item is added, and the mozItemCount is incremented by one. Removed in Firefox 71."
            ],
            [
                "DataTransfer.mozTypesAt()",
                "Holds a list of the format types of the data that is stored for an item at the specified index. If the index is not in the range from 0 to the number of items minus one, an empty string list is returned. Removed in Firefox 71."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DataTransferItem",
        "",
        "DataTransferItem",
        "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.",
        [
            [
                "DataTransferItem.kind Read only",
                "The kind of drag data item, string or file."
            ],
            [
                "DataTransferItem.type Read only",
                "The drag data item's type, typically a MIME type."
            ],
            [
                "DataTransferItem.getAsFile()",
                "Returns the File object associated with the drag data item (or null if the drag item is not a file)."
            ],
            [
                "DataTransferItem.getAsFileSystemHandle()",
                "Returns a FileSystemFileHandle if the dragged item is a file, or a FileSystemDirectoryHandle if the dragged item is a directory."
            ],
            [
                "DataTransferItem.getAsString()",
                "Invokes the specified callback with the drag data item string as its argument."
            ],
            [
                "DataTransferItem.webkitGetAsEntry()",
                "Returns an object based on FileSystemEntry representing the selected file's entry in its file system. This will generally be either a FileSystemFileEntry or FileSystemDirectoryEntry object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DataTransferItemList",
        "",
        "DataTransferItemList",
        "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.",
        [
            [
                "DataTransferItemList.length Read only",
                "An unsigned long that is the number of drag items in the list."
            ],
            [
                "DataTransferItemList.add()",
                "Adds an item (either a File object or a string) to the drag item list and returns a DataTransferItem object for the new item."
            ],
            [
                "DataTransferItemList.remove()",
                "Removes the drag item from the list at the given index."
            ],
            [
                "DataTransferItemList.clear()",
                "Removes all of the drag items from the list."
            ],
            [
                "DataTransferItemList.DataTransferItem()",
                "Getter that returns a DataTransferItem at the given index."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DecompressionStream",
        "",
        "DecompressionStream",
        "The DecompressionStream interface of the Compression Streams API is an API for decompressing a stream of data.",
        [
            [
                "DecompressionStream.DecompressionStream()",
                "Creates a new DecompressionStream"
            ],
            [
                "DecompressionStream.readable",
                "Returns the ReadableStream instance controlled by this object."
            ],
            [
                "DecompressionStream.writable",
                "Returns the WritableStream instance controlled by this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DedicatedWorkerGlobalScope",
        "",
        "DedicatedWorkerGlobalScope",
        "",
        [
            [
                "DedicatedWorkerGlobalScope.name Read only",
                "The name that the Worker was (optionally) given when it was created using the Worker() constructor. This is mainly useful for debugging purposes."
            ],
            [
                "WorkerGlobalScope.self",
                "Returns an object reference to the DedicatedWorkerGlobalScope object itself."
            ],
            [
                "WorkerGlobalScope.console Read only",
                "Returns the console associated with the worker."
            ],
            [
                "WorkerGlobalScope.location Read only",
                "Returns the WorkerLocation associated with the worker. WorkerLocation is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers."
            ],
            [
                "WorkerGlobalScope.navigator Read only",
                "Returns the WorkerNavigator associated with the worker. WorkerNavigator is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers."
            ],
            [
                "WorkerGlobalScope.performance Read only",
                "Returns the Performance object associated with the worker, which is a regular performance object, but with a subset of its properties and methods available."
            ],
            [
                "DedicatedWorkerGlobalScope.onmessage",
                "Is an event handler representing the code to be called when the message event is raised. These events are of type MessageEvent and will be called when the worker receives a message from the document that started it (i.e. from the Worker.postMessage method.)"
            ],
            [
                "DedicatedWorkerGlobalScope.onmessageerror",
                "Is an event handler representing the code to be called when the messageerror event is raised."
            ],
            [
                "DedicatedWorkerGlobalScope.close()",
                "Discards any tasks queued in the WorkerGlobalScope's event loop, effectively closing this particular scope."
            ],
            [
                "DedicatedWorkerGlobalScope.postMessage()",
                "Sends a message — which can consist of any JavaScript object — to the parent document that first spawned the worker."
            ],
            [
                "WorkerGlobalScope.dump()",
                "Writes a message to the console."
            ],
            [
                "WorkerGlobalScope.importScripts()",
                "Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example: importScripts('foo.js', 'bar.js');"
            ],
            [
                "WindowOrWorkerGlobalScope.atob",
                "Decodes a string of data which has been encoded using base-64 encoding."
            ],
            [
                "WindowOrWorkerGlobalScope.btoa",
                "Creates a base-64 encoded ASCII string from a string of binary data."
            ],
            [
                "WindowOrWorkerGlobalScope.clearInterval",
                "Cancels the repeated execution set using WindowOrWorkerGlobalScope.setInterval."
            ],
            [
                "WindowOrWorkerGlobalScope.clearTimeout",
                "Cancels the repeated execution set using WindowOrWorkerGlobalScope.setTimeout."
            ],
            [
                "WindowOrWorkerGlobalScope.setInterval",
                "Schedules the execution of a function every X milliseconds."
            ],
            [
                "WindowOrWorkerGlobalScope.setTimeout",
                "Sets a delay for executing a function."
            ],
            [
                "message",
                "Fired when the worker receives a message from its parent. Also available via the onmessage property."
            ],
            [
                "messageerror",
                "Fired when a worker receives a message that can't be deserialized. Also available via the onmessageerror property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DelayNode",
        "",
        "DelayNode",
        "The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output. A DelayNode always has exactly one input and one output, both with the same amount of channels.",
        [
            [
                "DelayNode()",
                "Creates a new instance of an DelayNode object instance. Alternatively, you can use the BaseAudioContext.createDelay() factory method."
            ],
            [
                "DelayNode.delayTime Read only",
                "Is an a-rate AudioParam representing the amount of delay to apply, specified in seconds."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DeprecationReportBody",
        "",
        "DeprecationReportBody",
        "The DeprecationReportBody interface of the Reporting API represents the body of a deprecation report.",
        [
            [
                "DeprecationReportBody.id",
                "A string representing the feature or API that is deprecated, for example NavigatorGetUserMedia. This can be used to group reports by deprecated feature."
            ],
            [
                "DeprecationReportBody.anticipatedRemoval",
                "A Date object (rendered as a string) representing the date when the feature is expected to be removed from the current browser. If the date is not known, this property will return null."
            ],
            [
                "DeprecationReportBody.message",
                "A string containing a human-readable description of the deprecation, including information such as what newer feature has superseded it, if any. This typically matches the message a browser will display in its DevTools console when a deprecated feature is used, if one is available."
            ],
            [
                "DeprecationReportBody.sourceFile",
                "A string containing the path to the source file where the deprecated feature was used, if known, or null otherwise."
            ],
            [
                "DeprecationReportBody.lineNumber",
                "A number representing the line in the source file in which the deprecated feature was used, if known, or null otherwise."
            ],
            [
                "DeprecationReportBody.columnNumber",
                "A number representing the column in the source file in which the deprecated feature was used, if known, or null otherwise."
            ],
            [
                "DeprecationReportBody.toJSON()",
                "A serializer which returns a JSON representation of the InterventionReportBody object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DeviceMotionEvent",
        "",
        "DeviceMotionEvent",
        "",
        [
            [
                "DeviceMotionEvent.DeviceMotionEvent()",
                "Creates a new DeviceMotionEvent."
            ],
            [
                "DeviceMotionEvent.accelerationRead only",
                "An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in m/s²."
            ],
            [
                "DeviceMotionEvent.accelerationIncludingGravityRead only",
                "An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in m/s²."
            ],
            [
                "DeviceMotionEvent.rotationRateRead only",
                "An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is expressed in degrees per seconds."
            ],
            [
                "DeviceMotionEvent.intervalRead only",
                "A number representing the interval of time, in milliseconds, at which data is obtained from the device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DeviceMotionEventAcceleration",
        "",
        "DeviceMotionEventAcceleration",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "DeviceMotionEventAcceleration.x Read only",
                "The amount of acceleration along the X axis. Read only."
            ],
            [
                "DeviceMotionEventAcceleration.y Read only",
                "The amount of acceleration along the Y axis. Read only."
            ],
            [
                "DeviceMotionEventAcceleration.z Read only",
                "The amount of acceleration along the Z axis. Read only."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DeviceMotionEventRotationRate",
        "",
        "DeviceMotionEventRotationRate",
        "",
        [
            [
                "DeviceMotionEventRotationRate.alpha Read only",
                "The amount of rotation around the Z axis, in degrees per second."
            ],
            [
                "DeviceMotionEventRotationRate.beta Read only",
                "The amount of rotation around the X axis, in degrees per second."
            ],
            [
                "DeviceMotionEventRotationRate.gamma Read only",
                "The amount of rotation around the Y axis, in degrees per second."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DeviceOrientationEvent",
        "",
        "DeviceOrientationEvent",
        "",
        [
            [
                "DeviceOrientationEvent.DeviceOrientationEvent()",
                "Creates a new DeviceOrientationEvent."
            ],
            [
                "DeviceOrientationEvent.absolute Read only",
                "A boolean that indicates whether or not the device is providing orientation data absolutely."
            ],
            [
                "DeviceOrientationEvent.alpha Read only",
                "A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 (inclusive) to 360 (exclusive)."
            ],
            [
                "DeviceOrientationEvent.beta Read only",
                "A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 (inclusive) to 180 (exclusive). This represents a front to back motion of the device."
            ],
            [
                "DeviceOrientationEvent.gamma Read only",
                "A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 (inclusive) to 90 (exclusive). This represents a left to right motion of the device."
            ],
            [
                "DeviceOrientationEvent.webkitCompassHeading Read only",
                "A number represents the difference between the motion of the device around the z axis of the world system and the direction of the north, express in degrees with values ranging from 0 to 360."
            ],
            [
                "DeviceOrientationEvent.webkitCompassAccuracy Read only",
                "The accuracy of the compass means that the deviation is positive or negative. It's usually 10."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DeviceProximityEvent",
        "",
        "DeviceProximityEvent",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "DeviceProximityEvent.max Read only",
                "The maximum sensing distance the sensor is able to report, in centimeters."
            ],
            [
                "DeviceProximityEvent.min Read only",
                "The minimum sensing distance the sensor is able to report, in centimeters. Ususally zero."
            ],
            [
                "DeviceProximityEvent.value Read only",
                "The current device proximity, in centimeters."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DirectoryEntrySync",
        "",
        "DirectoryEntrySync",
        "",
        [
            [
                "DirectoryReaderSync",
                "Represents a directory in a file system."
            ],
            [
                "path",
                "Either an absolute path or a relative path from the directory to the file to be looked up or created. You cannot create a file whose immediate parent does not exist. Create the parent directory first."
            ],
            [
                "options",
                "An object literal describing the behavior of the method. If the file does not exist, it is created."
            ],
            [
                "FileEntrySync",
                "Represents a file in a file system."
            ],
            [
                "path",
                "Either an absolute path or a relative path from the directory to the file to be looked up or created. You cannot create a file whose immediate parent does not exist. Create the parent directory first."
            ],
            [
                "options",
                "An object literal describing the behavior of the method if the file does not exist."
            ],
            [
                "DirectoryEntrySync",
                "Represents a directory in a file system."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DirectoryReaderSync",
        "",
        "DirectoryReaderSync",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/DisplayMediaStreamConstraints",
        "",
        "DisplayMediaStreamConstraints",
        "",
        [
            [
                "audio",
                "A Boolean or MediaTrackConstraints value; if a Boolean, this value indicates whether or not to include an audio track in the MediaStream returned by getDisplayMedia(). If a MediaTrackConstraints object is provided here, an audio track is included in the stream, but the audio is processed to match the specified constraints after being retrieved from the hardware but before being added to the MediaStream. The default value is false."
            ],
            [
                "video",
                "If true (the default), the display contents are included in a MediaStreamTrack within the stream provided by getDisplayMedia(). Optionally, a MediaTrackConstraints object may be given, providing options specifying processing to be performed on the video data before adding it to the stream. A value of false is not permitted, and results in a TypeError being thrown."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Document",
        "",
        "Document",
        "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.",
        [
            [
                "Document()",
                "Creates a new Document object."
            ],
            [
                "Document.activeElement Read only",
                "Returns the Element that currently has focus."
            ],
            [
                "Document.body",
                "Returns the <body> or <frameset> node of the current document."
            ],
            [
                "Document.characterSetRead only",
                "Returns the character set being used by the document."
            ],
            [
                "Document.childElementCount Read only",
                "Returns the number of child elements of the current document."
            ],
            [
                "Document.children Read only",
                "Returns the child elements of the current document."
            ],
            [
                "Document.compatMode Read only",
                "Indicates whether the document is rendered in quirks or strict mode."
            ],
            [
                "Document.contentType Read only",
                "Returns the Content-Type from the MIME Header of the current document."
            ],
            [
                "Document.doctypeRead only",
                "Returns the Document Type Definition (DTD) of the current document."
            ],
            [
                "Document.documentElementRead only",
                "Returns the Element that is a direct child of the document. For HTML documents, this is normally the HTMLHtmlElement object representing the document's <html> element."
            ],
            [
                "Document.documentURIRead only",
                "Returns the document location as a string."
            ],
            [
                "Document.embedsRead only",
                "Returns a list of the embedded <embed> elements within the current document."
            ],
            [
                "Document.firstElementChild Read only",
                "Returns the first child element of the current document."
            ],
            [
                "Document.fonts",
                "Returns the FontFaceSet interface of the current document."
            ],
            [
                "Document.formsRead only",
                "Returns a list of the <form> elements within the current document."
            ],
            [
                "Document.fullscreenElement Read only",
                "The element that's currently in full screen mode for this document."
            ],
            [
                "Document.headRead only",
                "Returns the <head> element of the current document."
            ],
            [
                "Document.hiddenRead only",
                "Returns a Boolean value indicating if the page is considered hidden or not."
            ],
            [
                "Document.imagesRead only",
                "Returns a list of the images in the current document."
            ],
            [
                "Document.implementationRead only",
                "Returns the DOM implementation associated with the current document."
            ],
            [
                "Document.lastElementChild Read only",
                "Returns the last child element of the current document."
            ],
            [
                "Document.linksRead only",
                "Returns a list of all the hyperlinks in the document."
            ],
            [
                "Document.mozSyntheticDocument",
                "Returns a Boolean that is true only if this document is synthetic, such as a standalone image, video, audio file, or the like."
            ],
            [
                "Document.pictureInPictureElement Read only",
                "Returns the Element currently being presented in picture-in-picture mode in this document."
            ],
            [
                "Document.pictureInPictureEnabled Read only",
                "Returns true if the picture-in-picture feature is enabled."
            ],
            [
                "Document.pluginsRead only",
                "Returns a list of the available plugins."
            ],
            [
                "Document.pointerLockElement Read only",
                "Returns the element set as the target for mouse events while the pointer is locked. null if lock is pending, pointer is unlocked, or if the target is in another document."
            ],
            [
                "Document.featurePolicy Read only",
                "Returns the FeaturePolicy interface which provides a simple API for introspecting the feature policies applied to a specific document."
            ],
            [
                "Document.scriptsRead only",
                "Returns all the <script> elements on the document."
            ],
            [
                "Document.scrollingElementRead only",
                "Returns a reference to the Element that scrolls the document."
            ],
            [
                "Document.styleSheets Read only",
                "Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document."
            ],
            [
                "Document.timeline Read only",
                "Returns timeline as a special instance of DocumentTimeline that is automatically created on page load."
            ],
            [
                "Document.visibilityStateRead only",
                "Returns a string denoting the visibility state of the document. Possible values are visible, hidden, prerender, and unloaded."
            ],
            [
                "Document.cookie",
                "Returns a semicolon-separated list of the cookies for that document or sets a single cookie."
            ],
            [
                "Document.defaultViewRead only",
                "Returns a reference to the window object."
            ],
            [
                "Document.designMode",
                "Gets/sets the ability to edit the whole document."
            ],
            [
                "Document.dir",
                "Gets/sets directionality (rtl/ltr) of the document."
            ],
            [
                "Document.domain",
                "Gets/sets the domain of the current document."
            ],
            [
                "Document.lastModifiedRead only",
                "Returns the date on which the document was last modified."
            ],
            [
                "Document.locationRead only",
                "Returns the URI of the current document."
            ],
            [
                "Document.readyStateRead only",
                "Returns loading status of the document."
            ],
            [
                "Document.referrerRead only",
                "Returns the URI of the page that linked to this page."
            ],
            [
                "Document.title",
                "Sets or gets the title of the current document."
            ],
            [
                "Document.URLRead only",
                "Returns the document location as a string."
            ],
            [
                "Document.onafterscriptexecute",
                "Represents the event handling code for the afterscriptexecute event."
            ],
            [
                "Document.onbeforescriptexecute",
                "Represents the event handling code for the beforescriptexecute event."
            ],
            [
                "Document.oncopy",
                "Represents the event handling code for the copy event."
            ],
            [
                "Document.oncut",
                "Represents the event handling code for the cut event."
            ],
            [
                "Document.onfullscreenchange",
                "Is an event handler representing the code to be called when the fullscreenchange event is raised."
            ],
            [
                "Document.onfullscreenerror",
                "Is an event handler representing the code to be called when the fullscreenerror event is raised."
            ],
            [
                "Document.onpaste",
                "Represents the event handling code for the paste event."
            ],
            [
                "Document.onreadystatechange",
                "Represents the event handling code for the readystatechange event."
            ],
            [
                "GlobalEventHandlers.onselectionchange",
                "Is an event handler representing the code to be called when the selectionchange event is raised."
            ],
            [
                "Document.onvisibilitychange",
                "Is an event handler representing the code to be called when the visibilitychange event is raised."
            ],
            [
                "GlobalEventHandlers.onabort",
                "Is an event handler representing the code to be called when the abort event is raised."
            ],
            [
                "GlobalEventHandlers.onanimationcancel",
                "An event handler called when an animationcancel event is sent, indicating that a running CSS animation has been canceled."
            ],
            [
                "GlobalEventHandlers.onanimationend",
                "An event handler called when an animationend event is sent, indicating that a CSS animation has stopped playing."
            ],
            [
                "GlobalEventHandlers.onanimationiteration",
                "An event handler called when an animationiteration event has been sent, indicating that a CSS animation has begun playing a new iteration of the animation sequence."
            ],
            [
                "GlobalEventHandlers.onanimationstart",
                "An event handler called when an animationstart event is sent, indicating that a CSS animation has started playing."
            ],
            [
                "GlobalEventHandlers.onauxclick",
                "An event handler called when an auxclick event is sent, indicating that a non-primary button has been pressed on an input device (e.g. a middle mouse button)."
            ],
            [
                "GlobalEventHandlers.onblur",
                "Is an event handler representing the code to be called when the blur event is raised."
            ],
            [
                "GlobalEventHandlers.onerror",
                "Is an OnErrorEventHandler representing the code to be called when the error event is raised."
            ],
            [
                "GlobalEventHandlers.onfocus",
                "Is an event handler representing the code to be called when the focus event is raised."
            ],
            [
                "GlobalEventHandlers.oncancel",
                "Is an event handler representing the code to be called when the cancel event is raised."
            ],
            [
                "GlobalEventHandlers.oncanplay",
                "Is an event handler representing the code to be called when the canplay event is raised."
            ],
            [
                "GlobalEventHandlers.oncanplaythrough",
                "Is an event handler representing the code to be called when the canplaythrough event is raised."
            ],
            [
                "GlobalEventHandlers.onchange",
                "Is an event handler representing the code to be called when the change event is raised."
            ],
            [
                "GlobalEventHandlers.onclick",
                "Is an event handler representing the code to be called when the click event is raised."
            ],
            [
                "GlobalEventHandlers.onclose",
                "Is an event handler representing the code to be called when the close event is raised."
            ],
            [
                "GlobalEventHandlers.oncontextmenu",
                "Is an event handler representing the code to be called when the contextmenu event is raised."
            ],
            [
                "GlobalEventHandlers.oncuechange",
                "Is an event handler representing the code to be called when the cuechange event is raised."
            ],
            [
                "GlobalEventHandlers.ondblclick",
                "Is an event handler representing the code to be called when the dblclick event is raised."
            ],
            [
                "GlobalEventHandlers.ondrag",
                "Is an event handler representing the code to be called when the drag event is raised."
            ],
            [
                "GlobalEventHandlers.ondragend",
                "Is an event handler representing the code to be called when the dragend event is raised."
            ],
            [
                "GlobalEventHandlers.ondragenter",
                "Is an event handler representing the code to be called when the dragenter event is raised."
            ],
            [
                "GlobalEventHandlers.ondragexit",
                "Is an event handler representing the code to be called when the dragexit event is raised."
            ],
            [
                "GlobalEventHandlers.ondragleave",
                "Is an event handler representing the code to be called when the dragleave event is raised."
            ],
            [
                "GlobalEventHandlers.ondragover",
                "Is an event handler representing the code to be called when the dragover event is raised."
            ],
            [
                "GlobalEventHandlers.ondragstart",
                "Is an event handler representing the code to be called when the dragstart event is raised."
            ],
            [
                "GlobalEventHandlers.ondrop",
                "Is an event handler representing the code to be called when the drop event is raised."
            ],
            [
                "GlobalEventHandlers.ondurationchange",
                "Is an event handler representing the code to be called when the durationchange event is raised."
            ],
            [
                "GlobalEventHandlers.onemptied",
                "Is an event handler representing the code to be called when the emptied event is raised."
            ],
            [
                "GlobalEventHandlers.onended",
                "Is an event handler representing the code to be called when the ended event is raised."
            ],
            [
                "GlobalEventHandlers.onformdata",
                "Is an event handler for processing formdata events, fired after the entry list representing the form's data is constructed."
            ],
            [
                "GlobalEventHandlers.ongotpointercapture",
                "Is an event handler representing the code to be called when the gotpointercapture event type is raised."
            ],
            [
                "GlobalEventHandlers.oninput",
                "Is an event handler representing the code to be called when the input event is raised."
            ],
            [
                "GlobalEventHandlers.oninvalid",
                "Is an event handler representing the code to be called when the invalid event is raised."
            ],
            [
                "GlobalEventHandlers.onkeydown",
                "Is an event handler representing the code to be called when the keydown event is raised."
            ],
            [
                "GlobalEventHandlers.onkeypress",
                "Is an event handler representing the code to be called when the keypress event is raised."
            ],
            [
                "GlobalEventHandlers.onkeyup",
                "Is an event handler representing the code to be called when the keyup event is raised."
            ],
            [
                "GlobalEventHandlers.onload",
                "Is an event handler representing the code to be called when the load event is raised."
            ],
            [
                "GlobalEventHandlers.onloadeddata",
                "Is an event handler representing the code to be called when the loadeddata event is raised."
            ],
            [
                "GlobalEventHandlers.onloadedmetadata",
                "Is an event handler representing the code to be called when the loadedmetadata event is raised."
            ],
            [
                "GlobalEventHandlers.onloadend",
                "Is an event handler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)"
            ],
            [
                "GlobalEventHandlers.onloadstart",
                "Is an event handler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)"
            ],
            [
                "GlobalEventHandlers.onlostpointercapture",
                "Is an event handler representing the code to be called when the lostpointercapture event type is raised."
            ],
            [
                "GlobalEventHandlers.onmousedown",
                "Is an event handler representing the code to be called when the mousedown event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseenter",
                "Is an event handler representing the code to be called when the mouseenter event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseleave",
                "Is an event handler representing the code to be called when the mouseleave event is raised."
            ],
            [
                "GlobalEventHandlers.onmousemove",
                "Is an event handler representing the code to be called when the mousemove event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseout",
                "Is an event handler representing the code to be called when the mouseout event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseover",
                "Is an event handler representing the code to be called when the mouseover event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseup",
                "Is an event handler representing the code to be called when the mouseup event is raised."
            ],
            [
                "GlobalEventHandlers.onmousewheel",
                "Is an event handler representing the code to be called when the mousewheel event is raised. Deprecated. Use onwheel instead."
            ],
            [
                "GlobalEventHandlers.onwheel",
                "Is an event handler representing the code to be called when the wheel event is raised."
            ],
            [
                "GlobalEventHandlers.onpause",
                "Is an event handler representing the code to be called when the pause event is raised."
            ],
            [
                "GlobalEventHandlers.onplay",
                "Is an event handler representing the code to be called when the play event is raised."
            ],
            [
                "GlobalEventHandlers.onplaying",
                "Is an event handler representing the code to be called when the playing event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerdown",
                "Is an event handler representing the code to be called when the pointerdown event is raised."
            ],
            [
                "GlobalEventHandlers.onpointermove",
                "Is an event handler representing the code to be called when the pointermove event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerup",
                "Is an event handler representing the code to be called when the pointerup event is raised."
            ],
            [
                "GlobalEventHandlers.onpointercancel",
                "Is an event handler representing the code to be called when the pointercancel event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerover",
                "Is an event handler representing the code to be called when the pointerover event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerout",
                "Is an event handler representing the code to be called when the pointerout event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerenter",
                "Is an event handler representing the code to be called when the pointerenter event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerleave",
                "Is an event handler representing the code to be called when the pointerleave event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerlockchange",
                "Is an event handler representing the code to be called when the pointerlockchange event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerlockerror",
                "Is an event handler representing the code to be called when the pointerlockerror event is raised."
            ],
            [
                "GlobalEventHandlers.onprogress",
                "Is an event handler representing the code to be called when the progress event is raised."
            ],
            [
                "GlobalEventHandlers.onratechange",
                "Is an event handler representing the code to be called when the ratechange event is raised."
            ],
            [
                "GlobalEventHandlers.onreset",
                "Is an event handler representing the code to be called when the reset event is raised."
            ],
            [
                "GlobalEventHandlers.onresize",
                "Is an event handler representing the code to be called when the resize event is raised."
            ],
            [
                "GlobalEventHandlers.onscroll",
                "Is an event handler representing the code to be called when the scroll event is raised."
            ],
            [
                "GlobalEventHandlers.onseeked",
                "Is an event handler representing the code to be called when the seeked event is raised."
            ],
            [
                "GlobalEventHandlers.onseeking",
                "Is an event handler representing the code to be called when the seeking event is raised."
            ],
            [
                "GlobalEventHandlers.onselect",
                "Is an event handler representing the code to be called when the select event is raised."
            ],
            [
                "GlobalEventHandlers.onselectstart",
                "Is an event handler representing the code to be called when the selectionchange event is raised, i.e. when the user starts to make a new text selection on a web page."
            ],
            [
                "GlobalEventHandlers.onselectionchange",
                "Is an event handler representing the code to be called when the selectionchange event is raised, i.e. when the text selected on a web page changes."
            ],
            [
                "GlobalEventHandlers.onshow",
                "Is an event handler representing the code to be called when the show event is raised."
            ],
            [
                "GlobalEventHandlers.onstalled",
                "Is an event handler representing the code to be called when the stalled event is raised."
            ],
            [
                "GlobalEventHandlers.onsubmit",
                "Is an event handler representing the code to be called when the submit event is raised."
            ],
            [
                "GlobalEventHandlers.onsuspend",
                "Is an event handler representing the code to be called when the suspend event is raised."
            ],
            [
                "GlobalEventHandlers.ontimeupdate",
                "Is an event handler representing the code to be called when the timeupdate event is raised."
            ],
            [
                "GlobalEventHandlers.onvolumechange",
                "Is an event handler representing the code to be called when the volumechange event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchcancel",
                "Is an event handler representing the code to be called when the touchcancel event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchend",
                "Is an event handler representing the code to be called when the touchend event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchmove",
                "Is an event handler representing the code to be called when the touchmove event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchstart",
                "Is an event handler representing the code to be called when the touchstart event is raised."
            ],
            [
                "GlobalEventHandlers.ontransitioncancel",
                "An event handler called when a transitioncancel event is sent, indicating that a CSS transition has been cancelled."
            ],
            [
                "GlobalEventHandlers.ontransitionend",
                "An event handler called when a transitionend event is sent, indicating that a CSS transition has finished playing."
            ],
            [
                "GlobalEventHandlers.ontransitionrun",
                "An event handler called when a transitionrun event is sent, indicating that a CSS transition is running, though not nessarilty started."
            ],
            [
                "GlobalEventHandlers.ontransitionstart",
                "An event handler called when a transitionstart event is sent, indicating that a CSS transition has started transitioning."
            ],
            [
                "GlobalEventHandlers.onwaiting",
                "Is an event handler representing the code to be called when the waiting event is raised."
            ],
            [
                "Document.alinkColor",
                "Returns or sets the color of active links in the document body."
            ],
            [
                "Document.all",
                "Provides access to all elements in the document — it returns an HTMLAllCollection rooted at the document node. This is a legacy, non-standard property and should not be used."
            ],
            [
                "Document.anchors Read only",
                "Returns a list of all of the anchors in the document."
            ],
            [
                "Document.applets Read only",
                "Returns an ordered list of the applets within a document."
            ],
            [
                "Document.bgColor",
                "Gets/sets the background color of the current document."
            ],
            [
                "Document.charset Read only",
                "Alias of Document.characterSet. Use this property instead."
            ],
            [
                "Document.fgColor",
                "Gets/sets the foreground color, or text color, of the current document."
            ],
            [
                "Document.fullscreen",
                "true when the document is in full-screen mode."
            ],
            [
                "Document.height",
                "Gets/sets the height of the current document."
            ],
            [
                "Document.inputEncoding Read only",
                "Alias of Document.characterSet. Use this property instead."
            ],
            [
                "Document.lastStyleSheetSet Read only",
                "Returns the name of the style sheet set that was last enabled. Has the value null until the style sheet is changed by setting the value of selectedStyleSheetSet."
            ],
            [
                "Document.linkColor",
                "Gets/sets the color of hyperlinks in the document."
            ],
            [
                "Document.preferredStyleSheetSet Read only",
                "Returns the preferred style sheet set as specified by the page author."
            ],
            [
                "Document.rootElement",
                "Like Document.documentElement, but only for <svg> root elements. Use this property instead."
            ],
            [
                "Document.selectedStyleSheetSet",
                "Returns which style sheet set is currently in use."
            ],
            [
                "Document.styleSheetSets Read only",
                "Returns a list of the style sheet sets available on the document."
            ],
            [
                "Document.vlinkColor",
                "Gets/sets the color of visited hyperlinks."
            ],
            [
                "Document.width",
                "Returns the width of the current document."
            ],
            [
                "Document.xmlEncoding",
                "Returns the encoding as determined by the XML declaration."
            ],
            [
                "Document.xmlStandalone",
                "Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false."
            ],
            [
                "Document.xmlVersion",
                "Returns the version number as specified in the XML declaration or \"1.0\" if the declaration is absent."
            ],
            [
                "Document.adoptNode()",
                "Adopt node from an external document."
            ],
            [
                "Document.append()",
                "Inserts a set of Node objects or DOMString objects after the last child of the document."
            ],
            [
                "Document.captureEvents()",
                "See Window.captureEvents."
            ],
            [
                "Document.caretPositionFromPoint()",
                "Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node."
            ],
            [
                "Document.caretRangeFromPoint()",
                "Gets a Range object for the document fragment under the specified coordinates."
            ],
            [
                "Document.createAttribute()",
                "Creates a new Attr object and returns it."
            ],
            [
                "Document.createAttributeNS()",
                "Creates a new attribute node in a given namespace and returns it."
            ],
            [
                "Document.createCDATASection()",
                "Creates a new CDATA node and returns it."
            ],
            [
                "Document.createComment()",
                "Creates a new comment node and returns it."
            ],
            [
                "Document.createDocumentFragment()",
                "Creates a new document fragment."
            ],
            [
                "Document.createElement()",
                "Creates a new element with the given tag name."
            ],
            [
                "Document.createElementNS()",
                "Creates a new element with the given tag name and namespace URI."
            ],
            [
                "Document.createEntityReference()",
                "Creates a new entity reference object and returns it."
            ],
            [
                "Document.createEvent()",
                "Creates an event object."
            ],
            [
                "Document.createNodeIterator()",
                "Creates a NodeIterator object."
            ],
            [
                "Document.createProcessingInstruction()",
                "Creates a new ProcessingInstruction object."
            ],
            [
                "Document.createRange()",
                "Creates a Range object."
            ],
            [
                "Document.createTextNode()",
                "Creates a text node."
            ],
            [
                "Document.createTouch()",
                "Creates a Touch object."
            ],
            [
                "Document.createTouchList()",
                "Creates a TouchList object."
            ],
            [
                "Document.createTreeWalker()",
                "Creates a TreeWalker object."
            ],
            [
                "Document.elementFromPoint()",
                "Returns the topmost element at the specified coordinates."
            ],
            [
                "Document.elementsFromPoint()",
                "Returns an array of all elements at the specified coordinates."
            ],
            [
                "Document.enableStyleSheetsForSet()",
                "Enables the style sheets for the specified style sheet set."
            ],
            [
                "Document.exitPictureInPicture()",
                "Remove the video from the floating picture-in-picture window back to its original container."
            ],
            [
                "Document.exitPointerLock()",
                "Release the pointer lock."
            ],
            [
                "Document.getAnimations()",
                "Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document."
            ],
            [
                "Document.getBoxQuads()",
                "Returns a list of DOMQuad objects representing the CSS fragments of the node."
            ],
            [
                "Document.getElementById",
                "Returns an object reference to the identified element."
            ],
            [
                "Document.getElementsByClassName()",
                "Returns a list of elements with the given class name."
            ],
            [
                "Document.getElementsByTagName()",
                "Returns a list of elements with the given tag name."
            ],
            [
                "Document.getElementsByTagNameNS()",
                "Returns a list of elements with the given tag name and namespace."
            ],
            [
                "Document.getSelection()",
                "Returns a Selection object representing the range of text selected by the user, or the current position of the caret."
            ],
            [
                "Document.hasStorageAccess()",
                "Returns a Promise that resolves with a boolean value indicating whether the document has access to its first-party storage."
            ],
            [
                "Document.importNode()",
                "Returns a clone of a node from an external document."
            ],
            [
                "Document.normalizeDocument()",
                "Replaces entities, normalizes text nodes, etc."
            ],
            [
                "Document.prepend()",
                "Inserts a set of Node objects or DOMString objects before the first child of the document."
            ],
            [
                "Document.querySelector()",
                "Returns the first Element node within the document, in document order, that matches the specified selectors."
            ],
            [
                "Document.querySelectorAll()",
                "Returns a list of all the Element nodes within the document that match the specified selectors."
            ],
            [
                "Document.releaseCapture()",
                "Releases the current mouse capture if it's on an element in this document."
            ],
            [
                "Document.releaseEvents()",
                "See Window.releaseEvents()."
            ],
            [
                "Document.replaceChildren()",
                "Replaces the existing children of a document with a specified new set of children."
            ],
            [
                "Document.requestStorageAccess()",
                "Returns a Promise that resolves if the access to first-party storage was granted, and rejects if access was denied."
            ],
            [
                "Document.routeEvent()",
                "See Window.routeEvent()."
            ],
            [
                "Document.mozSetImageElement()",
                "Allows you to change the element being used as the background image for a specified element ID."
            ],
            [
                "Document.createExpression()",
                "Compiles an XPathExpression which can then be used for (repeated) evaluations."
            ],
            [
                "Document.createNSResolver()",
                "Creates an XPathNSResolver object."
            ],
            [
                "Document.evaluate()",
                "Evaluates an XPath expression."
            ],
            [
                "Document.clear()",
                "In majority of modern browsers, including recent versions of Firefox and Internet Explorer, this method does nothing."
            ],
            [
                "Document.close()",
                "Closes a document stream for writing."
            ],
            [
                "Document.execCommand()",
                "On an editable document, executes a formatting command."
            ],
            [
                "Document.getElementsByName()",
                "Returns a list of elements with the given name."
            ],
            [
                "Document.hasFocus()",
                "Returns true if the focus is currently located anywhere inside the specified document."
            ],
            [
                "Document.open()",
                "Opens a document stream for writing."
            ],
            [
                "Document.queryCommandEnabled()",
                "Returns true if the formatting command can be executed on the current range."
            ],
            [
                "Document.queryCommandIndeterm()",
                "Returns true if the formatting command is in an indeterminate state on the current range."
            ],
            [
                "Document.queryCommandState()",
                "Returns true if the formatting command has been executed on the current range."
            ],
            [
                "Document.queryCommandSupported()",
                "Returns true if the formatting command is supported on the current range."
            ],
            [
                "Document.queryCommandValue()",
                "Returns the current value of the current range for a formatting command."
            ],
            [
                "Document.write()",
                "Writes text in a document."
            ],
            [
                "Document.writeln()",
                "Writes a line of text in a document."
            ],
            [
                "scroll",
                "Fired when the document view or an element has been scrolled. Also available via the onscroll property."
            ],
            [
                "visibilitychange",
                "Fired when the content of a tab has become visible or has been hidden. Also available via the onvisibilitychange property."
            ],
            [
                "wheel",
                "Fired when the user rotates a wheel button on a pointing device (typically a mouse). Also available via the onwheel property."
            ],
            [
                "animationcancel",
                "Fired when an animation unexpectedly aborts. Also available via the onanimationcancel property."
            ],
            [
                "animationend",
                "Fired when an animation has completed normally. Also available via the onanimationend property."
            ],
            [
                "animationiteration",
                "Fired when an animation iteration has completed. Also available via the onanimationiteration property."
            ],
            [
                "animationstart",
                "Fired when an animation starts. Also available via the onanimationstart property."
            ],
            [
                "copy",
                "Fired when the user initiates a copy action through the browser's user interface. Also available via the oncopy property."
            ],
            [
                "cut",
                "Fired when the user initiates a cut action through the browser's user interface. Also available via the oncut property."
            ],
            [
                "paste",
                "Fired when the user initiates a paste action through the browser's user interface. Also available via the onpaste property."
            ],
            [
                "drag",
                "Fired every few hundred milliseconds as an element or text selection is being dragged by the user. Also available via the ondrag property."
            ],
            [
                "dragend",
                "Fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key). Also available via the ondragend property."
            ],
            [
                "dragenter",
                "Fired when a dragged element or text selection enters a valid drop target. Also available via the ondragenter property."
            ],
            [
                "dragleave",
                "Fired when a dragged element or text selection leaves a valid drop target. Also available via the ondragleave property."
            ],
            [
                "dragover",
                "Fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds). Also available via the ondragover property."
            ],
            [
                "dragstart",
                "Fired when the user starts dragging an element or text selection. Also available via the ondragstart property."
            ],
            [
                "drop",
                "Fired when an element or text selection is dropped on a valid drop target. Also available via the ondrop property."
            ],
            [
                "fullscreenchange",
                "Fired when the Document transitions into or out of full-screen mode. Also available via the onfullscreenchange property."
            ],
            [
                "fullscreenerror",
                "Fired if an error occurs while attempting to switch into or out of full-screen mode. Also available via the onfullscreenerror property."
            ],
            [
                "keydown",
                "Fired when a key is pressed. Also available via the onkeydown property."
            ],
            [
                "keypress",
                "Fired when a key that produces a character value is pressed down. Also available via the onkeypress property."
            ],
            [
                "keyup",
                "Fired when a key is released. Also available via the onkeyup property."
            ],
            [
                "DOMContentLoaded",
                "Fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading."
            ],
            [
                "readystatechange",
                "Fired when the readyState attribute of a document has changed. Also available via the onreadystatechange property."
            ],
            [
                "gotpointercapture",
                "Fired when an element captures a pointer using setPointerCapture(). Also available via the ongotpointercapture property."
            ],
            [
                "lostpointercapture",
                "Fired when a captured pointer is released. Also available via the onlostpointercapture property."
            ],
            [
                "pointercancel",
                "Fired when a pointer event is canceled. Also available via the onpointercancel property."
            ],
            [
                "pointerdown",
                "Fired when a pointer becomes active. Also available via the onpointerdown property."
            ],
            [
                "pointerenter",
                "Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants. Also available via the onpointerenter property."
            ],
            [
                "pointerleave",
                "Fired when a pointer is moved out of the hit test boundaries of an element. Also available via the onpointerleave property."
            ],
            [
                "pointerlockchange",
                "Fired when the pointer is locked/unlocked. Also available via the onpointerlockchange property."
            ],
            [
                "pointerlockerror",
                "Fired when locking the pointer failed. Also available via the onpointerlockerror property."
            ],
            [
                "pointermove",
                "Fired when a pointer changes coordinates. Also available via the onpointermove property."
            ],
            [
                "pointerout",
                "Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons). Also available via the onpointerout property."
            ],
            [
                "pointerover",
                "Fired when a pointer is moved into an element's hit test boundaries. Also available via the onpointerover property."
            ],
            [
                "pointerup",
                "Fired when a pointer is no longer active. Also available via the onpointerup property."
            ],
            [
                "selectionchange",
                "Fired when the current text selection on a document is changed. Also available via the onselectionchange property."
            ],
            [
                "selectstart",
                "Fired when the user begins a new selection. Also available via the onselectstart property."
            ],
            [
                "touchcancel",
                "Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created). Also available via the ontouchcancel property."
            ],
            [
                "touchend",
                "Fired when one or more touch points are removed from the touch surface. Also available via the ontouchend property"
            ],
            [
                "touchmove",
                "Fired when one or more touch points are moved along the touch surface. Also available via the ontouchmove property"
            ],
            [
                "touchstart",
                "Fired when one or more touch points are placed on the touch surface. Also available via the ontouchstart property"
            ],
            [
                "transitioncancel",
                "Fired when a CSS transition is canceled. Also available via the ontransitioncancel property."
            ],
            [
                "transitionend",
                "Fired when a CSS transition has completed. Also available via the ontransitionend property."
            ],
            [
                "transitionrun",
                "Fired when a CSS transition is first created. Also available via the ontransitionrun property."
            ],
            [
                "transitionstart",
                "Fired when a CSS transition has actually started. Also available via the ontransitionstart property."
            ],
            [
                "Document.fileSize*",
                "Returns size in bytes of the document. Starting with Internet Explorer 11, that property is no longer supported. See MSDN."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DocumentFragment",
        "",
        "DocumentFragment",
        "The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document (even on reflow) or incur any performance impact when changes are made.",
        [
            [
                "DocumentFragment()",
                "Creates and returns a new DocumentFragment object."
            ],
            [
                "DocumentFragment.childElementCount Read only",
                "Returns the amount of child elements the DocumentFragment has."
            ],
            [
                "DocumentFragment.children Read only",
                "Returns a live HTMLCollection containing all objects of type Element that are children of the DocumentFragment object."
            ],
            [
                "DocumentFragment.firstElementChild Read only",
                "Returns the Element that is the first child of the DocumentFragment object, or null if there is none."
            ],
            [
                "DocumentFragment.lastElementChild Read only",
                "Returns the Element that is the last child of the DocumentFragment object, or null if there is none."
            ],
            [
                "DocumentFragment.append()",
                "Inserts a set of Node objects or DOMString objects after the last child of the document fragment."
            ],
            [
                "DocumentFragment.prepend()",
                "Inserts a set of Node objects or DOMString objects before the first child of the document fragment."
            ],
            [
                "DocumentFragment.querySelector()",
                "Returns the first Element node within the DocumentFragment, in document order, that matches the specified selectors."
            ],
            [
                "DocumentFragment.querySelectorAll()",
                "Returns a NodeList of all the Element nodes within the DocumentFragment that match the specified selectors."
            ],
            [
                "DocumentFragment.replaceChildren()",
                "Replaces the existing children of a DocumentFragment with a specified new set of children."
            ],
            [
                "DocumentFragment.getElementById()",
                "Returns the first Element node within the DocumentFragment, in document order, that matches the specified ID. Functionally equivalent to Document.getElementById()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DocumentTimeline",
        "",
        "DocumentTimeline",
        "",
        [
            [
                "DocumentTimeline()",
                "Creates a new DocumentTimeline object associated with the active document of the current browsing context."
            ],
            [
                "AnimationTimeline.currentTime",
                "Returns the time value in milliseconds for this timeline or null if it is inactive."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DocumentType",
        "",
        "DocumentType",
        "The DocumentType interface represents a Node containing a doctype.",
        [
            [
                "DocumentType.internalSubset Read only",
                "A DOMString of the internal subset, or null if there is none. Eg \"<!ELEMENT foo (bar)>\"."
            ],
            [
                "DocumentType.name Read only",
                "A DOMString, eg \"html\" for <!DOCTYPE HTML>."
            ],
            [
                "DocumentType.notations Read only",
                "A NamedNodeMap with notations declared in the DTD."
            ],
            [
                "DocumentType.publicId Read only",
                "A DOMString, eg \"-//W3C//DTD HTML 4.01//EN\", empty string for HTML5."
            ],
            [
                "DocumentType.systemId Read only",
                "A DOMString, eg \"http://www.w3.org/TR/html4/strict.dtd\", empty string for HTML5."
            ],
            [
                "DocumentType.after()",
                "Inserts a set of Node or DOMString objects in the children list of the DocumentType's parent, just after the DocumentType object."
            ],
            [
                "DocumentType.before()",
                "Inserts a set of Node or DOMString objects in the children list of the DocumentType's parent, just before the DocumentType object."
            ],
            [
                "DocumentType.remove()",
                "Removes the object from its parent children list."
            ],
            [
                "DocumentType.replaceWith()",
                "Replaces the document type with a set of given nodes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMError",
        "",
        "DOMError",
        "",
        [
            [
                "DOMError.name Read only",
                "Returns a DOMString representing one of the error type names (see below)."
            ],
            [
                "DOMError.message Read only",
                "Returns a DOMString representing a message or description associated with the given error type name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMException",
        "",
        "DOMException",
        "",
        [
            [
                "DOMException()",
                "Returns a DOMException object with a specified message and name."
            ],
            [
                "DOMException.code Read only",
                "Returns a short that contains one of the error code constants, or 0 if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the DOMException.name attribute."
            ],
            [
                "DOMException.message Read only",
                "Returns a DOMString representing a message or description associated with the given error name."
            ],
            [
                "DOMException.name Read only",
                "Returns a DOMString that contains one of the strings associated with an error name."
            ],
            [
                "IndexSizeError",
                "The index is not in the allowed range. For example, this can be thrown by the Range object. (Legacy code value: 1 and legacy constant name: INDEX_SIZE_ERR)"
            ],
            [
                "HierarchyRequestError",
                "The node tree hierarchy is not correct. (Legacy code value: 3 and legacy constant name: HIERARCHY_REQUEST_ERR)"
            ],
            [
                "WrongDocumentError",
                "The object is in the wrong Document. (Legacy code value: 4 and legacy constant name: WRONG_DOCUMENT_ERR)"
            ],
            [
                "InvalidCharacterError",
                "The string contains invalid characters. (Legacy code value: 5 and legacy constant name: INVALID_CHARACTER_ERR)"
            ],
            [
                "NoModificationAllowedError",
                "The object cannot be modified. (Legacy code value: 7 and legacy constant name: NO_MODIFICATION_ALLOWED_ERR)"
            ],
            [
                "NotFoundError",
                "The object cannot be found here. (Legacy code value: 8 and legacy constant name: NOT_FOUND_ERR)"
            ],
            [
                "NotSupportedError",
                "The operation is not supported. (Legacy code value: 9 and legacy constant name: NOT_SUPPORTED_ERR)"
            ],
            [
                "InvalidStateError",
                "The object is in an invalid state. (Legacy code value: 11 and legacy constant name: INVALID_STATE_ERR)"
            ],
            [
                "InUseAttributeError",
                "The attribute is in use. (Legacy code value: 10 and legacy constant name: INUSE_ATTRIBUTE_ERR)"
            ],
            [
                "SyntaxError",
                "The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR)"
            ],
            [
                "InvalidModificationError",
                "The object cannot be modified in this way. (Legacy code value: 13 and legacy constant name: INVALID_MODIFICATION_ERR)"
            ],
            [
                "NamespaceError",
                "The operation is not allowed by Namespaces in XML. (Legacy code value: 14 and legacy constant name: NAMESPACE_ERR)"
            ],
            [
                "InvalidAccessError",
                "The object does not support the operation or argument. (Legacy code value: 15 and legacy constant name: INVALID_ACCESS_ERR)"
            ],
            [
                "TypeMismatchError",
                "The type of the object does not match the expected type. (Legacy code value: 17 and legacy constant name: TYPE_MISMATCH_ERR) This value is deprecated; the JavaScript TypeError exception is now raised instead of a DOMException with this value."
            ],
            [
                "SecurityError",
                "The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)"
            ],
            [
                "NetworkError",
                "A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)"
            ],
            [
                "AbortError",
                "The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)"
            ],
            [
                "URLMismatchError",
                "The given URL does not match another URL. (Legacy code value: 21 and legacy constant name: URL_MISMATCH_ERR)"
            ],
            [
                "QuotaExceededError",
                "The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)"
            ],
            [
                "TimeoutError",
                "The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)"
            ],
            [
                "InvalidNodeTypeError",
                "The node is incorrect or has an incorrect ancestor for this operation. (Legacy code value: 24 and legacy constant name: INVALID_NODE_TYPE_ERR)"
            ],
            [
                "DataCloneError",
                "The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)"
            ],
            [
                "EncodingError",
                "The encoding or decoding operation failed (No legacy code value and constant name)."
            ],
            [
                "NotReadableError",
                "The input/output read operation failed (No legacy code value and constant name)."
            ],
            [
                "UnknownError",
                "The operation failed for an unknown transient reason (e.g. out of memory) (No legacy code value and constant name)."
            ],
            [
                "ConstraintError",
                "A mutation operation in a transaction failed because a constraint was not satisfied (No legacy code value and constant name)."
            ],
            [
                "DataError",
                "Provided data is inadequate (No legacy code value and constant name)."
            ],
            [
                "TransactionInactiveError",
                "A request was placed against a transaction that is currently not active or is finished (No legacy code value and constant name)."
            ],
            [
                "ReadOnlyError",
                "The mutating operation was attempted in a \"readonly\" transaction (No legacy code value and constant name)."
            ],
            [
                "VersionError",
                "An attempt was made to open a database using a lower version than the existing version (No legacy code value and constant name)."
            ],
            [
                "OperationError",
                "The operation failed for an operation-specific reason (No legacy code value and constant name)."
            ],
            [
                "NotAllowedError",
                "The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission (No legacy code value and constant name)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMHighResTimeStamp",
        "",
        "DOMHighResTimeStamp",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMImplementation",
        "",
        "DOMImplementation",
        "",
        [
            [
                "DOMImplementation.createDocument()",
                "Creates and returns an XMLDocument."
            ],
            [
                "DOMImplementation.createDocumentType()",
                "Creates and returns a DocumentType."
            ],
            [
                "DOMImplementation.createHTMLDocument()",
                "Creates and returns an HTML Document."
            ],
            [
                "DOMImplementation.hasFeature()",
                "Returns a Boolean indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns true. Old browsers are very inconsistent in their behavior."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMMatrix",
        "",
        "DOMMatrix (WebKitCSSMatrix)",
        "",
        [
            [
                "DOMMatrix()",
                "Creates and returns a new DOMMatrix object."
            ],
            [
                "is2D Read only",
                "A Boolean flag whose value is true if the matrix was initialized as a 2D matrix. If false, the matrix is 3D."
            ],
            [
                "isIdentity Read only",
                "A Boolean whose value is true if the matrix is the identity matrix. The identity matrix is one in which every value is 0 except those on the main diagonal from top-left to bottom-right corner (in other words, where the offsets in each direction are equal)."
            ],
            [
                "m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44",
                "Double-precision floating-point values representing each component of a 4×4 matrix, where m11 through m14 are the first column, m21 through m24 are the second column, and so forth."
            ],
            [
                "a, b, c, d, e, f",
                "Double-precision floating-point values representing the components of a 4×4 matrix which are required in order to perform 2D rotations and translations. These are aliases for specific components of a 4×4 matrix, as shown below. 2D 3D equivalent a m11 b m12 c m21 d m22 e m41 f m42"
            ],
            [
                "DOMMatrix.invertSelf()",
                "Modifies the matrix by inverting it. If the matrix can't be inverted, its components are all set to NaN, and is2D returns false."
            ],
            [
                "DOMMatrix.multiplySelf()",
                "Modifies the matrix by post-multiplying it with the specified DOMMatrix. This is equivalent to the dot product A⋅B, where matrix A is the source matrix and B is the matrix given as an input to the method. Returns itself."
            ],
            [
                "DOMMatrix.preMultiplySelf()",
                "Modifies the matrix by pre-multiplying it with the specified DOMMatrix. This is equivalent to the dot product B⋅A, where matrix A is the source matrix and B is the matrix given as an input to the method. Returns itself."
            ],
            [
                "DOMMatrix.translateSelf()",
                "Modifies the matrix by applying the specified vector. The default vector is [0, 0, 0]. Returns itself."
            ],
            [
                "DOMMatrix.scaleNonUniformSelf()",
                "Modifies the matrix by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both 1, but the scaling factor for X must be specified. The default origin is (0, 0, 0). Returns itself."
            ],
            [
                "DOMMatrix.scaleSelf()",
                "Modifies the matrix by applying the specified scaling factors, with the center located at the specified origin. Also returns itself. By default, the scaling factor is 1 for all three axes, and the origin is (0, 0, 0). Returns itself."
            ],
            [
                "DOMMatrix.scale3dSelf()",
                "Modifies the matrix by applying the specified scaling factor to all three axes, centered on the given origin. Returns itself."
            ],
            [
                "DOMMatrix.rotateSelf()",
                "Modifies the matrix by rotating itself around each axis by the specified number of degrees. Returns itself."
            ],
            [
                "DOMMatrix.rotateAxisAngleSelf()",
                "Modifies the matrix by rotating it by the specified angle around the given vector. Returns itself."
            ],
            [
                "DOMMatrix.rotateFromVectorSelf()",
                "Modifies the matrix by rotating it by the angle between the specified vector and (1, 0). Returns itself."
            ],
            [
                "DOMMatrix.setMatrixValue()",
                "Replaces the contents of the matrix with the matrix described by the specified transform or transforms. Returns itself."
            ],
            [
                "DOMMatrix.skewXSelf()",
                "Modifies the matrix by applying the specified skew transformation along the X-axis. Returns itself."
            ],
            [
                "DOMMatrix.skewYSelf()",
                "Modifies the matrix by applying the specified skew transformation along the Y-axis. Returns itself."
            ],
            [
                "fromFloat32Array()",
                "Creates a new mutable DOMMatrix object given an array of single-precision (32-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown."
            ],
            [
                "fromFloat64Array()",
                "Creates a new mutable DOMMatrix object given an array of double-precision (64-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown."
            ],
            [
                "fromMatrix()",
                "Creates a new mutable DOMMatrix object given an existing matrix or a DOMMatrixInit dictionary which provides the values for its properties."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMMatrixReadOnly",
        "",
        "DOMMatrixReadOnly",
        "",
        [
            [
                "is2D Read only",
                "A Boolean flag whose value is true if the matrix was initialized as a 2D matrix. If false, the matrix is 3D."
            ],
            [
                "isIdentity Read only",
                "A Boolean whose value is true if the matrix is the identity matrix. The identity matrix is one in which every value is 0 except those on the main diagonal from top-left to bottom-right corner (in other words, where the offsets in each direction are equal)."
            ],
            [
                "m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44",
                "Double-precision floating-point values representing each component of a 4×4 matrix, where m11 through m14 are the first column, m21 through m24 are the second column, and so forth."
            ],
            [
                "a, b, c, d, e, f",
                "Double-precision floating-point values representing the components of a 4×4 matrix which are required in order to perform 2D rotations and translations. These are aliases for specific components of a 4×4 matrix, as shown below. 2D 3D equivalent a m11 b m12 c m21 d m22 e m41 f m42"
            ],
            [
                "DOMMatrixReadOnly.flipX()",
                "Returns a new DOMMatrix created by flipping the source matrix around its X-axis. This is equivalent to multiplying the matrix by DOMMatrix(-1, 0, 0, 1, 0, 0). The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.flipY()",
                "Returns a new DOMMatrix created by flipping the source matrix around its Y-axis. This is equivalent to multiplying the matrix by DOMMatrix(1, 0, 0, -1, 0, 0). The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.inverse()",
                "Returns a new DOMMatrix created by inverting the source matrix. If the matrix cannot be inverted, the new matrix's components are all set to NaN and its is2D property is set to false. The original matrix is not altered."
            ],
            [
                "DOMMatrixReadOnly.multiply()",
                "Returns a new DOMMatrix created by computing the dot product of the source matrix and the specified matrix: A⋅B. If no matrix is specified as the multiplier, the matrix is multiplied by a matrix in which every element is 0 except the bottom-right corner and the element immediately above and to its left: m33 and m34. These have the default value of 1. The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.rotateAxisAngle()",
                "Returns a new DOMMatrix created by rotating the source matrix by the given angle around the specified vector. The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.rotate()",
                "Returns a new DOMMatrix created by rotating the source matrix around each of its axes by the specified number of degrees. The original matrix is not altered."
            ],
            [
                "DOMMatrixReadOnly.rotateFromVector()",
                "Returns a new DOMMatrix created by rotating the source matrix by the angle between the specified vector and (1, 0). The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.scale()",
                "Returns a new DOMMatrix created by scaling the source matrix by the amount specified for each axis, centered on the given origin. By default, the X and Z axes are scaled by 1 and the Y axis has no default scaling value. The default origin is (0, 0, 0). The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.scale3d()",
                "Returns a new DOMMatrix created by scaling the source 3D matrix by the given factor along all its axes, centered on the specified origin point. The default origin is (0, 0, 0). The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.scaleNonUniform()",
                "Returns a new DOMMatrix created by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both 1, but the scaling factor for X must be specified. The default origin is (0, 0, 0). The original matrix is not changed."
            ],
            [
                "DOMMatrixReadOnly.skewX()",
                "Returns a new DOMMatrix created by applying the specified skew transformation to the source matrix along its X-axis. The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.skewY()",
                "Returns a new DOMMatrix created by applying the specified skew transformation to the source matrix along its Y-axis. The original matrix is not modified."
            ],
            [
                "DOMMatrixReadOnly.toFloat32Array()",
                "Returns a new Float32Array containing all 16 elements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) which comprise the matrix. The elements are stored into the array as single-precision floating-point numbers in column-major (colexographical access, or \"colex\") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)"
            ],
            [
                "DOMMatrixReadOnly.toFloat64Array()",
                "Returns a new Float64Array containing all 16 elements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) which comprise the matrix. The elements are stored into the array as double-precision floating-point numbers in column-major (colexographical access access or \"colex\") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)"
            ],
            [
                "DOMMatrixReadOnly.toJSON()",
                "Returns a JSON representation of the DOMMatrixReadOnly object."
            ],
            [
                "DOMMatrixReadOnly.toString()",
                "Creates and returns a DOMString object which contains a string representation of the matrix in CSS matrix syntax, using the appropriate CSS matrix notation. See the matrix() CSS function for details on this syntax. For a 2D matrix, the elements a through f are listed, for a total of six values and the form matrix(a, b, c, d, e, f). For a 3D matrix, the returned string contains all 16 elements and takes the form matrix3d(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44). See the CSS matrix3d() function for details on the 3D notation's syntax. Throws an InvalidStateError exception if any of the elements in the matrix are non-finite (even if, in the case of a 2D matrix, the non-finite values are in elements not used by the 2D matrix representation)."
            ],
            [
                "DOMMatrixReadOnly.transformPoint()",
                "Transforms the specified point using the matrix, returning a new DOMPoint object containing the transformed point. Neither the matrix nor the original point are altered."
            ],
            [
                "DOMMatrixReadOnly.translate()",
                "Returns a new DOMMatrix containing a matrix calculated by translating the source matrix using the specified vector. By default, the vector is (0, 0, 0). The original matrix is not changed."
            ],
            [
                "fromFloat32Array()",
                "Creates a new mutable DOMMatrix object given an array of single-precision (32-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown."
            ],
            [
                "fromFloat64Array()",
                "Creates a new mutable DOMMatrix object given an array of double-precision (64-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown."
            ],
            [
                "fromMatrix()",
                "Creates a new mutable DOMMatrix object given an existing matrix or a DOMMatrixInit dictionary which provides the values for its properties. If no matrix is specified, the matrix is initialized with every element set to 0 except the bottom-right corner and the element immediately above and to its left: m33 and m34. These have the default value of 1."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMObject",
        "",
        "DOMObject",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMParser",
        "",
        "DOMParser",
        "",
        [
            [
                "DOMParser()",
                "Creates a new DOMParser object."
            ],
            [
                "DOMParser.parseFromString()",
                "Parses a string using either the HTML parser or the XML parser, returning an HTMLDocument or XMLDocument."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMPoint",
        "",
        "DOMPoint",
        "A DOMPoint object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. DOMPoint is based on DOMPointReadOnly but allows its properties' values to be changed.",
        [
            [
                "DOMPoint()",
                "Creates and returns a new DOMPoint object given the values of zero or more of its coordinate components and optionally the w perspective value. You can also use an existing DOMPoint or DOMPointReadOnly or a DOMPointInit dictionary to create a new point by calling the DOMPoint.fromPoint() static method."
            ],
            [
                "DOMPoint.fromPoint()",
                "Creates a new mutable DOMPoint object given an existing point (or a DOMPointInit dictionary) which provides the values for its properties."
            ],
            [
                "DOMPoint.x",
                "The x coordinate of the DOMPoint."
            ],
            [
                "DOMPoint.y",
                "The y coordinate of the DOMPoint."
            ],
            [
                "DOMPoint.z",
                "The z coordinate of the DOMPoint."
            ],
            [
                "DOMPoint.w",
                "The perspective value of the DOMPoint."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMPointInit",
        "",
        "DOMPointInit",
        "The DOMPointInit dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a DOMPoint or DOMPointReadOnly object.",
        [
            [
                "DOMPointInit.x",
                "An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0."
            ],
            [
                "DOMPointInit.y",
                "An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0."
            ],
            [
                "DOMPointInit.z",
                "An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0."
            ],
            [
                "DOMPointInit.w",
                "The point's w perspective value, given as an unrestricted floating-point number. The default is 1."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMPointReadOnly",
        "",
        "DOMPointReadOnly",
        "The DOMPointReadOnly interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.",
        [
            [
                "DOMPointReadOnly()",
                "Creates a new DOMPointReadOnly object given the values of its coordinates and perspective. To create a point using aDOMPointInit object, you can instead use DOMPointReadOnly.fromPoint()."
            ],
            [
                "DOMPointReadOnly.x Read only",
                "The point's horizontal coordinate, x."
            ],
            [
                "DOMPointReadOnly.y Read only",
                "The point's vertical coordinate, y."
            ],
            [
                "DOMPointReadOnly.z Read only",
                "The point's depth coordinate, z."
            ],
            [
                "DOMPointReadOnly.w Read only",
                "The point's perspective value, w."
            ],
            [
                "DOMPointReadOnly.fromPoint()",
                "A static method that creates a new DOMPointReadOnly object given the coordinates provided in the specified DOMPointInit object."
            ],
            [
                "matrixTransform()",
                "Applies a matrix transform specified as a DOMMatrixInit object to the DOMPointReadOnly object."
            ],
            [
                "toJSON()",
                "Returns a JSON representation of the DOMPointReadOnly object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMQuad",
        "",
        "DOMQuad",
        "",
        [
            [
                "DOMQuad.DOMQuad()",
                "Creates a new DOMQuad object."
            ],
            [
                "p1,p2,p3,p4 Read only",
                "are DOMPoint objects for each of the DOMQuad object's four corners."
            ],
            [
                "DOMQuad.fromRect()",
                "Returns a new DOMQuad object based on the passed set of coordinates."
            ],
            [
                "DOMQuad.fromQuad()",
                "Returns a new DOMQuad object based on the passed set of coordinates."
            ],
            [
                "DOMQuad.getBounds()",
                "Returns a DOMRect object with the coordinates and dimensions of the DOMQuad object."
            ],
            [
                "DOMQuad.toJSON()",
                "Returns a JSON representation of the DOMQuad object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMRect",
        "",
        "DOMRect",
        "",
        [
            [
                "DOMRect()",
                "Creates a new DOMRect object."
            ],
            [
                "DOMRectReadOnly.x",
                "The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle)."
            ],
            [
                "DOMRectReadOnly.y",
                "The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle)."
            ],
            [
                "DOMRectReadOnly.width",
                "The width of the DOMRect."
            ],
            [
                "DOMRectReadOnly.height",
                "The height of the DOMRect."
            ],
            [
                "DOMRectReadOnly.top",
                "Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative.)"
            ],
            [
                "DOMRectReadOnly.right",
                "Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative.)"
            ],
            [
                "DOMRectReadOnly.bottom",
                "Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative.)"
            ],
            [
                "DOMRectReadOnly.left",
                "Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative.)"
            ],
            [
                "DOMRectReadOnly.fromRect()",
                "Creates a new DOMRect object with a given location and dimensions."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMRectReadOnly",
        "",
        "DOMRectReadOnly",
        "",
        [
            [
                "DOMRectReadOnly()",
                "Defined to create a new DOMRectReadOnly object. Note that this constructor cannot be called by 3rd party JavaScript; doing so returns an \"Illegal constructor\" TypeError."
            ],
            [
                "DOMRectReadOnly.x Read only",
                "The x coordinate of the DOMRect's origin."
            ],
            [
                "DOMRectReadOnly.y Read only",
                "The y coordinate of the DOMRect's origin."
            ],
            [
                "DOMRectReadOnly.width Read only",
                "The width of the DOMRect."
            ],
            [
                "DOMRectReadOnly.height Read only",
                "The height of the DOMRect."
            ],
            [
                "DOMRectReadOnly.top Read only",
                "Returns the top coordinate value of the DOMRect (usually the same as y.)"
            ],
            [
                "DOMRectReadOnly.right Read only",
                "Returns the right coordinate value of the DOMRect (usually the same as x + width)."
            ],
            [
                "DOMRectReadOnly.bottom Read only",
                "Returns the bottom coordinate value of the DOMRect (usually the same as y + height)."
            ],
            [
                "DOMRectReadOnly.left Read only",
                "Returns the left coordinate value of the DOMRect (usually the same as x)."
            ],
            [
                "DOMRectReadOnly.fromRect()",
                "Creates a new DOMRect object with a given location and dimensions."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMString",
        "",
        "DOMString",
        "A DOMString is a sequence of 16-bit unsigned integers, typically interpreted as UTF-16 code units. This corresponds exactly to the JavaScript primitive String type. When a DOMString is provided to JavaScript, it maps directly to the corresponding String.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMStringList",
        "",
        "DOMStringList",
        "",
        [
            [
                "DOMStringList.length Read only",
                "Returns the length of the list."
            ],
            [
                "DOMStringList.item()",
                "Returns a DOMString."
            ],
            [
                "DOMStringList.contains()",
                "Returns Boolean indicating if the given string is in the list"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMStringMap",
        "",
        "DOMStringMap",
        "The DOMStringMap interface is used for the HTMLElement.dataset/SVGElement.dataset attribute, to represent data for custom attributes added to elements.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMTimeStamp",
        "",
        "DOMTimeStamp",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/DOMTokenList",
        "",
        "DOMTokenList",
        "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.",
        [
            [
                "DOMTokenList.length Read only",
                "Is an integer representing the number of objects stored in the object."
            ],
            [
                "DOMTokenList.value",
                "A stringifier property that returns the value of the list as a DOMString."
            ],
            [
                "DOMTokenList.item(index)",
                "Returns the item in the list by its index, or undefined if index is greater than or equal to the list's length."
            ],
            [
                "DOMTokenList.contains(token)",
                "Returns true if the list contains the given token, otherwise false."
            ],
            [
                "DOMTokenList.add(token1[, token2[, ...tokenN]])",
                "Adds the specified token(s) to the list."
            ],
            [
                "DOMTokenList.remove(token1[, token2[, ...tokenN]])",
                "Removes the specified token(s) from the list."
            ],
            [
                "DOMTokenList.replace(oldToken, newToken)",
                "Replaces token with newToken."
            ],
            [
                "DOMTokenList.supports(token)",
                "Returns true if a given token is in the associated attribute's supported tokens."
            ],
            [
                "DOMTokenList.toggle(token [, force])",
                "Removes token from the list if it exists, or adds token to the list if it doesn't. Returns a boolean indicating whether token is in the list after the operation."
            ],
            [
                "DOMTokenList.entries()",
                "Returns an iterator, allowing you to go through all key/value pairs contained in this object."
            ],
            [
                "DOMTokenList.forEach(callback [, thisArg])",
                "Executes a provided callback function once per DOMTokenList element."
            ],
            [
                "DOMTokenList.keys()",
                "Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object."
            ],
            [
                "DOMTokenList.values()",
                "Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DoubleRange",
        "",
        "DoubleRange",
        "The DoubleRange dictionary is used to define a range of permitted double-precision floating-point values for a property, with either or both a maximum and minimum value specified. The ConstrainDouble dictionary is based on this, augmenting it to support exact and ideal values as well.",
        [
            [
                "max",
                "A floating-point value specifying the largest permissible value of the property it describes."
            ],
            [
                "min",
                "A floating-point value specifying the smallest permissible value of the property it describes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DragEvent",
        "",
        "DragEvent",
        "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.",
        [
            [
                "DragEvent.dataTransfer Read only",
                "The data that is transferred during a drag and drop interaction."
            ],
            [
                "DragEvent()",
                "Creates a synthetic and untrusted DragEvent."
            ],
            [
                "drag",
                "This event is fired when an element or text selection is being dragged."
            ],
            [
                "dragend",
                "This event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key)."
            ],
            [
                "dragenter",
                "This event is fired when a dragged element or text selection enters a valid drop target."
            ],
            [
                "dragexit",
                "This event is fired when an element is no longer the drag operation's immediate selection target."
            ],
            [
                "dragleave",
                "This event is fired when a dragged element or text selection leaves a valid drop target."
            ],
            [
                "dragover",
                "This event is fired continuously when an element or text selection is being dragged and the mouse pointer is over a valid drop target (every 50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow movement) and 1ms (fast movement) approximately. This firing pattern is different than mouseover )."
            ],
            [
                "dragstart",
                "This event is fired when the user starts dragging an element or text selection."
            ],
            [
                "drop",
                "This event is fired when an element or text selection is dropped on a valid drop target."
            ],
            [
                "GlobalEventHandlers.ondrag",
                "A global event handler for the drag event."
            ],
            [
                "GlobalEventHandlers.ondragend",
                "A global event handler for the dragend event."
            ],
            [
                "GlobalEventHandlers.ondragenter",
                "A global event handler for the dragenter event."
            ],
            [
                "GlobalEventHandlers.ondragleave",
                "A global event handler for the dragexit event."
            ],
            [
                "GlobalEventHandlers.ondragleave",
                "A global event handler for the dragleave event."
            ],
            [
                "GlobalEventHandlers.ondragover",
                "A global event handler for the dragover event."
            ],
            [
                "GlobalEventHandlers.ondragstart",
                "A global event handler for the dragstart event."
            ],
            [
                "GlobalEventHandlers.ondrop",
                "A global event handler for the drop event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/DynamicsCompressorNode",
        "",
        "DynamicsCompressorNode",
        "",
        [
            [
                "DynamicsCompressorNode()",
                "Creates a new instance of an DynamicsCompressorNode object."
            ],
            [
                "DynamicsCompressorNode.threshold Read only",
                "Is a k-rate AudioParam representing the decibel value above which the compression will start taking effect."
            ],
            [
                "DynamicsCompressorNode.knee Read only",
                "Is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion."
            ],
            [
                "DynamicsCompressorNode.ratio Read only",
                "Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output."
            ],
            [
                "DynamicsCompressorNode.reduction Read only",
                "Is a float representing the amount of gain reduction currently applied by the compressor to the signal."
            ],
            [
                "DynamicsCompressorNode.attack Read only",
                "Is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB."
            ],
            [
                "DynamicsCompressorNode.release Read only",
                "Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EcdhKeyDeriveParams",
        "",
        "EcdhKeyDeriveParams",
        "The EcdhKeyDeriveParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the ECDH algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to ECDH."
            ],
            [
                "public",
                "A CryptoKey object representing the public key of the other entity."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EcdsaParams",
        "",
        "EcdsaParams",
        "The EcdsaParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify() when using the ECDSA algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to ECDSA."
            ],
            [
                "hash",
                "A DOMString. An identifier for the digest algorithm to use. This should be one of the following: SHA-256: selects the SHA-256 algorithm. SHA-384: selects the SHA-384 algorithm. SHA-512: selects the SHA-512 algorithm. Warning: SHA-1 is also supported here but the SHA-1 algorithm is considered vulnerable and should no longer be used."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EcKeyGenParams",
        "",
        "EcKeyGenParams",
        "The EcKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.",
        [
            [
                "name",
                "A DOMString. This should be set to ECDSA or ECDH, depending on the algorithm you want to use."
            ],
            [
                "namedCurve",
                "A DOMString representing the name of the elliptic curve to use. This may be any of the following names for NIST-approved curves: P-256 P-384 P-521"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EcKeyImportParams",
        "",
        "EcKeyImportParams",
        "",
        [
            [
                "name",
                "A DOMString. This should be set to ECDSA or ECDH, depending on the algorithm you want to use."
            ],
            [
                "namedCurve",
                "A DOMString representing the name of the elliptic curve to use. This may be any of the following names for NIST-approved curves: P-256 P-384 P-521"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EffectTiming",
        "",
        "EffectTiming",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "delay Optional",
                "The number of milliseconds to delay the start of the animation. Defaults to 0."
            ],
            [
                "direction Optional",
                "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to \"normal\"."
            ],
            [
                "duration Optional",
                "The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0."
            ],
            [
                "easing Optional",
                "The rate of the animation's change over time. Accepts the pre-defined values \"linear\", \"ease\", \"ease-in\", \"ease-out\", and \"ease-in-out\", or a custom \"cubic-bezier\" value like \"cubic-bezier(0.42, 0, 0.58, 1)\". Defaults to \"linear\"."
            ],
            [
                "endDelay Optional",
                "The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0."
            ],
            [
                "fill Optional",
                "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (\"backwards\"), retained after the animation has completed playing (\"forwards\"), or both. Defaults to \"none\"."
            ],
            [
                "iterationStart Optional",
                "Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0."
            ],
            [
                "iterations Optional",
                "The number of times the animation should repeat. Defaults to 1, and can also take a value of Infinity to make it repeat for as long as the element exists."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Element",
        "",
        "Element",
        "Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element. For example, the HTMLElement interface is the base interface for HTML elements, while the SVGElement interface is the basis for all SVG elements. Most functionality is specified further down the class hierarchy.",
        [
            [
                "Element.assignedSlotRead only",
                "Returns a HTMLSlotElement representing the <slot> the node is inserted in."
            ],
            [
                "Element.attributes Read only",
                "Returns a NamedNodeMap object containing the assigned attributes of the corresponding HTML element."
            ],
            [
                "Element.childElementCount Read only",
                "Returns the number of child elements of this element."
            ],
            [
                "Element.children Read only",
                "Returns the child elements of this element."
            ],
            [
                "Element.classList Read only",
                "Returns a DOMTokenList containing the list of class attributes."
            ],
            [
                "Element.className",
                "Is a DOMString representing the class of the element."
            ],
            [
                "Element.clientHeight Read only",
                "Returns a Number representing the inner height of the element."
            ],
            [
                "Element.clientLeft Read only",
                "Returns a Number representing the width of the left border of the element."
            ],
            [
                "Element.clientTop Read only",
                "Returns a Number representing the width of the top border of the element."
            ],
            [
                "Element.clientWidth Read only",
                "Returns a Number representing the inner width of the element."
            ],
            [
                "Element.firstElementChild Read only",
                "Returns the first child element of this element."
            ],
            [
                "Element.id",
                "Is a DOMString representing the id of the element."
            ],
            [
                "Element.innerHTML",
                "Is a DOMString representing the markup of the element's content."
            ],
            [
                "Element.lastElementChild Read only",
                "Returns the last child element of this element."
            ],
            [
                "Element.localName Read only",
                "A DOMString representing the local part of the qualified name of the element."
            ],
            [
                "Element.namespaceURI Read only",
                "The namespace URI of the element, or null if it is no namespace. Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the http://www.w3.org/1999/xhtml namespace in both HTML and XML trees."
            ],
            [
                "Element.nextElementSibling Read only",
                "Is an Element, the element immediately following the given one in the tree, or null if there's no sibling node."
            ],
            [
                "Element.outerHTML",
                "Is a DOMString representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string."
            ],
            [
                "Element.part",
                "Represents the part identifier(s) of the element (i.e. set using the part attribute), returned as a DOMTokenList."
            ],
            [
                "Element.prefix Read only",
                "A DOMString representing the namespace prefix of the element, or null if no prefix is specified."
            ],
            [
                "Element.previousElementSibling Read only",
                "Is a Element, the element immediately preceding the given one in the tree, or null if there is no sibling element."
            ],
            [
                "Element.scrollHeight Read only",
                "Returns a Number representing the scroll view height of an element."
            ],
            [
                "Element.scrollLeft",
                "Is a Number representing the left scroll offset of the element."
            ],
            [
                "Element.scrollLeftMax Read only",
                "Returns a Number representing the maximum left scroll offset possible for the element."
            ],
            [
                "Element.scrollTop",
                "A Number representing number of pixels the top of the document is scrolled vertically."
            ],
            [
                "Element.scrollTopMax Read only",
                "Returns a Number representing the maximum top scroll offset possible for the element."
            ],
            [
                "Element.scrollWidth Read only",
                "Returns a Number representing the scroll view width of the element."
            ],
            [
                "Element.shadowRootRead only",
                "Returns the open shadow root that is hosted by the element, or null if no open shadow root is present."
            ],
            [
                "Element.openOrClosedShadowRoot Read only",
                "Returns the shadow root that is hosted by the element, regardless if its open or closed. Available only to WebExtensions."
            ],
            [
                "Element.slot",
                "Returns the name of the shadow DOM slot the element is inserted in."
            ],
            [
                "Element.tagName Read only",
                "Returns a String with the name of the tag for the given element."
            ],
            [
                "Element.ariaAtomic",
                "Is a DOMString reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
            ],
            [
                "Element.ariaAutoComplete",
                "Is a DOMString reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."
            ],
            [
                "Element.ariaBusy",
                "Is a DOMString reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user."
            ],
            [
                "Element.ariaChecked",
                "Is a DOMString reflecting the aria-checked attribute, which indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets that have a checked state."
            ],
            [
                "Element.ariaColCount",
                "Is a DOMString reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid."
            ],
            [
                "Element.ariaColIndex",
                "Is a DOMString reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
            ],
            [
                "Element.ariaColIndexText",
                "Is a DOMString reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex."
            ],
            [
                "Element.ariaColSpan",
                "Is a DOMString reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
            ],
            [
                "Element.ariaCurrent",
                "Is a DOMString reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements."
            ],
            [
                "Element.ariaDescription",
                "Is a DOMString reflecting the aria-description attribute, which defines a string value that describes or annotates the current element."
            ],
            [
                "Element.ariaDisabled",
                "Is a DOMString reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
            ],
            [
                "Element.ariaExpanded",
                "Is a DOMString reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed."
            ],
            [
                "Element.ariaHasPopup",
                "Is a DOMString reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
            ],
            [
                "Element.ariaHidden",
                "Is a DOMString reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API."
            ],
            [
                "Element.ariaKeyShortcuts",
                "Is a DOMString reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
            ],
            [
                "Element.ariaLabel",
                "Is a DOMString reflecting the aria-label attribute, which defines a string value that labels the current element."
            ],
            [
                "Element.ariaLevel",
                "Is a DOMString reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure."
            ],
            [
                "Element.ariaLive",
                "Is a DOMString reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
            ],
            [
                "Element.ariaModal",
                "Is a DOMString reflecting the aria-modal attribute, which indicates whether an element is modal when displayed."
            ],
            [
                "Element.ariaMultiline",
                "Is a DOMString reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line."
            ],
            [
                "Element.ariaMultiSelectable",
                "Is a DOMString reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants."
            ],
            [
                "Element.ariaOrientation",
                "Is a DOMString reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
            ],
            [
                "Element.ariaPlaceholder",
                "Is a DOMString reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value."
            ],
            [
                "Element.ariaPosInSet",
                "Is a DOMString reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems."
            ],
            [
                "Element.ariaPressed",
                "Is a DOMString reflecting the aria-pressed attribute, which indicates the current \"pressed\" state of toggle buttons."
            ],
            [
                "Element.ariaReadOnly",
                "Is a DOMString reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable."
            ],
            [
                "Element.ariaRelevant",
                "Is a DOMString reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced."
            ],
            [
                "Element.ariaRequired",
                "Is a DOMString reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted."
            ],
            [
                "Element.ariaRoleDescription",
                "Is a DOMString reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element."
            ],
            [
                "Element.ariaRowCount",
                "Is a DOMString reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid."
            ],
            [
                "Element.ariaRowIndex",
                "Is a DOMString reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
            ],
            [
                "Element.ariaRowIndexText",
                "Is a DOMString reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex."
            ],
            [
                "Element.ariaRowSpan",
                "Is a DOMString reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
            ],
            [
                "Element.ariaSelected",
                "Is a DOMString reflecting the aria-selected attribute, which indicates the current \"selected\" state of elements that have a selected state."
            ],
            [
                "Element.ariaSetSize",
                "Is a DOMString reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems."
            ],
            [
                "Element.ariaSort",
                "Is a DOMString reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order."
            ],
            [
                "Element.ariaValueMax",
                "Is a DOMString reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget."
            ],
            [
                "Element.ariaValueMin",
                "Is a DOMString reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget."
            ],
            [
                "Element.ariaValueNow",
                "Is a DOMString reflecting the aria-valueNow attribute, which defines the current value for a range widget."
            ],
            [
                "Element.ariaValueText",
                "Is a DOMString reflecting the aria-valuetext attribute, which defines the human readable text alternative of aria-valuenow for a range widget."
            ],
            [
                "Element.onfullscreenchange",
                "An event handler for the fullscreenchange event, which is sent when the element enters or exits full-screen mode. This can be used to watch both for successful expected transitions, but also to watch for unexpected changes, such as when your app is running in the background."
            ],
            [
                "Element.onfullscreenerror",
                "An event handler for the fullscreenerror event, which is sent when an error occurs while attempting to change into full-screen mode."
            ],
            [
                "EventTarget.addEventListener()",
                "Registers an event handler to a specific event type on the element."
            ],
            [
                "Element.after()",
                "Inserts a set of Node or DOMString objects in the children list of the Element's parent, just after the Element."
            ],
            [
                "Element.attachShadow()",
                "Attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot."
            ],
            [
                "Element.animate()",
                "A shortcut method to create and run an animation on an element. Returns the created Animation object instance."
            ],
            [
                "Element.append()",
                "Inserts a set of Node objects or DOMString objects after the last child of the element."
            ],
            [
                "Element.before()",
                "Inserts a set of Node or DOMString objects in the children list of the Element's parent, just before the Element."
            ],
            [
                "Element.closest()",
                "Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter."
            ],
            [
                "Element.createShadowRoot()",
                "Creates a shadow DOM on the element, turning it into a shadow host. Returns a ShadowRoot."
            ],
            [
                "Element.computedStyleMap()",
                "Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration."
            ],
            [
                "EventTarget.dispatchEvent()",
                "Dispatches an event to this node in the DOM and returns a Boolean that indicates whether no handler canceled the event."
            ],
            [
                "Element.getAnimations()",
                "Returns an array of Animation objects currently active on the element."
            ],
            [
                "Element.getAttribute()",
                "Retrieves the value of the named attribute from the current node and returns it as an Object."
            ],
            [
                "Element.getAttributeNames()",
                "Returns an array of attribute names from the current element."
            ],
            [
                "Element.getAttributeNode()",
                "Retrieves the node representation of the named attribute from the current node and returns it as an Attr."
            ],
            [
                "Element.getAttributeNodeNS()",
                "Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an Attr."
            ],
            [
                "Element.getAttributeNS()",
                "Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an Object."
            ],
            [
                "Element.getBoundingClientRect()",
                "Returns the size of an element and its position relative to the viewport."
            ],
            [
                "Element.getBoxQuads()",
                "Returns a list of DOMQuad objects representing the CSS fragments of the node."
            ],
            [
                "Element.getClientRects()",
                "Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client."
            ],
            [
                "Element.getElementsByClassName()",
                "Returns a live HTMLCollection that contains all descendants of the current element that possess the list of classes given in the parameter."
            ],
            [
                "Element.getElementsByTagName()",
                "Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element."
            ],
            [
                "Element.getElementsByTagNameNS()",
                "Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element."
            ],
            [
                "Element.hasAttribute()",
                "Returns a Boolean indicating if the element has the specified attribute or not."
            ],
            [
                "Element.hasAttributeNS()",
                "Returns a Boolean indicating if the element has the specified attribute, in the specified namespace, or not."
            ],
            [
                "Element.hasAttributes()",
                "Returns a Boolean indicating if the element has one or more HTML attributes present."
            ],
            [
                "Element.hasPointerCapture()",
                "Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID."
            ],
            [
                "Element.insertAdjacentElement()",
                "Inserts a given element node at a given position relative to the element it is invoked upon."
            ],
            [
                "Element.insertAdjacentHTML()",
                "Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given."
            ],
            [
                "Element.insertAdjacentText()",
                "Inserts a given text node at a given position relative to the element it is invoked upon."
            ],
            [
                "Element.matches()",
                "Returns a Boolean indicating whether or not the element would be selected by the specified selector string."
            ],
            [
                "Element.prepend()",
                "Inserts a set of Node objects or DOMString objects before the first child of the element."
            ],
            [
                "Element.querySelector()",
                "Returns the first Node which matches the specified selector string relative to the element."
            ],
            [
                "Element.querySelectorAll()",
                "Returns a NodeList of nodes which match the specified selector string relative to the element."
            ],
            [
                "Element.releasePointerCapture()",
                "Releases (stops) pointer capture that was previously set for a specific pointer event."
            ],
            [
                "Element.remove()",
                "Removes the element from the children list of its parent."
            ],
            [
                "Element.removeAttribute()",
                "Removes the named attribute from the current node."
            ],
            [
                "Element.removeAttributeNode()",
                "Removes the node representation of the named attribute from the current node."
            ],
            [
                "Element.removeAttributeNS()",
                "Removes the attribute with the specified name and namespace, from the current node."
            ],
            [
                "EventTarget.removeEventListener()",
                "Removes an event listener from the element."
            ],
            [
                "Element.replaceChildren()",
                "Replaces the existing children of a Node with a specified new set of children."
            ],
            [
                "Element.replaceWith()",
                "Replaces the element in the children list of its parent with a set of Node or DOMString objects."
            ],
            [
                "Element.requestFullscreen()",
                "Asynchronously asks the browser to make the element full-screen."
            ],
            [
                "Element.requestPointerLock()",
                "Allows to asynchronously ask for the pointer to be locked on the given element."
            ],
            [
                "Element.scroll()",
                "Scrolls to a particular set of coordinates inside a given element."
            ],
            [
                "Element.scrollBy()",
                "Scrolls an element by the given amount."
            ],
            [
                "Element.scrollIntoView()",
                "Scrolls the page until the element gets into the view."
            ],
            [
                "Element.scrollTo()",
                "Scrolls to a particular set of coordinates inside a given element."
            ],
            [
                "Element.setAttribute()",
                "Sets the value of a named attribute of the current node."
            ],
            [
                "Element.setAttributeNode()",
                "Sets the node representation of the named attribute from the current node."
            ],
            [
                "Element.setAttributeNodeNS()",
                "Sets the node representation of the attribute with the specified name and namespace, from the current node."
            ],
            [
                "Element.setAttributeNS()",
                "Sets the value of the attribute with the specified name and namespace, from the current node."
            ],
            [
                "Element.setCapture()",
                "Sets up mouse event capture, redirecting all mouse events to this element."
            ],
            [
                "Element.setPointerCapture()",
                "Designates a specific element as the capture target of future pointer events."
            ],
            [
                "Element.toggleAttribute()",
                "Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element."
            ],
            [
                "cancel",
                "Fires on a <dialog> when the user instructs the browser that they wish to dismiss the current open dialog. For example, the browser might fire this event when the user presses the Esc key or clicks a \"Close dialog\" button which is part of the browser's UI. Also available via the oncancel property."
            ],
            [
                "error",
                "Fired when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid. Also available via the onerror property."
            ],
            [
                "scroll",
                "Fired when the document view or an element has been scrolled. Also available via the onscroll property."
            ],
            [
                "select",
                "Fired when some text has been selected. Also available via the onselect property."
            ],
            [
                "show",
                "Fired when a contextmenu event was fired on/bubbled to an element that has a contextmenu attribute. Also available via the onshow property."
            ],
            [
                "wheel",
                "Fired when the user rotates a wheel button on a pointing device (typically a mouse). Also available via the onwheel property."
            ],
            [
                "copy",
                "Fired when the user initiates a copy action through the browser's user interface. Also available via the oncopy property."
            ],
            [
                "cut",
                "Fired when the user initiates a cut action through the browser's user interface. Also available via the oncut property."
            ],
            [
                "paste",
                "Fired when the user initiates a paste action through the browser's user interface. Also available via the onpaste property."
            ],
            [
                "compositionend",
                "Fired when a text composition system such as an input method editor completes or cancels the current composition session."
            ],
            [
                "compositionstart",
                "Fired when a text composition system such as an input method editor starts a new composition session."
            ],
            [
                "compositionupdate",
                "Fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor."
            ],
            [
                "blur",
                "Fired when an element has lost focus. Also available via the onblur property."
            ],
            [
                "focus",
                "Fired when an element has gained focus. Also available via the onfocus property"
            ],
            [
                "focusin",
                "Fired when an element is about to gain focus."
            ],
            [
                "focusout",
                "Fired when an element is about to lose focus."
            ],
            [
                "fullscreenchange",
                "Sent to an Element when it transitions into or out of full-screen mode. Also available via the onfullscreenchange property."
            ],
            [
                "fullscreenerror",
                "Sent to an Element if an error occurs while attempting to switch it into or out of full-screen mode. Also available via the onfullscreenerror property."
            ],
            [
                "keydown",
                "Fired when a key is pressed. Also available via the onkeydown property."
            ],
            [
                "keypress",
                "Fired when a key that produces a character value is pressed down. Also available via the onkeypress property."
            ],
            [
                "keyup",
                "Fired when a key is released. Also available via the onkeyup property."
            ],
            [
                "auxclick",
                "Fired when a non-primary pointing device button (e.g., any mouse button other than the left button) has been pressed and released on an element. Also available via the onauxclick property."
            ],
            [
                "click",
                "Fired when a pointing device button (e.g., a mouse's primary button) is pressed and released on a single element. Also available via the onclick property."
            ],
            [
                "contextmenu",
                "Fired when the user attempts to open a context menu. Also available via the oncontextmenu property."
            ],
            [
                "dblclick",
                "Fired when a pointing device button (e.g., a mouse's primary button) is clicked twice on a single element. Also available via the ondblclick property."
            ],
            [
                "DOMActivate",
                "Occurs when an element is activated, for instance, through a mouse click or a keypress."
            ],
            [
                "mousedown",
                "Fired when a pointing device button is pressed on an element. Also available via the onmousedown property."
            ],
            [
                "mouseenter",
                "Fired when a pointing device (usually a mouse) is moved over the element that has the listener attached. Also available via the onmouseenter property."
            ],
            [
                "mouseleave",
                "Fired when the pointer of a pointing device (usually a mouse) is moved out of an element that has the listener attached to it. Also available via the onmouseleave property."
            ],
            [
                "mousemove",
                "Fired when a pointing device (usually a mouse) is moved while over an element. Also available via the onmousemove property."
            ],
            [
                "mouseout",
                "Fired when a pointing device (usually a mouse) is moved off the element to which the listener is attached or off one of its children. Also available via the onmouseout property."
            ],
            [
                "mouseover",
                "Fired when a pointing device is moved onto the element to which the listener is attached or onto one of its children. Also available via the onmouseover property."
            ],
            [
                "mouseup",
                "Fired when a pointing device button is released on an element. Also available via the onmouseup property."
            ],
            [
                "webkitmouseforcechanged",
                "Fired each time the amount of pressure changes on the trackpadtouchscreen."
            ],
            [
                "webkitmouseforcedown",
                "Fired after the mousedown event as soon as sufficient pressure has been applied to qualify as a \"force click\"."
            ],
            [
                "webkitmouseforcewillbegin",
                "Fired before the mousedown event."
            ],
            [
                "webkitmouseforceup",
                "Fired after the webkitmouseforcedown event as soon as the pressure has been reduced sufficiently to end the \"force click\"."
            ],
            [
                "touchcancel",
                "Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created). Also available via the ontouchcancel property."
            ],
            [
                "touchend",
                "Fired when one or more touch points are removed from the touch surface. Also available via the ontouchend property"
            ],
            [
                "touchmove",
                "Fired when one or more touch points are moved along the touch surface. Also available via the ontouchmove property"
            ],
            [
                "touchstart",
                "Fired when one or more touch points are placed on the touch surface. Also available via the ontouchstart property"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ElementInternals",
        "",
        "ElementInternals",
        "The ElementInternals interface of the Document_Object_Model gives web developers a way to allow custom elements to fully participate in HTML forms. It provides utilities for working with these elements in the same way you would work with any standard HTML form element, and also exposes the Accessibility Object Model to the element.",
        [
            [
                "ElementInternals.shadowRootRead only",
                "Returns the ShadowRoot object associated with this element."
            ],
            [
                "ElementInternals.formRead only",
                "Returns the HTMLFormElement associated with this element."
            ],
            [
                "ElementInternals.willValidateRead only",
                "Boolean which returns true if the element is a submittable element that is a candidate for constraint validation."
            ],
            [
                "ElementInternals.validityRead only",
                "Returns a ValidityState object which represents the different validity states the element can be in, with respect to constraint validation."
            ],
            [
                "ElementInternals.validationMessageRead only",
                "A string containing the validation message of this element."
            ],
            [
                "ElementInternals.labelsRead only",
                "Returns a NodeList of all of the label elements associated with this element."
            ],
            [
                "ElementInternals.ariaAtomic",
                "Is a DOMString reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
            ],
            [
                "ElementInternals.ariaAutoComplete",
                "Is a DOMString reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."
            ],
            [
                "ElementInternals.ariaBusy",
                "Is a DOMString reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user."
            ],
            [
                "ElementInternals.ariaChecked",
                "Is a DOMString reflecting the aria-checked attribute, which indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets that have a checked state."
            ],
            [
                "ElementInternals.ariaColCount",
                "Is a DOMString reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid."
            ],
            [
                "ElementInternals.ariaColIndex",
                "Is a DOMString reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
            ],
            [
                "ElementInternals.ariaColIndexText",
                "Is a DOMString reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex."
            ],
            [
                "ElementInternals.ariaColSpan",
                "Is a DOMString reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
            ],
            [
                "ElementInternals.ariaCurrent",
                "Is a DOMString reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements."
            ],
            [
                "ElementInternals.ariaDescription",
                "Is a DOMString reflecting the aria-description attribute, which defines a string value that describes or annotates the current ElementInternals."
            ],
            [
                "ElementInternals.ariaDisabled",
                "Is a DOMString reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
            ],
            [
                "ElementInternals.ariaExpanded",
                "Is a DOMString reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed."
            ],
            [
                "ElementInternals.ariaHasPopup",
                "Is a DOMString reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an ElementInternals."
            ],
            [
                "ElementInternals.ariaHidden",
                "Is a DOMString reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API."
            ],
            [
                "ElementInternals.ariaKeyShortcuts",
                "Is a DOMString reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an ElementInternals."
            ],
            [
                "ElementInternals.ariaLabel",
                "Is a DOMString reflecting the aria-label attribute, which defines a string value that labels the current ElementInternals."
            ],
            [
                "ElementInternals.ariaLevel",
                "Is a DOMString reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure."
            ],
            [
                "ElementInternals.ariaLive",
                "Is a DOMString reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
            ],
            [
                "ElementInternals.ariaModal",
                "Is a DOMString reflecting the aria-modal attribute, which indicates whether an element is modal when displayed."
            ],
            [
                "ElementInternals.ariaMultiline",
                "Is a DOMString reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line."
            ],
            [
                "ElementInternals.ariaMultiSelectable",
                "Is a DOMString reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants."
            ],
            [
                "ElementInternals.ariaOrientation",
                "Is a DOMString reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
            ],
            [
                "ElementInternals.ariaPlaceholder",
                "Is a DOMString reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value."
            ],
            [
                "ElementInternals.ariaPosInSet",
                "Is a DOMString reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems."
            ],
            [
                "ElementInternals.ariaPressed",
                "Is a DOMString reflecting the aria-pressed attribute, which indicates the current \"pressed\" state of toggle buttons."
            ],
            [
                "ElementInternals.ariaReadOnly",
                "Is a DOMString reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable."
            ],
            [
                "ElementInternals.ariaRelevant",
                "Is a DOMString reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced."
            ],
            [
                "ElementInternals.ariaRequired",
                "Is a DOMString reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted."
            ],
            [
                "ElementInternals.ariaRoleDescription",
                "Is a DOMString reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an Element."
            ],
            [
                "ElementInternals.ariaRowCount",
                "Is a DOMString reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid."
            ],
            [
                "ElementInternals.ariaRowIndex",
                "Is a DOMString reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
            ],
            [
                "ElementInternals.ariaRowIndexText",
                "Is a DOMString reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex."
            ],
            [
                "ElementInternals.ariaRowSpan",
                "Is a DOMString reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
            ],
            [
                "ElementInternals.ariaSelected",
                "Is a DOMString reflecting the aria-selected attribute, which indicates the current \"selected\" state of elements that have a selected state."
            ],
            [
                "ElementInternals.ariaSetSize",
                "Is a DOMString reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems."
            ],
            [
                "ElementInternals.ariaSort",
                "Is a DOMString reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order."
            ],
            [
                "ElementInternals.ariaValueMax",
                "Is a DOMString reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget."
            ],
            [
                "ElementInternals.ariaValueMin",
                "Is a DOMString reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget."
            ],
            [
                "ElementInternals.ariaValueNow",
                "Is a DOMString reflecting the aria-valueNow attribute, which defines the current value for a range widget."
            ],
            [
                "ElementInternals.ariaValueText",
                "Is a DOMString reflecting the aria-valuetext attribute, which defines the human readable text alternative of aria-valuenow for a range widget."
            ],
            [
                "ElementInternals.setFormValue()",
                "Sets the element's submission value and state, communicating these to the user agent."
            ],
            [
                "ElementInternals.setValidity()",
                "Sets the validity of the element."
            ],
            [
                "ElementInternals.checkValidity()",
                "Checks if an element meets any constraint validation rules applied to it."
            ],
            [
                "ElementInternals.reportValidity()",
                "Checks if an element meets any constraint validation rules applied to it, and also sends a validation message to the user agent."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ErrorEvent",
        "",
        "ErrorEvent",
        "",
        [
            [
                "ErrorEvent.message Read only",
                "Is a DOMString containing a human-readable error message describing the problem."
            ],
            [
                "ErrorEvent.filename Read only",
                "Is a DOMString containing the name of the script file in which the error occurred."
            ],
            [
                "ErrorEvent.lineno Read only",
                "Is an integer containing the line number of the script file on which the error occurred."
            ],
            [
                "ErrorEvent.colno Read only",
                "Is an integer containing the column number of the script file on which the error occurred."
            ],
            [
                "ErrorEvent.error Read only",
                "Is a JavaScript Object that is concerned by the event."
            ],
            [
                "ErrorEvent()",
                "Creates an ErrorEvent event with the given parameters."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Event",
        "",
        "Event",
        "",
        [
            [
                "Event()",
                "Creates an Event object, returning it to the caller."
            ],
            [
                "Event.bubbles Read only",
                "A boolean indicating whether or not the event bubbles up through the DOM."
            ],
            [
                "Event.cancelBubble",
                "A historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event."
            ],
            [
                "Event.cancelable Read only",
                "A boolean indicating whether the event is cancelable."
            ],
            [
                "Event.composed Read only",
                "A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM."
            ],
            [
                "Event.currentTarget Read only",
                "A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting."
            ],
            [
                "Event.deepPath",
                "An Array of DOM Nodes through which the event has bubbled."
            ],
            [
                "Event.defaultPrevented Read only",
                "Indicates whether or not the call to event.preventDefault() canceled the event."
            ],
            [
                "Event.eventPhase Read only",
                "Indicates which phase of the event flow is being processed."
            ],
            [
                "Event.explicitOriginalTarget Read only",
                "The explicit original target of the event (Mozilla-specific.)"
            ],
            [
                "Event.originalTarget Read only",
                "The original target of the event, before any retargetings. (Mozilla-specific.)"
            ],
            [
                "Event.returnValue",
                "A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use Event.preventDefault() and Event.defaultPrevented instead, but you can use returnValue if you choose to do so."
            ],
            [
                "Event.srcElement",
                "A non-standard alias (from old versions of Microsoft Internet Explorer) for Event.target. Some other browsers are starting to support it for web compatibility purposes."
            ],
            [
                "Event.target Read only",
                "A reference to the target to which the event was originally dispatched."
            ],
            [
                "Event.timeStamp Read only",
                "The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead."
            ],
            [
                "Event.type Read only",
                "The name of the event. Case-insensitive."
            ],
            [
                "Event.isTrusted Read only",
                "Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, like Event.initEvent)."
            ],
            [
                "Event.scoped Read only",
                "A Boolean indicating whether the given event will bubble across through the shadow root into the standard DOM. Use composed instead."
            ],
            [
                "Event.composedPath()",
                "Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed."
            ],
            [
                "Event.preventDefault()",
                "Cancels the event (if it is cancelable)."
            ],
            [
                "Event.stopImmediatePropagation()",
                "For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance)."
            ],
            [
                "Event.stopPropagation()",
                "Stops the propagation of events further along in the DOM."
            ],
            [
                "Event.initEvent()",
                "Initializes the value of an Event created. If the event has already been dispatched, this method does nothing."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EventListener",
        "",
        "EventListener",
        "The EventListener interface represents an object that can handle an event dispatched by an EventTarget object.",
        [
            [
                "EventListener.handleEvent()",
                "A function that is called whenever an event of the specified type occurs."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EventSource",
        "",
        "EventSource",
        "The EventSource interface is web content's interface to server-sent events. An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format. The connection remains open until closed by calling EventSource.close().",
        [
            [
                "EventSource()",
                "Creates a new EventSource to handle receiving server-sent events from a specified URL, optionally in credentials mode."
            ],
            [
                "EventSource.readyState Read only",
                "A number representing the state of the connection. Possible values are CONNECTING (0), OPEN (1), or CLOSED (2)."
            ],
            [
                "EventSource.url Read only",
                "A DOMString representing the URL of the source."
            ],
            [
                "EventSource.withCredentials Read only",
                "A Boolean indicating whether the EventSource object was instantiated with cross-origin (CORS) credentials set (true), or not (false, the default)."
            ],
            [
                "EventSource.onerror",
                "Is an event handler called when an error occurs and the error event is dispatched on an EventSource object."
            ],
            [
                "EventSource.onmessage",
                "Is an event handler called when a message event is received, that is when a message is coming from the source."
            ],
            [
                "EventSource.onopen",
                "Is an event handler called when an open event is received, that is when the connection was just opened."
            ],
            [
                "EventSource.close()",
                "Closes the connection, if any, and sets the readyState attribute to CLOSED. If the connection is already closed, the method does nothing."
            ],
            [
                "error",
                "Fired when a connection to an event source failed to open."
            ],
            [
                "message",
                "Fired when data is received from an event source."
            ],
            [
                "open",
                "Fired when a connection to an event source has opened."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EventTarget",
        "",
        "EventTarget",
        "",
        [
            [
                "EventTarget()",
                "Creates a new EventTarget object instance."
            ],
            [
                "EventTarget.addEventListener()",
                "Registers an event handler of a specific event type on the EventTarget."
            ],
            [
                "EventTarget.removeEventListener()",
                "Removes an event listener from the EventTarget."
            ],
            [
                "EventTarget.dispatchEvent()",
                "Dispatches an event to this EventTarget."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_blend_minmax",
        "",
        "EXT_blend_minmax",
        "The EXT_blend_minmax extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.",
        [
            [
                "ext.MIN_EXT",
                "Produces the minimum color components of the source and destination colors."
            ],
            [
                "ext.MAX_EXT",
                "Produces the maximum color components of the source and destination colors."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_color_buffer_float",
        "",
        "EXT_color_buffer_float",
        "The EXT_color_buffer_float extension is part of WebGL and adds the ability to render a variety of floating point formats.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_color_buffer_half_float",
        "",
        "EXT_color_buffer_half_float",
        "The EXT_color_buffer_half_float extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.",
        [
            [
                "ext.RGBA16F_EXT",
                "RGBA 16-bit floating-point color-renderable format."
            ],
            [
                "ext.RGB16F_EXT",
                "RGB 16-bit floating-point color-renderable format."
            ],
            [
                "ext.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT",
                "?"
            ],
            [
                "ext.UNSIGNED_NORMALIZED_EXT",
                "?"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_disjoint_timer_query",
        "",
        "EXT_disjoint_timer_query",
        "The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.",
        [
            [
                "GLuint64EXT",
                "Unsigned 64-bit integer number."
            ],
            [
                "ext.QUERY_COUNTER_BITS_EXT",
                "A GLint indicating the number of bits used to hold the query result for the given target."
            ],
            [
                "ext.CURRENT_QUERY_EXT",
                "A WebGLQuery object, which is the currently active query for the given target."
            ],
            [
                "ext.QUERY_RESULT_EXT",
                "A GLuint64EXT containing the query result."
            ],
            [
                "ext.QUERY_RESULT_AVAILABLE_EXT",
                "A GLboolean indicating whether or not a query result is available."
            ],
            [
                "ext.TIME_ELAPSED_EXT",
                "Elapsed time (in nanoseconds)."
            ],
            [
                "ext.TIMESTAMP_EXT",
                "The current time."
            ],
            [
                "ext.GPU_DISJOINT_EXT",
                "A GLboolean indicating whether or not the GPU performed any disjoint operation."
            ],
            [
                "ext.createQueryEXT()",
                "Creates a new WebGLTimerQueryEXT."
            ],
            [
                "ext.deleteQueryEXT()",
                "Deletes a given WebGLTimerQueryEXT."
            ],
            [
                "ext.isQueryEXT()",
                "Returns true if a given object is a valid WebGLTimerQueryEXT."
            ],
            [
                "ext.beginQueryEXT()",
                "The timer starts when all commands prior to beginQueryEXT have been fully executed."
            ],
            [
                "ext.endQueryEXT()",
                "The timer stops when all commands prior to endQueryEXT have been fully executed."
            ],
            [
                "ext.queryCounterEXT()",
                "Records the current time into the corresponding query object."
            ],
            [
                "ext.getQueryEXT()",
                "Returns information about a query target."
            ],
            [
                "ext.getQueryObjectEXT()",
                "Return the state of a query object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_float_blend",
        "",
        "EXT_float_blend",
        "The WebGL API's EXT_float_blend extension allows blending and draw buffers with 32-bit floating-point components.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_frag_depth",
        "",
        "EXT_frag_depth",
        "The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_shader_texture_lod",
        "",
        "EXT_shader_texture_lod",
        "The EXT_shader_texture_lod extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_sRGB",
        "",
        "EXT_sRGB",
        "The EXT_sRGB extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.",
        [
            [
                "ext.SRGB_EXT",
                "Unsized sRGB format that leaves the precision up to the driver."
            ],
            [
                "ext.SRGB_ALPHA_EXT",
                "Unsized sRGB format with unsized alpha component."
            ],
            [
                "ext.SRGB8_ALPHA8_EXT",
                "Sized (8-bit) sRGB and alpha formats."
            ],
            [
                "ext.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT",
                "Returns the framebuffer color encoding (gl.LINEAR or ext.SRGB_EXT)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_texture_compression_bptc",
        "",
        "EXT_texture_compression_bptc",
        "The EXT_texture_compression_bptc extension is part of the WebGL API and exposes 4 BPTC compressed texture formats. These compression formats are called BC7 and BC6H in Microsoft's DirectX API.",
        [
            [
                "ext.COMPRESSED_RGBA_BPTC_UNORM_EXT",
                "Compresses 8-bit fixed-point data. Each 4x4 block of texels consists of 128 bits of RGBA or image data. See also BC7 format."
            ],
            [
                "ext.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT",
                "Compresses 8-bit fixed-point data. Each 4x4 block of texels consists of 128 bits of SRGB_ALPHA or image data. See also BC7 format."
            ],
            [
                "ext.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT",
                "Compresses high dynamic range signed floating point values. Each 4x4 block of texels consists of 128 bits of RGB data. It only contains RGB data, so the returned alpha value is 1.0. See also BC6H format."
            ],
            [
                "ext.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT",
                "Compresses high dynamic range unsigned floating point values. Each 4x4 block of texels consists of 128 bits of RGB data. It only contains RGB data, so the returned alpha value is 1.0. See also BC6H format."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_texture_compression_rgtc",
        "",
        "EXT_texture_compression_rgtc",
        "The EXT_texture_compression_rgtc extension is part of the WebGL API and exposes 4 RGTC compressed texture formats. RGTC is a block-based texture compression format suited for unsigned and signed red and red-green textures (Red-Green Texture Compression).",
        [
            [
                "ext.COMPRESSED_RED_RGTC1_EXT",
                "Each 4x4 block of texels consists of 64 bits of unsigned red image data. See also BC4 unsigned."
            ],
            [
                "ext.COMPRESSED_SIGNED_RED_RGTC1_EXT",
                "Each 4x4 block of texels consists of 64 bits of signed red image data. See also BC4 signed."
            ],
            [
                "ext.COMPRESSED_RED_GREEN_RGTC2_EXT",
                "Each 4x4 block of texels consists of 64 bits of compressed unsigned red image data followed by 64 bits of compressed unsigned green image data. See also BC5 unsigned."
            ],
            [
                "ext.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT",
                "Each 4x4 block of texels consists of 64 bits of compressed signed red image data followed by 64 bits of compressed signed green image data. See also BC5 signed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_texture_filter_anisotropic",
        "",
        "EXT_texture_filter_anisotropic",
        "The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).",
        [
            [
                "ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT",
                "This is the pname argument to the gl.getParameter() call, and it returns the maximum available anisotropy."
            ],
            [
                "ext.TEXTURE_MAX_ANISOTROPY_EXT",
                "This is the pname argument to the gl.getTexParameter() and gl.texParameterf() / gl.texParameteri() calls and sets the desired maximum anisotropy for a texture."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/EXT_texture_norm16",
        "",
        "EXT_texture_norm16",
        "The EXT_texture_norm16 extension is part of the WebGL API and provides a set of new 16-bit signed normalized and unsigned normalized formats (fixed-point texture, renderbuffer and texture buffer).",
        [
            [
                "ext.R16_EXT",
                "Red 16-bit unsigned format. Color-renderable."
            ],
            [
                "ext.RG16_EXT",
                "RG 16-bit unsigned format. Color-renderable."
            ],
            [
                "ext.RGB16_EXT",
                "RGB 16-bit unsigned format."
            ],
            [
                "ext.RGBA16_EXT",
                "RGBA 16-bit unsigned format. Color-renderable."
            ],
            [
                "ext.R16_SNORM_EXT",
                "Red 16-bit signed normalized format."
            ],
            [
                "ext.RG16_SNORM__EXT",
                "RG 16-bit signed normalized format."
            ],
            [
                "ext.RGB16_SNORM__EXT",
                "RGB 16-bit signed normalized format."
            ],
            [
                "ext.RGBA16_SNORM__EXT",
                "RGBA 16-bit signed normalized format."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ExtendableCookieChangeEvent",
        "",
        "ExtendableCookieChangeEvent",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "ExtendableCookieChangeEvent.ExtendableCookieChangeEvent()",
                "Creates a new ExtendableCookieChangeEvent."
            ],
            [
                "ExtendableCookieChangeEvent.changedRead only",
                "Returns an array containing the changed cookies."
            ],
            [
                "ExtendableCookieChangeEvent.deletedRead only",
                "Returns an array containing the deleted cookies."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ExtendableEvent",
        "",
        "ExtendableEvent",
        "The ExtendableEvent interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.",
        [
            [
                "ExtendableEvent()",
                "Creates a new ExtendableEvent object."
            ],
            [
                "ExtendableEvent.waitUntil()",
                "Extends the lifetime of the event. It is intended to be called in the install event handler for the installing worker and on the activate event handler for the active worker."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ExtendableMessageEvent",
        "",
        "ExtendableMessageEvent",
        "The ExtendableMessageEvent interface of the Service Worker API represents the event object of a message event fired on a service worker (when a message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.",
        [
            [
                "ExtendableMessageEvent()",
                "Creates a new ExtendableMessageEvent object instance."
            ],
            [
                "ExtendableMessageEvent.data Read only",
                "Returns the event's data. It can be any data type."
            ],
            [
                "ExtendableMessageEvent.origin Read only",
                "Returns the origin of the Client that sent the message."
            ],
            [
                "ExtendableMessageEvent.lastEventId Read only",
                "Represents, in server-sent events, the last event ID of the event source. This is an empty string."
            ],
            [
                "ExtendableMessageEvent.source Read only",
                "Returns a reference to the Client object that sent the message."
            ],
            [
                "ExtendableMessageEvent.ports Read only",
                "Returns the array containing the MessagePort objects representing the ports of the associated message channel."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FeaturePolicy",
        "",
        "FeaturePolicy",
        "",
        [
            [
                "FeaturePolicy.allowsFeature",
                "Returns a Boolean that indicates whether or not a particular feature is enabled in the specified context."
            ],
            [
                "FeaturePolicy.features",
                "Returns a list of names of all features supported by the User Agent. Feature whose name appears on the list might not be allowed by the Feature Policy of the current execution context and/or might not be accessible because of user's permissions."
            ],
            [
                "FeaturePolicy.allowedFeatures",
                "Returns a list of names of all features supported by the User Agent and allowed by the Feature Policy. Note that features appearing on this list might still be behind a user permission."
            ],
            [
                "FeaturePolicy.getAllowlistForFeature",
                "Returns the Allow list for the specified feature."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FederatedCredential",
        "",
        "FederatedCredential",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "FederatedCredential()",
                "Creates a new FederatedCredential object."
            ],
            [
                "FederatedCredential.provider Read only",
                "Returns a USVString containing a credential's federated identity provider."
            ],
            [
                "FederatedCredential.protocol Read only",
                "Returns a DOMString containing a credential's federated identity protocol."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FetchEvent",
        "",
        "FetchEvent",
        "",
        [
            [
                "FetchEvent()",
                "Creates a new FetchEvent object. This constructor is not typically used. The browser creates these objects itself and provides them to fetch event callbacks."
            ],
            [
                "FetchEvent.clientId Read only",
                "The id of the same-origin client that initiated the fetch."
            ],
            [
                "FetchEvent.preloadResponse Read only",
                "A Promise for a Response, or undefined if this fetch is not a navigation, or navigation preload is not enabled."
            ],
            [
                "FetchEvent.replacesClientId Read only",
                "The id of the client that is being replaced during a page navigation."
            ],
            [
                "FetchEvent.resultingClientId Read only",
                "The id of the client that replaces the previous client during a page navigation."
            ],
            [
                "FetchEvent.request Read only",
                "The Request the browser intends to make."
            ],
            [
                "FetchEvent.respondWith()",
                "Prevent the browser's default fetch handling, and provide (a promise for) a response yourself."
            ],
            [
                "ExtendableEvent.waitUntil()",
                "Extends the lifetime of the event. Used to notify the browser of tasks that extend beyond the returning of a response, such as streaming and caching."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/File",
        "",
        "File",
        "The File interface provides information about files and allows JavaScript in a web page to access their content.",
        [
            [
                "File()",
                "Returns a newly constructed File."
            ],
            [
                "File.prototype.lastModified Read only",
                "Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight)."
            ],
            [
                "File.prototype.lastModifiedDate Read only",
                "Returns the last modified Date of the file referenced by the File object."
            ],
            [
                "File.prototype.nameRead only",
                "Returns the name of the file referenced by the File object."
            ],
            [
                "File.prototype.webkitRelativePath Read only",
                "Returns the path the URL of the File is relative to."
            ],
            [
                "File.prototype.size Read only",
                "Returns the size of the file in bytes."
            ],
            [
                "File.prototype.type Read only",
                "Returns the MIME type of the file."
            ],
            [
                "Blob.prototype.slice([start[, end[, contentType]]])",
                "Returns a new Blob object containing the data in the specified range of bytes of the source Blob."
            ],
            [
                "Blob.prototype.stream()",
                "Transforms the File into a ReadableStream that can be used to read the File contents."
            ],
            [
                "Blob.prototype.text()",
                "Transforms the File into a stream and reads it to completion. It returns a promise that resolves with a USVString (text)."
            ],
            [
                "Blob.prototype.arrayBuffer()",
                "Transforms the File into a stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileEntrySync",
        "",
        "FileEntrySync",
        "",
        [
            [
                "FileWriterSync",
                ""
            ],
            [
                "File",
                ""
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileError",
        "",
        "FileError",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/FileException",
        "",
        "FileException",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/FileList",
        "",
        "FileList",
        "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
        [
            [
                "index",
                "The zero-based index of the file to retrieve from the list."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileReader",
        "",
        "FileReader",
        "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.",
        [
            [
                "FileReader()",
                "Returns a newly constructed FileReader."
            ],
            [
                "FileReader.error Read only",
                "A DOMException representing the error that occurred while reading the file."
            ],
            [
                "FileReader.readyState Read only",
                "A number indicating the state of the FileReader. This is one of the following: EMPTY 0 No data has been loaded yet. LOADING 1 Data is currently being loaded. DONE 2 The entire read request has been completed."
            ],
            [
                "FileReader.result Read only",
                "The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation."
            ],
            [
                "FileReader.onabort",
                "A handler for the abort event. This event is triggered each time the reading operation is aborted."
            ],
            [
                "FileReader.onerror",
                "A handler for the error event. This event is triggered each time the reading operation encounter an error."
            ],
            [
                "FileReader.onload",
                "A handler for the load event. This event is triggered each time the reading operation is successfully completed."
            ],
            [
                "FileReader.onloadstart",
                "A handler for the loadstart event. This event is triggered each time the reading is starting."
            ],
            [
                "FileReader.onloadend",
                "A handler for the loadend event. This event is triggered each time the reading operation is completed (either in success or failure)."
            ],
            [
                "FileReader.onprogress",
                "A handler for the progress event. This event is triggered while reading a Blob content."
            ],
            [
                "FileReader.abort()",
                "Aborts the read operation. Upon return, the readyState will be DONE."
            ],
            [
                "FileReader.readAsArrayBuffer()",
                "Starts reading the contents of the specified Blob, once finished, the result attribute contains an ArrayBuffer representing the file's data."
            ],
            [
                "FileReader.readAsBinaryString()",
                "Starts reading the contents of the specified Blob, once finished, the result attribute contains the raw binary data from the file as a string."
            ],
            [
                "FileReader.readAsDataURL()",
                "Starts reading the contents of the specified Blob, once finished, the result attribute contains a data: URL representing the file's data."
            ],
            [
                "FileReader.readAsText()",
                "Starts reading the contents of the specified Blob, once finished, the result attribute contains the contents of the file as a text string. An optional encoding name can be specified."
            ],
            [
                "abort",
                "Fired when a read has been aborted, for example because the program called FileReader.abort(). Also available via the onabort property."
            ],
            [
                "error",
                "Fired when the read failed due to an error. Also available via the onerror property."
            ],
            [
                "load",
                "Fired when a read has completed successfully. Also available via the onload property."
            ],
            [
                "loadend",
                "Fired when a read has completed, successfully or not. Also available via the onloadend property."
            ],
            [
                "loadstart",
                "Fired when a read has started. Also available via the onloadstart property."
            ],
            [
                "progress",
                "Fired periodically as data is read. Also available via the onprogress property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileReaderSync",
        "",
        "FileReaderSync",
        "The FileReaderSync interface allows to read File or Blob objects synchronously.",
        [
            [
                "FileReaderSync.readAsArrayBuffer()",
                "This method converts a specified Blob or a File into an ArrayBuffer representing the input data as a binary string."
            ],
            [
                "FileReaderSync.readAsBinaryString()",
                "This method converts a specified Blob or a File into a DOMString representing the input data as a binary string. This method is deprecated, consider using readAsArrayBuffer() instead."
            ],
            [
                "FileReaderSync.readAsText()",
                "This method converts a specified Blob or a File into a DOMString representing the input data as a text string. The optional encoding parameter indicates the encoding to be used (e.g., iso-8859-1 or UTF-8). If not present, the method will apply a detection algorithm for it."
            ],
            [
                "FileReaderSync.readAsDataURL()",
                "This method converts a specified Blob or a File into a DOMString representing the input data as a data URL."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileRequest",
        "",
        "FileRequest",
        "",
        [
            [
                "FileRequest.lockedFile Read only",
                "The LockedFile object from which the request was started."
            ],
            [
                "FileRequest.onprogress",
                "A callback handler called repeatedly while the operation represented by the FileRequest is in progress."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystem",
        "",
        "FileSystem",
        "",
        [
            [
                "FileSystem.name Read only",
                "A USVString representing the file system's name. This name is unique among the entire list of exposed file systems."
            ],
            [
                "FileSystem.root Read only",
                "A FileSystemDirectoryEntry object which represents the file system's root directory. Through this object, you can gain access to all files and directories in the file system."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemDirectoryEntry",
        "",
        "FileSystemDirectoryEntry",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "createReader()",
                "Creates a FileSystemDirectoryReader object which can be used to read the entries in this directory."
            ],
            [
                "getDirectory()",
                "Returns a FileSystemDirectoryEntry object representing a directory located at a given path, relative to the directory on which the method is called."
            ],
            [
                "getFile()",
                "Returns a FileSystemFileEntry object representing a file located within the directory's hierarchy, given a path relative to the directory on which the method is called."
            ],
            [
                "removeRecursively()",
                "Deletes a directory and all of its contents, including the contents of subdirectories. This has been removed from the spec."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemDirectoryHandle",
        "",
        "FileSystemDirectoryHandle",
        "This page is not complete.",
        [
            [
                "FileSystemDirectoryHandle.entries()",
                "Returns an Array of a given object's own enumerable property [key, value] pairs"
            ],
            [
                "FileSystemDirectoryHandle.getFileHandle()",
                "Returns a FileSystemFileHandle for a file with the specified name, within the directory the method is called."
            ],
            [
                "FileSystemDirectoryHandle.getDirectoryHandle()",
                "Returns a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called."
            ],
            [
                "FileSystemDirectoryHandle.keys()",
                "Returns a new Array Iterator containing the keys for each item in FileSystemDirectoryHandle."
            ],
            [
                "FileSystemDirectoryHandle.removeEntry()",
                "Attempts to remove an entry if the directory handle contains a file or directory called the name specified."
            ],
            [
                "FileSystemDirectoryHandle.resolve()",
                "Returns an Array of directory names from the parent handle to the specified child entry, with the name of the child entry as the last array item."
            ],
            [
                "FileSystemDirectoryHandle.values()",
                "Returns a new Array Iterator containing the values for each index in the FileSystemDirectoryHandle object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemDirectoryReader",
        "",
        "FileSystemDirectoryReader",
        "",
        [
            [
                "readEntries()",
                "Returns an array containing some number of the directory's entries. Each item in the array is an object based on FileSystemEntry—typically either FileSystemFileEntry or FileSystemDirectoryEntry."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemEntry",
        "",
        "FileSystemEntry",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "filesystem Read only",
                "A FileSystem object representing the file system in which the entry is located."
            ],
            [
                "fullPath Read only",
                "A USVString object which provides the full, absolute path from the file system's root to the entry; it can also be thought of as a path which is relative to the root directory, prepended with a \"/\" character."
            ],
            [
                "isDirectory Read only",
                "A Boolean which is true if the entry represents a directory; otherwise, it's false."
            ],
            [
                "isFile Read only",
                "A Boolean which is true if the entry represents a file. If it's not a file, this value is false."
            ],
            [
                "name Read only",
                "A USVString containing the name of the entry (the final part of the path, after the last \"/\" character)."
            ],
            [
                "copyTo()",
                "Copies the file or directory to a new location on the file system."
            ],
            [
                "getMetadata()",
                "Obtains metadata about the file, such as its modification date and size."
            ],
            [
                "getParent()",
                "Returns a FileSystemDirectoryEntry representing the entry's parent directory."
            ],
            [
                "moveTo()",
                "Moves the file or directory to a new location on the file system, or renames the file or directory."
            ],
            [
                "remove()",
                "Removes the specified file or directory. You can only remove directories which are empty."
            ],
            [
                "toURL()",
                "Creates and returns a URL which identifies the entry. This URL uses the URL scheme \"filesystem:\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemEntrySync",
        "",
        "FileSystemEntrySync",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "Metadata",
                ""
            ],
            [
                "parent",
                "The directory to which to move the entry."
            ],
            [
                "newName",
                "The new name of the entry. If you do not specify a name, the browser preserves the entry's current name."
            ],
            [
                "FileSystemEntrySync",
                "An object that represents an entry in the file system."
            ],
            [
                "parent",
                "The directory where you want the entry to move to."
            ],
            [
                "newName",
                "The new name of the entry. If you do not specify a name, the browser preserves the FileSystemEntrySync's current name."
            ],
            [
                "FileSystemEntrySync",
                "An object that represents an entry in the file system."
            ],
            [
                "DOMString",
                ""
            ],
            [
                "void",
                ""
            ],
            [
                "DirectoryEntrySync",
                "An object that represents a directory in the file system."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemFileEntry",
        "",
        "FileSystemFileEntry",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "file()",
                "Creates a new File object which can be used to read the file."
            ],
            [
                "createWriter()",
                "Creates a new FileWriter object which allows writing to the file represented by the file system entry."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemFileHandle",
        "",
        "FileSystemFileHandle",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "getFile()",
                "Returns a file object representing the state on disk of the entry represented by the handle."
            ],
            [
                "createWritable()",
                "Creates a FileSystemWritableFileStream that can be used to write to a file."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemFlags",
        "",
        "FileSystemFlags",
        "",
        [
            [
                "create Optional",
                "If this property is true, and the requested file or directory doesn't exist, the user agent should create it. The default is false. The parent directory must already exist."
            ],
            [
                "exclusive Optional",
                "If true, and the create option is also true, the file must not exist prior to issuing the call. Instead, it must be possible for it to be created newly at call time. The default is false."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemHandle",
        "",
        "FileSystemHandle",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "FileSystemFileHandle",
                "Represents a handle to a file entry."
            ],
            [
                "FileSystemDirectoryHandle",
                "Provides a handle to a directory entry."
            ],
            [
                "kind Read only",
                "Returns the type of entry. This is 'file' if the associated entry is a file or 'directory'."
            ],
            [
                "name Read only",
                "Returns the name of the associated entry."
            ],
            [
                "isSameEntry()",
                "Compares two handles to see if the associated entries (either a file or directory) match."
            ],
            [
                "queryPermission()",
                "Queries the current permission state of the current handle."
            ],
            [
                "requestPermission()",
                "Requests read or readwrite permissions for the file handle."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemSync",
        "",
        "FileSystemSync",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/FileSystemWritableFileStream",
        "",
        "FileSystemWritableFileStream",
        "This page is not complete.",
        [
            [
                "FileSystemWritableFileStream.write",
                "Writes content into the file the method is called on, at the current file cursor offset."
            ],
            [
                "FileSystemWritableFileStream.seek",
                "Updates the current file cursor offset to the position (in bytes) specified."
            ],
            [
                "FileSystemWritableFileStream.truncate",
                "Resizes the file associated with the stream to be the specified size in bytes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FocusEvent",
        "",
        "FocusEvent",
        "",
        [
            [
                "FocusEvent()",
                "Creates a FocusEvent event with the given parameters."
            ],
            [
                "FocusEvent.relatedTarget",
                "Is an EventTarget representing a secondary target for this event. In some cases (such as when tabbing in or out a page), this property may be set to null for security reasons."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FontFace",
        "",
        "FontFace",
        "",
        [
            [
                "FontFace()",
                "Constructs and returns a new FontFace object, built from an external resource described by an URL or from an ArrayBuffer."
            ],
            [
                "FontFace.ascentOverride",
                "A CSSOMString that retrieves or sets the ascent metric of the font. It is equivalent to the ascent-override descriptor."
            ],
            [
                "FontFace.descentOverride",
                "A CSSOMString that retrieves or sets the descent metric of the font. It is equivalent to the descent-override descriptor."
            ],
            [
                "FontFace.display",
                "A CSSOMString that determines how a font face is displayed based on whether and when it is downloaded and ready to use."
            ],
            [
                "FontFace.family",
                "A CSSOMString that retrieves or sets the family of the font. It is equivalent to the font-family descriptor."
            ],
            [
                "FontFace.featureSettings",
                "A CSSOMString that retrieves or sets infrequently used font features that are not available from a font's variant properties. It is equivalent to the font-feature-settings descriptor."
            ],
            [
                "FontFace.lineGapOverride",
                "A CSSOMString that retrieves or sets the line-gap metric of the font. It is equivalent to the line-gap-override descriptor."
            ],
            [
                "FontFace.loaded Read only",
                "Returns a Promise that resolves with the current FontFace object when the font specified in the object's constructor is done loading or rejects with a SyntaxError."
            ],
            [
                "FontFace.status Read only",
                "Returns an enumerated value indicating the status of the font, one of \"unloaded\", \"loading\", \"loaded\", or \"error\"."
            ],
            [
                "FontFace.stretch",
                "A CSSOMString that retrieves or sets how the font stretches. It is equivalent to the font-stretch descriptor."
            ],
            [
                "FontFace.style",
                "A CSSOMString that retrieves or sets the style of the font. It is equivalent to the font-style descriptor."
            ],
            [
                "FontFace.unicodeRange",
                "A CSSOMString that retrieves or sets the range of unicode codepoints encompassing the font. It is equivalent to the unicode-range descriptor."
            ],
            [
                "FontFace.variant",
                "A CSSOMString that retrieves or sets the variant of the font. It is equivalent to the font-variant descriptor."
            ],
            [
                "FontFace.variationSettings",
                "A CSSOMString that retrieves or sets the variation settings of the font. It is equivalent to the font-variation-settings descriptor."
            ],
            [
                "FontFace.weight",
                "A CSSOMString that contains the weight of the font. It is equivalent to the font-weight descriptor."
            ],
            [
                "FontFace.load()",
                "Loads a font based on current object's constructor-passed requirements, including a location or source buffer, and returns a Promise that resolves with the current FontFace object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FontFaceSet",
        "",
        "FontFaceSet",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "FontFaceSet.status Read only",
                "Indicates the font-face's loading status. It will be one of 'loading' or 'loaded'."
            ],
            [
                "FontFaceSet.ready Read only",
                "Promise which resolves once font loading and layout operations have completed."
            ],
            [
                "FontFaceSet.onloading",
                "An EventListener called whenever an event of type loading is fired, indicating a font-face set has started loading."
            ],
            [
                "FontFaceSet.onloadingdone",
                "An EventListener called whenever an event of type loadingdone is fired, indicating that a font face set has finished loading."
            ],
            [
                "FontFaceSet.onloadingerror",
                "An EventListener called whenever an event of type loadingerror is fired, indicating that an error occurred whilst loading a font-face set."
            ],
            [
                "FontFaceSet.add()",
                "Adds a font to the font set."
            ],
            [
                "FontFaceSet.check()",
                "A Boolean that indicates whether a font is loaded, but doesn't initiate a load when it isn't."
            ],
            [
                "FontFaceSet.clear()",
                "Removes all manually-added fonts from the font set. CSS-connected fonts are unaffected."
            ],
            [
                "FontFaceSet.delete()",
                "Removes a manually-added font from the font set. CSS-connected fonts are unaffected."
            ],
            [
                "FontFaceSet.load()",
                "Returns a Promise which resolves to a list of font-faces for a requested font."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FontFaceSetLoadEvent",
        "",
        "FontFaceSetLoadEvent",
        "",
        [
            [
                "FontFaceSetLoadEvent()",
                "Creates a new FontFaceSetLoadEvent object."
            ],
            [
                "FontFaceSetLoadEvent.fontfacesRead only",
                "Returns an array of FontFace instances each of which represents a single usable font."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FormData",
        "",
        "FormData",
        "",
        [
            [
                "FormData()",
                "Creates a new FormData object."
            ],
            [
                "FormData.append()",
                "Appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist."
            ],
            [
                "FormData.delete()",
                "Deletes a key/value pair from a FormData object."
            ],
            [
                "FormData.entries()",
                "Returns an iterator allowing to go through all key/value pairs contained in this object."
            ],
            [
                "FormData.get()",
                "Returns the first value associated with a given key from within a FormData object."
            ],
            [
                "FormData.getAll()",
                "Returns an array of all the values associated with a given key from within a FormData."
            ],
            [
                "FormData.has()",
                "Returns a boolean stating whether a FormData object contains a certain key."
            ],
            [
                "FormData.keys()",
                "Returns an iterator allowing to go through all keys of the key/value pairs contained in this object."
            ],
            [
                "FormData.set()",
                "Sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist."
            ],
            [
                "FormData.values()",
                "Returns an iterator allowing to go through all values contained in this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/FormDataEntryValue",
        "",
        "FormDataEntryValue",
        "A string or File that represents a single value from a set of FormData key-value pairs.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/FormDataEvent",
        "",
        "FormDataEvent",
        "",
        [
            [
                "FormDataEvent()",
                "Creates a new FormDataEvent object instance."
            ],
            [
                "FormDataEvent.formData",
                "Contains the FormData object representing the data contained in the form when the event was fired."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GainNode",
        "",
        "GainNode",
        "",
        [
            [
                "GainNode()",
                "Creates a new instance of a GainNode object. You shouldn't manually create a gain node; instead, use the method BaseAudioContext.createGain."
            ],
            [
                "GainNode.gain Read only",
                "Is an a-rate AudioParam representing the amount of gain to apply. You have to set AudioParam.value or use the methods of AudioParam to change the effect of gain."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Gamepad",
        "",
        "Gamepad",
        "The Gamepad interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.",
        [
            [
                "Gamepad.axes Read only",
                "An array representing the controls with axes present on the device (e.g. analog thumb sticks)."
            ],
            [
                "Gamepad.buttons Read only",
                "An array of gamepadButton objects representing the buttons present on the device."
            ],
            [
                "Gamepad.connected Read only",
                "A boolean indicating whether the gamepad is still connected to the system."
            ],
            [
                "Gamepad.displayId Read only",
                "Returns the VRDisplay.displayId of an associated VRDisplay (if relevant) — the VRDisplay that the gamepad is controlling the displayed scene of."
            ],
            [
                "Gamepad.hand Read only",
                "An enum defining what hand the controller is being held in, or is most likely to be held in."
            ],
            [
                "Gamepad.hapticActuators Read only",
                "An array containing GamepadHapticActuator objects, each of which represents haptic feedback hardware available on the controller."
            ],
            [
                "Gamepad.id Read only",
                "A DOMString containing identifying information about the controller."
            ],
            [
                "Gamepad.index Read only",
                "An integer that is auto-incremented to be unique for each device currently connected to the system."
            ],
            [
                "Gamepad.mapping Read only",
                "A string indicating whether the browser has remapped the controls on the device to a known layout."
            ],
            [
                "Gamepad.pose Read only {{ExperimentalInline}}",
                "A GamepadPose object representing the pose information associated with a WebVR controller (e.g. its position and orientation in 3D space)."
            ],
            [
                "Gamepad.timestamp Read only",
                "A DOMHighResTimeStamp representing the last time the data for this gamepad was updated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GamepadButton",
        "",
        "GamepadButton",
        "The GamepadButton interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.",
        [
            [
                "GamepadButton.value Read only",
                "A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed."
            ],
            [
                "GamepadButton.pressed Read only",
                "A Boolean value indicating whether the button is currently pressed (true) or unpressed (false)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GamepadEvent",
        "",
        "GamepadEvent",
        "",
        [
            [
                "GamepadEvent()",
                "Returns a new GamepadEvent object."
            ],
            [
                "GamepadEvent.gamepad Read only",
                "Returns a Gamepad object, providing access to the associated gamepad data for the event fired."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GamepadHapticActuator",
        "",
        "GamepadHapticActuator",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "GamepadHapticActuator.type Read only",
                "Returns an enum representing the type of the haptic hardware."
            ],
            [
                "GamepadHapticActuator.pulse() Read only",
                "Makes the hardware pulse at a certain intensity for a specified duration."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GamepadPose",
        "",
        "GamepadPose",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "GamepadPose.hasOrientation Read only",
                "Returns a boolean indicating whether the gamepad is capable of returning orientation information (true) or not (false)."
            ],
            [
                "GamepadPose.hasPosition Read only",
                "Returns a boolean indicating whether the gamepad is capable of returning position information (true) or not (false)."
            ],
            [
                "GamepadPose.position Read only",
                "Returns the position of the Gamepad as a 3D vector."
            ],
            [
                "GamepadPose.linearVelocity Read only",
                "Returns the linear velocity of the Gamepad, in meters per second."
            ],
            [
                "GamepadPose.linearAcceleration Read only",
                "Returns the linear acceleration of the Gamepad, in meters per second per second."
            ],
            [
                "GamepadPose.orientation Read only",
                "Returns the orientation of the Gamepad, as a quarternion value."
            ],
            [
                "GamepadPose.angularVelocity Read only",
                "Returns the angular velocity of the Gamepad, in radians per second."
            ],
            [
                "GamepadPose.angularAcceleration Read only",
                "Returns the angular acceleration of the Gamepad, in meters per second per second."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Geolocation",
        "",
        "Geolocation",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "Geolocation.getCurrentPosition() Secure context",
                "Determines the device's current location and gives back a GeolocationPosition object with the data."
            ],
            [
                "Geolocation.watchPosition() Secure context",
                "Returns a long value representing the newly established callback function to be invoked whenever the device location changes."
            ],
            [
                "Geolocation.clearWatch() Secure context",
                "Removes the particular handler previously installed using watchPosition()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GeolocationCoordinates",
        "",
        "GeolocationCoordinates",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "GeolocationCoordinates.latitude Read only Secure context",
                "Returns a double representing the position's latitude in decimal degrees."
            ],
            [
                "GeolocationCoordinates.longitude Read only Secure context",
                "Returns a double representing the position's longitude in decimal degrees."
            ],
            [
                "GeolocationCoordinates.altitude Read only Secure context",
                "Returns a double representing the position's altitude in meters, relative to sea level. This value can be null if the implementation cannot provide the data."
            ],
            [
                "GeolocationCoordinates.accuracy Read only Secure context",
                "Returns a double representing the accuracy of the latitude and longitude properties, expressed in meters."
            ],
            [
                "GeolocationCoordinates.altitudeAccuracy Read only Secure context",
                "Returns a double representing the accuracy of the altitude expressed in meters. This value can be null."
            ],
            [
                "GeolocationCoordinates.heading Read only Secure context",
                "Returns a double representing the direction towards which the device is facing. This value, specified in degrees, indicates how far off from heading true north the device is. 0 degrees represents true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If speed is 0, heading is NaN. If the device is unable to provide heading information, this value is null."
            ],
            [
                "GeolocationCoordinates.speed Read only Secure context",
                "Returns a double representing the velocity of the device in meters per second. This value can be null."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GeolocationPosition",
        "",
        "GeolocationPosition",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "GeolocationPosition.coords Read only Secure context",
                "Returns a GeolocationCoordinates object defining the current location."
            ],
            [
                "GeolocationPosition.timestamp Read only Secure context",
                "Returns a DOMTimeStamp representing the time at which the location was retrieved."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GeolocationPositionError",
        "",
        "GeolocationPositionError",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "GeolocationPositionError.code Read only Secure context",
                "Returns an unsigned short representing the error code. The following values are possible: Value Associated constant Description 1 PERMISSION_DENIED The acquisition of the geolocation information failed because the page didn't have the permission to do it. 2 POSITION_UNAVAILABLE The acquisition of the geolocation failed because at least one internal source of position returned an internal error. 3 TIMEOUT The time allowed to acquire the geolocation, defined by PositionOptions.timeout information was reached before the information was obtained."
            ],
            [
                "GeolocationPositionError.message Read only Secure context",
                "Returns a human-readable DOMString describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GestureEvent",
        "",
        "GestureEvent",
        "",
        [
            [
                "GestureEvent()",
                "Creates a GestureEvent object."
            ],
            [
                "GestureEvent.rotation Read only",
                "Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation. Initial value: 0.0"
            ],
            [
                "GestureEvent.scale Read only",
                "Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the gesture. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: 1.0"
            ],
            [
                "GestureEvent.initGestureEvent()",
                "Initializes the value of an GestureEvent. If the event has already being dispatched, this method does nothing."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/getCandidateWindowClientRect",
        "",
        "getCandidateWindowClientRect",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/GlobalEventHandlers",
        "",
        "GlobalEventHandlers",
        "The GlobalEventHandlers mixin describes the event handlers common to several interfaces like HTMLElement, Document, or Window. Each of these interfaces can, of course, add more event handlers in addition to the ones listed below.",
        [
            [
                "GlobalEventHandlers.onabort",
                "Is an event handler representing the code to be called when the abort event is raised."
            ],
            [
                "GlobalEventHandlers.onanimationcancel",
                "An event handler called when an animationcancel event is sent, indicating that a running CSS animation has been canceled."
            ],
            [
                "GlobalEventHandlers.onanimationend",
                "An event handler called when an animationend event is sent, indicating that a CSS animation has stopped playing."
            ],
            [
                "GlobalEventHandlers.onanimationiteration",
                "An event handler called when an animationiteration event has been sent, indicating that a CSS animation has begun playing a new iteration of the animation sequence."
            ],
            [
                "GlobalEventHandlers.onanimationstart",
                "An event handler called when an animationstart event is sent, indicating that a CSS animation has started playing."
            ],
            [
                "GlobalEventHandlers.onauxclick",
                "An event handler called when an auxclick event is sent, indicating that a non-primary button has been pressed on an input device (e.g. a middle mouse button)."
            ],
            [
                "GlobalEventHandlers.onblur",
                "Is an event handler representing the code to be called when the blur event is raised."
            ],
            [
                "GlobalEventHandlers.onerror",
                "Is an OnErrorEventHandler representing the code to be called when the error event is raised."
            ],
            [
                "GlobalEventHandlers.onfocus",
                "Is an event handler representing the code to be called when the focus event is raised."
            ],
            [
                "GlobalEventHandlers.oncancel",
                "Is an event handler representing the code to be called when the cancel event is raised."
            ],
            [
                "GlobalEventHandlers.oncanplay",
                "Is an event handler representing the code to be called when the canplay event is raised."
            ],
            [
                "GlobalEventHandlers.oncanplaythrough",
                "Is an event handler representing the code to be called when the canplaythrough event is raised."
            ],
            [
                "GlobalEventHandlers.onchange",
                "Is an event handler representing the code to be called when the change event is raised."
            ],
            [
                "GlobalEventHandlers.onclick",
                "Is an event handler representing the code to be called when the click event is raised."
            ],
            [
                "GlobalEventHandlers.onclose",
                "Is an event handler representing the code to be called when the close event is raised."
            ],
            [
                "GlobalEventHandlers.oncontextmenu",
                "Is an event handler representing the code to be called when the contextmenu event is raised."
            ],
            [
                "GlobalEventHandlers.oncuechange",
                "Is an event handler representing the code to be called when the cuechange event is raised."
            ],
            [
                "GlobalEventHandlers.ondblclick",
                "Is an event handler representing the code to be called when the dblclick event is raised."
            ],
            [
                "GlobalEventHandlers.ondrag",
                "Is an event handler representing the code to be called when the drag event is raised."
            ],
            [
                "GlobalEventHandlers.ondragend",
                "Is an event handler representing the code to be called when the dragend event is raised."
            ],
            [
                "GlobalEventHandlers.ondragenter",
                "Is an event handler representing the code to be called when the dragenter event is raised."
            ],
            [
                "GlobalEventHandlers.ondragexit",
                "Is an event handler representing the code to be called when the dragexit event is raised."
            ],
            [
                "GlobalEventHandlers.ondragleave",
                "Is an event handler representing the code to be called when the dragleave event is raised."
            ],
            [
                "GlobalEventHandlers.ondragover",
                "Is an event handler representing the code to be called when the dragover event is raised."
            ],
            [
                "GlobalEventHandlers.ondragstart",
                "Is an event handler representing the code to be called when the dragstart event is raised."
            ],
            [
                "GlobalEventHandlers.ondrop",
                "Is an event handler representing the code to be called when the drop event is raised."
            ],
            [
                "GlobalEventHandlers.ondurationchange",
                "Is an event handler representing the code to be called when the durationchange event is raised."
            ],
            [
                "GlobalEventHandlers.onemptied",
                "Is an event handler representing the code to be called when the emptied event is raised."
            ],
            [
                "GlobalEventHandlers.onended",
                "Is an event handler representing the code to be called when the ended event is raised."
            ],
            [
                "GlobalEventHandlers.onformdata",
                "Is an event handler for processing formdata events, fired after the entry list representing the form's data is constructed."
            ],
            [
                "GlobalEventHandlers.ongotpointercapture",
                "Is an event handler representing the code to be called when the gotpointercapture event type is raised."
            ],
            [
                "GlobalEventHandlers.oninput",
                "Is an event handler representing the code to be called when the input event is raised."
            ],
            [
                "GlobalEventHandlers.oninvalid",
                "Is an event handler representing the code to be called when the invalid event is raised."
            ],
            [
                "GlobalEventHandlers.onkeydown",
                "Is an event handler representing the code to be called when the keydown event is raised."
            ],
            [
                "GlobalEventHandlers.onkeypress",
                "Is an event handler representing the code to be called when the keypress event is raised."
            ],
            [
                "GlobalEventHandlers.onkeyup",
                "Is an event handler representing the code to be called when the keyup event is raised."
            ],
            [
                "GlobalEventHandlers.onload",
                "Is an event handler representing the code to be called when the load event is raised."
            ],
            [
                "GlobalEventHandlers.onloadeddata",
                "Is an event handler representing the code to be called when the loadeddata event is raised."
            ],
            [
                "GlobalEventHandlers.onloadedmetadata",
                "Is an event handler representing the code to be called when the loadedmetadata event is raised."
            ],
            [
                "GlobalEventHandlers.onloadend",
                "Is an event handler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)"
            ],
            [
                "GlobalEventHandlers.onloadstart",
                "Is an event handler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)"
            ],
            [
                "GlobalEventHandlers.onlostpointercapture",
                "Is an event handler representing the code to be called when the lostpointercapture event type is raised."
            ],
            [
                "GlobalEventHandlers.onmousedown",
                "Is an event handler representing the code to be called when the mousedown event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseenter",
                "Is an event handler representing the code to be called when the mouseenter event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseleave",
                "Is an event handler representing the code to be called when the mouseleave event is raised."
            ],
            [
                "GlobalEventHandlers.onmousemove",
                "Is an event handler representing the code to be called when the mousemove event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseout",
                "Is an event handler representing the code to be called when the mouseout event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseover",
                "Is an event handler representing the code to be called when the mouseover event is raised."
            ],
            [
                "GlobalEventHandlers.onmouseup",
                "Is an event handler representing the code to be called when the mouseup event is raised."
            ],
            [
                "GlobalEventHandlers.onmousewheel",
                "Is an event handler representing the code to be called when the mousewheel event is raised. Deprecated. Use onwheel instead."
            ],
            [
                "GlobalEventHandlers.onwheel",
                "Is an event handler representing the code to be called when the wheel event is raised."
            ],
            [
                "GlobalEventHandlers.onpause",
                "Is an event handler representing the code to be called when the pause event is raised."
            ],
            [
                "GlobalEventHandlers.onplay",
                "Is an event handler representing the code to be called when the play event is raised."
            ],
            [
                "GlobalEventHandlers.onplaying",
                "Is an event handler representing the code to be called when the playing event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerdown",
                "Is an event handler representing the code to be called when the pointerdown event is raised."
            ],
            [
                "GlobalEventHandlers.onpointermove",
                "Is an event handler representing the code to be called when the pointermove event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerup",
                "Is an event handler representing the code to be called when the pointerup event is raised."
            ],
            [
                "GlobalEventHandlers.onpointercancel",
                "Is an event handler representing the code to be called when the pointercancel event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerover",
                "Is an event handler representing the code to be called when the pointerover event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerout",
                "Is an event handler representing the code to be called when the pointerout event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerenter",
                "Is an event handler representing the code to be called when the pointerenter event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerleave",
                "Is an event handler representing the code to be called when the pointerleave event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerlockchange",
                "Is an event handler representing the code to be called when the pointerlockchange event is raised."
            ],
            [
                "GlobalEventHandlers.onpointerlockerror",
                "Is an event handler representing the code to be called when the pointerlockerror event is raised."
            ],
            [
                "GlobalEventHandlers.onprogress",
                "Is an event handler representing the code to be called when the progress event is raised."
            ],
            [
                "GlobalEventHandlers.onratechange",
                "Is an event handler representing the code to be called when the ratechange event is raised."
            ],
            [
                "GlobalEventHandlers.onreset",
                "Is an event handler representing the code to be called when the reset event is raised."
            ],
            [
                "GlobalEventHandlers.onresize",
                "Is an event handler representing the code to be called when the resize event is raised."
            ],
            [
                "GlobalEventHandlers.onscroll",
                "Is an event handler representing the code to be called when the scroll event is raised."
            ],
            [
                "GlobalEventHandlers.onseeked",
                "Is an event handler representing the code to be called when the seeked event is raised."
            ],
            [
                "GlobalEventHandlers.onseeking",
                "Is an event handler representing the code to be called when the seeking event is raised."
            ],
            [
                "GlobalEventHandlers.onselect",
                "Is an event handler representing the code to be called when the select event is raised."
            ],
            [
                "GlobalEventHandlers.onselectstart",
                "Is an event handler representing the code to be called when the selectionchange event is raised, i.e. when the user starts to make a new text selection on a web page."
            ],
            [
                "GlobalEventHandlers.onselectionchange",
                "Is an event handler representing the code to be called when the selectionchange event is raised, i.e. when the text selected on a web page changes."
            ],
            [
                "GlobalEventHandlers.onshow",
                "Is an event handler representing the code to be called when the show event is raised."
            ],
            [
                "GlobalEventHandlers.onstalled",
                "Is an event handler representing the code to be called when the stalled event is raised."
            ],
            [
                "GlobalEventHandlers.onsubmit",
                "Is an event handler representing the code to be called when the submit event is raised."
            ],
            [
                "GlobalEventHandlers.onsuspend",
                "Is an event handler representing the code to be called when the suspend event is raised."
            ],
            [
                "GlobalEventHandlers.ontimeupdate",
                "Is an event handler representing the code to be called when the timeupdate event is raised."
            ],
            [
                "GlobalEventHandlers.onvolumechange",
                "Is an event handler representing the code to be called when the volumechange event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchcancel",
                "Is an event handler representing the code to be called when the touchcancel event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchend",
                "Is an event handler representing the code to be called when the touchend event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchmove",
                "Is an event handler representing the code to be called when the touchmove event is raised."
            ],
            [
                "GlobalEventHandlers.ontouchstart",
                "Is an event handler representing the code to be called when the touchstart event is raised."
            ],
            [
                "GlobalEventHandlers.ontransitioncancel",
                "An event handler called when a transitioncancel event is sent, indicating that a CSS transition has been cancelled."
            ],
            [
                "GlobalEventHandlers.ontransitionend",
                "An event handler called when a transitionend event is sent, indicating that a CSS transition has finished playing."
            ],
            [
                "GlobalEventHandlers.ontransitionrun",
                "An event handler called when a transitionrun event is sent, indicating that a CSS transition is running, though not nessarilty started."
            ],
            [
                "GlobalEventHandlers.ontransitionstart",
                "An event handler called when a transitionstart event is sent, indicating that a CSS transition has started transitioning."
            ],
            [
                "GlobalEventHandlers.onwaiting",
                "Is an event handler representing the code to be called when the waiting event is raised."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/GravitySensor",
        "",
        "GravitySensor",
        "The GravitySensor interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.",
        [
            [
                "GravitySensor()",
                "Creates a new GravitySensor object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Gyroscope",
        "",
        "Gyroscope",
        "The Gyroscope interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.",
        [
            [
                "Gyroscope()",
                "Creates a new Gyroscope object."
            ],
            [
                "Gyroscope.x Read only",
                "Returns a double, containing the angular velocity of the device along the device's x axis."
            ],
            [
                "Gyroscope.y Read only",
                "Returns a double, containing the angular velocity of the device along the device's y axis."
            ],
            [
                "Gyroscope.z Read only",
                "Returns a double, containing the angular velocity of the device along the device's z axis."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HashChangeEvent",
        "",
        "HashChangeEvent",
        "The HashChangeEvent interface represents events that fire when the fragment identifier of the URL has changed.",
        [
            [
                "HashChangeEvent.newURL Read only",
                "The new URL to which the window is navigating."
            ],
            [
                "HashChangeEvent.oldURL Read only",
                "The previous URL from which the window was navigated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Headers",
        "",
        "Headers",
        "The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs. You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.",
        [
            [
                "Headers()",
                "Creates a new Headers object."
            ],
            [
                "Headers.append()",
                "Appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist."
            ],
            [
                "Headers.delete()",
                "Deletes a header from a Headers object."
            ],
            [
                "Headers.entries()",
                "Returns an iterator allowing to go through all key/value pairs contained in this object."
            ],
            [
                "Headers.forEach()",
                "Executes a provided function once for each array element."
            ],
            [
                "Headers.get()",
                "Returns a ByteString sequence of all the values of a header within a Headers object with a given name."
            ],
            [
                "Headers.has()",
                "Returns a boolean stating whether a Headers object contains a certain header."
            ],
            [
                "Headers.keys()",
                "Returns an iterator allowing you to go through all keys of the key/value pairs contained in this object."
            ],
            [
                "Headers.set()",
                "Sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist."
            ],
            [
                "Headers.values()",
                "Returns an iterator allowing you to go through all values of the key/value pairs contained in this object."
            ],
            [
                "Headers.getAll()",
                "Used to return an array of all the values of a header within a Headers object with a given name; this method has now been deleted from the spec, and Headers.get() now returns all values of a given name instead of just the first one."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HID",
        "",
        "HID",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "HID.onconnect",
                "Fired when an HID device is connected."
            ],
            [
                "HID.ondisconnect",
                "Fired when an HID device is disconnected."
            ],
            [
                "getDevices()",
                "Returns a Promise that resolves with an array of connected HIDDevice objects."
            ],
            [
                "requestDevice()",
                "Returns a Promise that resolves with an array of connected HIDDevice objects. Calling this function will trigger the user agent's permission flow in order to gain permission to access one selected device from the returned list of devices."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HIDConnectionEvent",
        "",
        "HIDConnectionEvent",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "HIDConnectionEvent.HIDConnectionEvent()",
                "Returns a new HIDConnectionEvent object. Typically this constructor is not used as events are created when an input report is received."
            ],
            [
                "HIDConnectionEvent.deviceRead only",
                "Returns the HIDDevice instance representing the device associated with the connection event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HIDDevice",
        "",
        "HIDDevice",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "HIDDevice.openedRead only",
                "Returns a boolean, true if the device has an open connection."
            ],
            [
                "HIDDevice.vendorIdRead only",
                "Returns the vendorId of the HID device."
            ],
            [
                "HIDDevice.productIdRead only",
                "Returns the productID of the HID device."
            ],
            [
                "HIDDevice.productNameRead only",
                "Returns a string containing the product name of the HID device."
            ],
            [
                "HIDDevice.collectionsRead only",
                "Returns an array of report formats for the HID device."
            ],
            [
                "HIDDevice.oninputreport",
                "An event handler that fires when a report is sent from the device."
            ],
            [
                "HIDDevice.open()",
                "Opens a connection to this HID device, and returns a Promise which resolves once the connection has been successful."
            ],
            [
                "HIDDevice.close()",
                "Closes the connection to this HID device, and returns a Promise which resolves once the connection has been closed."
            ],
            [
                "HIDDevice.sendReport()",
                "Sends an output report to this HID Device, and returns a Promise which resolves once the report has been sent."
            ],
            [
                "HIDDevice.sendFeatureReport()",
                "Sends a feature report to this HID device, and returns a Promise which resolves once the report has been sent."
            ],
            [
                "HIDDevice.receiveFeatureReport()",
                "Receives a feature report from this HID device in the form of a Promise which resolves with a DataView. This allows typed access to the contents of this message."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/History",
        "",
        "History",
        "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
        [
            [
                "length Read only",
                "Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1."
            ],
            [
                "scrollRestoration",
                "Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either auto or manual."
            ],
            [
                "state Read only",
                "Returns an any value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a popstate event."
            ],
            [
                "back()",
                "This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to history.go(-1). Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception."
            ],
            [
                "forward()",
                "This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to history.go(1). Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception."
            ],
            [
                "go()",
                "Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling go() without parameters or a value of 0 reloads the current page. Internet Explorer lets you specify a string, instead of an integer, to go to a specific URL in the history list."
            ],
            [
                "pushState()",
                "Pushes the given data onto the session history stack with the specified title (and, if provided, URL). The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized. Note that all browsers but Safari currently ignore the title parameter. For more information, see Working with the History API."
            ],
            [
                "replaceState()",
                "Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized. Note that all browsers but Safari currently ignore the title parameter. For more information, see Working with the History API."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HkdfParams",
        "",
        "HkdfParams",
        "",
        [
            [
                "name",
                "A DOMString. This should be set to HKDF."
            ],
            [
                "hash",
                "A DOMString representing the digest algorithm to use. This may be one of: SHA-1 SHA-256 SHA-384 SHA-512"
            ],
            [
                "salt",
                "A BufferSource. The HKDF specification states that adding salt \"adds significantly to the strength of HKDF\". Ideally, the salt is a random or pseudo-random value with the same length as the output of the digest function. Unlike the input key material passed into deriveKey(), salt does not need to be kept secret."
            ],
            [
                "info",
                "A BufferSource representing application-specific contextual information. This is used to bind the derived key to an application or context, and enables you to derive different keys for different contexts while using the same input key material. It's important that this should be independent of the input key material itself. This property is required but may be an empty buffer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HmacImportParams",
        "",
        "HmacImportParams",
        "The HmacImportParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when generating a key for the HMAC algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to HMAC."
            ],
            [
                "hash",
                "A DOMString representing the name of the digest function to use. The can take a value of SHA-256, SHA-384, or SHA-512. Warning: Although you can technically pass SHA-1 here, this is strongly discouraged as it is considered vulnerable."
            ],
            [
                "length Optional",
                "A Number representing the length in bits of the key. If this is omitted the length of the key is equal to the length of the digest generated by the digest function you have chosen. Unless you have a good reason to use a different length, omit this property and use the default."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HmacKeyGenParams",
        "",
        "HmacKeyGenParams",
        "The HmacKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating a key for the HMAC algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to HMAC."
            ],
            [
                "hash",
                "A DOMString representing the name of the digest function to use. You can pass any of SHA-1, SHA-256, SHA-384, or SHA-512 here."
            ],
            [
                "length Optional",
                "A Number — the length in bits of the key. If this is omitted, the length of the key is equal to the block size of the hash function you have chosen. Unless you have a good reason to use a different length, omit this property and use the default."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HMDVRDevice",
        "",
        "HMDVRDevice",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "HMDVRDevice.getEyeParameters()",
                "Returns current parameters for the eye specified as its argument (\"left\" or \"right\") — such as field of view information — stored in a VREyeParameters object."
            ],
            [
                "HMDVRDevice.setFieldOfView()",
                "Sets the field of view for both eyes."
            ],
            [
                "VRDevice.hardwareUnitId Read only",
                "Returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. All devices that are part of the same physical piece of hardware will have the same hardwareUnitId."
            ],
            [
                "VRDevice.deviceId Read only",
                "Returns the ID for this specific VRDevice. The ID shouldn’t change across browser restarts, allowing configuration data to be saved based on it."
            ],
            [
                "VRDevice.deviceName Read only",
                "A human-readable name to identify the VRDevice."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLAnchorElement",
        "",
        "HTMLAnchorElement",
        "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to <a> element; not to be confused with <link>, which is represented by HTMLLinkElement)",
        [
            [
                "HTMLElement.accessKey",
                "Is a DOMString representing a single character that switches input focus to the hyperlink."
            ],
            [
                "HTMLAnchorElement.download",
                "Is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it."
            ],
            [
                "HTMLAnchorElement.hash",
                "Is a USVString representing the fragment identifier, including the leading hash mark ('#'), if any, in the referenced URL."
            ],
            [
                "HTMLAnchorElement.host",
                "Is a USVString representing the hostname and port (if it's not the default port) in the referenced URL."
            ],
            [
                "HTMLAnchorElement.hostname",
                "Is a USVString representing the hostname in the referenced URL."
            ],
            [
                "HTMLAnchorElement.href",
                "Is a USVString that is the result of parsing the href HTML attribute relative to the document, containing a valid URL of a linked resource."
            ],
            [
                "HTMLAnchorElement.hreflang",
                "Is a DOMString that reflects the hreflang HTML attribute, indicating the language of the linked resource."
            ],
            [
                "HTMLAnchorElement.origin Read only",
                "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port."
            ],
            [
                "HTMLAnchorElement.password",
                "Is a USVString containing the password specified before the domain name."
            ],
            [
                "HTMLAnchorElement.pathname",
                "Is a USVString containing an initial '/' followed by the path of the URL, not including the query string or fragment."
            ],
            [
                "HTMLAnchorElement.port",
                "Is a USVString representing the port component, if any, of the referenced URL."
            ],
            [
                "HTMLAnchorElement.protocol",
                "Is a USVString representing the protocol component, including trailing colon (':'), of the referenced URL."
            ],
            [
                "HTMLAnchorElement.referrerPolicy",
                "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use."
            ],
            [
                "HTMLAnchorElement.rel",
                "Is a DOMString that reflects the rel HTML attribute, specifying the relationship of the target object to the linked object."
            ],
            [
                "HTMLAnchorElement.relList Read only",
                "Returns a DOMTokenList that reflects the rel HTML attribute, as a list of tokens."
            ],
            [
                "HTMLAnchorElement.search",
                "Is a USVString representing the search element, including leading question mark ('?'), if any, of the referenced URL."
            ],
            [
                "HTMLElement.tabIndex",
                "Is a long containing the position of the element in the tabbing navigation order for the current document."
            ],
            [
                "HTMLAnchorElement.target",
                "Is a DOMString that reflects the target HTML attribute, indicating where to display the linked resource."
            ],
            [
                "HTMLAnchorElement.text",
                "Is a DOMString being a synonym for the Node.textContent property."
            ],
            [
                "HTMLAnchorElement.type",
                "Is a DOMString that reflects the type HTML attribute, indicating the MIME type of the linked resource."
            ],
            [
                "HTMLAnchorElement.username",
                "Is a USVString containing the username specified before the domain name."
            ],
            [
                "HTMLAnchorElement.charset",
                "Is a DOMString representing the character encoding of the linked resource."
            ],
            [
                "HTMLAnchorElement.coords",
                "Is a DOMString representing a comma-separated list of coordinates."
            ],
            [
                "HTMLAnchorElement.name",
                "Is a DOMString representing the anchor name."
            ],
            [
                "HTMLAnchorElement.rev",
                "Is a DOMString representing that the rev HTML attribute, specifying the relationship of the link object to the target object. Note: Currently the W3C HTML 5.2 spec states that rev is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete."
            ],
            [
                "HTMLAnchorElement.shape",
                "Is a DOMString representing the shape of the active area."
            ],
            [
                "HTMLElement.blur",
                "Removes the keyboard focus from the current element."
            ],
            [
                "HTMLElement.focus",
                "Gives the keyboard focus to the current element."
            ],
            [
                "HTMLAnchorElement.toString()",
                "Returns a USVString containing the whole URL. It is a synonym for HTMLAnchorElement.href, though it can't be used to modify the value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLAreaElement",
        "",
        "HTMLAreaElement",
        "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.",
        [
            [
                "HTMLElement.accessKey",
                "Is a DOMString containing a single character that switches input focus to the control."
            ],
            [
                "HTMLAreaElement.alt",
                "Is a DOMString that reflects the alt HTML attribute, containing alternative text for the element."
            ],
            [
                "HTMLAreaElement.coords",
                "Is a DOMString that reflects the coords HTML attribute, containing coordinates to define the hot-spot region."
            ],
            [
                "HTMLAreaElement.download",
                "Is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it."
            ],
            [
                "HTMLAreaElement.hash",
                "Is a USVString containing the fragment identifier (including the leading hash mark (#)), if any, in the referenced URL."
            ],
            [
                "HTMLAreaElement.host",
                "Is a USVString containing the hostname and port (if it's not the default port) in the referenced URL."
            ],
            [
                "HTMLAreaElement.hostname",
                "Is a USVString containing the hostname in the referenced URL."
            ],
            [
                "HTMLAreaElement.href",
                "Is a USVString containing that reflects the href HTML attribute, containing a valid URL of a linked resource."
            ],
            [
                "HTMLAreaElement.noHref",
                "Is a Boolean flag indicating if the area is inactive (true) or active (false)."
            ],
            [
                "HTMLAreaElement.origin Read only",
                "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port."
            ],
            [
                "HTMLAreaElement.password",
                "Is a USVString containing the password specified before the domain name."
            ],
            [
                "HTMLAreaElement.pathname",
                "Is a USVString containing the path name component, if any, of the referenced URL."
            ],
            [
                "HTMLAreaElement.port",
                "Is a USVString containing the port component, if any, of the referenced URL."
            ],
            [
                "HTMLAreaElement.protocol",
                "Is a USVString containing the protocol component (including trailing colon ':'), of the referenced URL."
            ],
            [
                "HTMLAreaElement.referrerPolicy",
                "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the linked resource."
            ],
            [
                "HTMLAreaElement.rel",
                "Is a DOMString that reflects the rel HTML attribute, indicating relationships of the current document to the linked resource."
            ],
            [
                "HTMLAreaElement.relList Read only",
                "Returns a DOMTokenList that reflects the rel HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens."
            ],
            [
                "HTMLAreaElement.search",
                "Is a USVString containing the search element (including leading question mark '?'), if any, of the referenced URL."
            ],
            [
                "HTMLAreaElement.shape",
                "Is a DOMString that reflects the shape HTML attribute, indicating the shape of the hot-spot, limited to known values."
            ],
            [
                "HTMLElement.tabIndex",
                "Is a long containing the element's position in the tabbing order."
            ],
            [
                "HTMLAreaElement.target",
                "Is a DOMString that reflects the target HTML attribute, indicating the browsing context in which to open the linked resource."
            ],
            [
                "HTMLAreaElement.username",
                "Is a USVString containing the username specified before the domain name."
            ],
            [
                "HTMLAreaElement.toString()",
                "Returns a USVString containing the whole URL of the script executed in the Worker. It is a synonym for HTMLAreaElement.href."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLAudioElement",
        "",
        "HTMLAudioElement",
        "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It's based on, and inherits properties and methods from, the HTMLMediaElement interface.",
        [
            [
                "Audio()",
                "Creates and returns a new HTMLAudioElement object, optionally starting the process of loading an audio file into it if the file URL is given."
            ],
            [
                "mozCurrentSampleOffset()",
                "Returns the number of samples form the beginning of the stream that have been written so far into the audio stream created by calling mozWriteAudio()."
            ],
            [
                "mozSetup()",
                "Sets up the audio stream to allow writing, given the number of audio channels (1 or 2) and the sample rate in kHz."
            ],
            [
                "mozWriteAudio()",
                "Writes a batch of audio frames to the stream at the current offset, returning the number of bytes actually written to the stream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLBaseElement",
        "",
        "HTMLBaseElement",
        "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
        [
            [
                "HTMLBaseElement.href",
                "Is a DOMString that reflects the href HTML attribute, containing a base URL for relative URLs in the document."
            ],
            [
                "HTMLBaseElement.target",
                "Is a DOMString that reflects the target HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLBaseFontElement",
        "",
        "HTMLBaseFontElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "HTMLBaseFontElement.color",
                "Is a DOMString representing the text color using either a named color or a color specified in the hexadecimal #RRGGBB format."
            ],
            [
                "HTMLBaseFontElement.face",
                "Is a DOMString representing a list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system."
            ],
            [
                "HTMLBaseFontElement.size",
                "Is a DOMString representing the font size as either a numeric or relative value. Numeric values range from 1 to 7 with 1 being the smallest and 3 the default. Relative value starts with a '+' or a '-'."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLBodyElement",
        "",
        "HTMLBodyElement",
        "The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.",
        [
            [
                "HTMLBodyElement.aLink",
                "Is a DOMString that represents the color of active hyperlinks."
            ],
            [
                "HTMLBodyElement.background",
                "Is a DOMString that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it."
            ],
            [
                "HTMLBodyElement.bgColor",
                "Is a DOMString that represents the background color for the document."
            ],
            [
                "HTMLBodyElement.link",
                "Is a DOMString that represents the color of unvisited links."
            ],
            [
                "HTMLBodyElement.text",
                "Is a DOMString that represents the foreground color of text."
            ],
            [
                "HTMLBodyElement.vLink",
                "Is a DOMString that represents the color of visited links."
            ],
            [
                "WindowEventHandlers.onafterprint",
                "Is an event handler representing the code to be called when the afterprint event is raised."
            ],
            [
                "WindowEventHandlers.onbeforeprint",
                "Is an event handler representing the code to be called when the beforeprint event is raised."
            ],
            [
                "WindowEventHandlers.onbeforeunload",
                "Is an event handler representing the code to be called when the beforeunload event is raised."
            ],
            [
                "WindowEventHandlers.onhashchange",
                "Is an event handler representing the code to be called when the hashchange event is raised."
            ],
            [
                "WindowEventHandlers.onlanguagechange",
                "Is an event handler representing the code to be called when the languagechange event is raised."
            ],
            [
                "WindowEventHandlers.onmessage",
                "Is an event handler called whenever an object receives a message event."
            ],
            [
                "WindowEventHandlers.onmessageerror",
                "Is an event handler called whenever an object receives a messageerror event."
            ],
            [
                "WindowEventHandlers.onoffline",
                "Is an event handler representing the code to be called when the offline event is raised."
            ],
            [
                "WindowEventHandlers.ononline",
                "Is an event handler representing the code to be called when the online event is raised."
            ],
            [
                "WindowEventHandlers.onpagehide",
                "Is an event handler representing the code to be called when the pagehide event is raised."
            ],
            [
                "WindowEventHandlers.onpageshow",
                "Is an event handler representing the code to be called when the pageshow event is raised."
            ],
            [
                "WindowEventHandlers.onpopstate",
                "Is an event handler representing the code to be called when the popstate event is raised."
            ],
            [
                "WindowEventHandlers.onrejectionhandled",
                "An event handler representing the code executed when the rejectionhandled event is raised, indicating that a Promise was rejected and the rejection has been handled."
            ],
            [
                "GlobalEventHandlers.onresize",
                "Is an event handler representing the code to be called when the resize event is raised."
            ],
            [
                "WindowEventHandlers.onstorage",
                "Is an event handler representing the code to be called when the storage event is raised."
            ],
            [
                "WindowEventHandlers.onunhandledrejection",
                "An event handler representing the code executed when the unhandledrejection event is raised, indicating that a Promise was rejected but the rejection was not handled."
            ],
            [
                "WindowEventHandlers.onunload",
                "Is an event handler representing the code to be called when the unload event is raised."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLBRElement",
        "",
        "HTMLBRElement",
        "The HTMLBRElement interface represents a HTML line break element (<br>). It inherits from HTMLElement.",
        [
            [
                "HTMLBRElement.clear",
                "Is a DOMString indicating the flow of text around floating objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLButtonElement",
        "",
        "HTMLButtonElement",
        "The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.",
        [
            [
                "HTMLButtonElement.accessKey",
                "Is a DOMString indicating the single-character keyboard key to give access to the button."
            ],
            [
                "HTMLButtonElement.autofocus",
                "Is a Boolean indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified."
            ],
            [
                "HTMLButtonElement.disabled",
                "Is a Boolean indicating whether or not the control is disabled, meaning that it does not accept any clicks."
            ],
            [
                "HTMLButtonElement.form Read only",
                "Is a HTMLFormElement reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element. If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the null value if none matches."
            ],
            [
                "HTMLButtonElement.formAction",
                "Is a DOMString reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the action attribute of the <form> element that owns this element."
            ],
            [
                "HTMLButtonElement.formEnctype",
                "Is a DOMString reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element."
            ],
            [
                "HTMLButtonElement.formMethod",
                "Is a DOMString reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element."
            ],
            [
                "HTMLButtonElement.formNoValidate",
                "Is a Boolean indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the novalidate attribute of the <form> element that owns this element."
            ],
            [
                "HTMLButtonElement.formTarget",
                "Is a DOMString reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element."
            ],
            [
                "HTMLButtonElement.labels Read only",
                "Is a NodeList that represents a list of <label> elements that are labels for this button."
            ],
            [
                "HTMLButtonElement.menu",
                "Is a HTMLMenuElement representing the menu element to be displayed if the button is clicked and is of type=\"menu\"."
            ],
            [
                "HTMLButtonElement.name",
                "Is a DOMString representing the name of the object when submitted with a form. If specified, it must not be the empty string."
            ],
            [
                "HTMLButtonElement.tabIndex",
                "Is a long that represents this element's position in the tabbing order."
            ],
            [
                "HTMLButtonElement.type",
                "Is a DOMString indicating the behavior of the button. This is an enumerated attribute with the following possible values: submit: The button submits the form. This is the default value if the attribute is not specified, or if it is dynamically changed to an empty or invalid value. reset: The button resets the form. button: The button does nothing. menu: The button displays a menu."
            ],
            [
                "HTMLButtonElement.willValidate Read only",
                "Is a Boolean indicating whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation, including: its type property is reset or button; it has a <datalist> ancestor; or the disabled property is set to true."
            ],
            [
                "HTMLButtonElement.validationMessage Read only",
                "Is a DOMString representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
            ],
            [
                "HTMLButtonElement.validity Read only",
                "Is a ValidityState representing the validity states that this button is in."
            ],
            [
                "HTMLButtonElement.value",
                "Is a DOMString representing the current form control value of the button."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLCanvasElement",
        "",
        "HTMLCanvasElement",
        "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
        [
            [
                "HTMLCanvasElement.height",
                "The height HTML attribute of the <canvas> element is a positive integer reflecting the number of logical pixels (or RGBA values) going down one column of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used. If no [separate] CSS height is assigned to the <canvas>, then this value will also be used as the height of the canvas in the length-unit CSS Pixel."
            ],
            [
                "HTMLCanvasElement.width",
                "The width HTML attribute of the <canvas> element is a positive integer reflecting the number of logical pixels (or RGBA values) going across one row of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used. If no [separate] CSS width is assigned to the <canvas>, then this value will also be used as the width of the canvas in the length-unit CSS Pixel."
            ],
            [
                "HTMLCanvasElement.mozOpaque",
                "Is a Boolean reflecting the moz-opaque HTML attribute of the <canvas> element. It lets the canvas know whether or not translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported in Mozilla-based browsers; use the standardized canvas.getContext('2d', { alpha: false }) instead."
            ],
            [
                "HTMLCanvasElement.mozPrintCallback",
                "Is a function that is Initially null. Web content can set this to a JavaScript function that will be called when the canvas is to be redrawn while the page is being printed. When called, the callback is passed a \"printState\" object that implements the MozCanvasPrintState interface. The callback can get the context to draw to from the printState object and must then call done() on it when finished. The purpose of mozPrintCallback is to obtain a higher resolution rendering of the canvas at the resolution of the printer being used. See this blog post."
            ],
            [
                "HTMLCanvasElement.captureStream()",
                "Returns a CanvasCaptureMediaStreamTrack that is a real-time video capture of the surface of the canvas."
            ],
            [
                "HTMLCanvasElement.getContext()",
                "Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with \"2d\" returns a CanvasRenderingContext2D object, whereas calling it with \"webgl\" (or \"experimental-webgl\") returns a WebGLRenderingContext object. This context is only available on browsers that implement WebGL."
            ],
            [
                "HTMLCanvasElement.toDataURL()",
                "Returns a data-URL containing a representation of the image in the format specified by the type parameter (defaults to png). The returned image is in a resolution of 96dpi."
            ],
            [
                "HTMLCanvasElement.toBlob()",
                "Creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent."
            ],
            [
                "HTMLCanvasElement.transferControlToOffscreen()",
                "Transfers control to an OffscreenCanvas object, either on the main thread or on a worker."
            ],
            [
                "HTMLCanvasElement.mozGetAsFile()",
                "Returns a File object representing the image contained in the canvas; this file is a memory-based file, with the specified name. If type is not specified, the image type is image/png."
            ],
            [
                "webglcontextcreationerror",
                "Fired if the user agent is unable to create a WebGLRenderingContext or WebGL2RenderingContext context."
            ],
            [
                "webglcontextlost",
                "Fired if the user agent detects that the drawing buffer associated with a WebGLRenderingContext or WebGL2RenderingContext object has been lost."
            ],
            [
                "webglcontextrestored",
                "Fired if the user agent restores the drawing buffer for a WebGLRenderingContext or WebGL2RenderingContext object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLCollection",
        "",
        "HTMLCollection",
        "",
        [
            [
                "HTMLCollection.length Read only",
                "Returns the number of items in the collection."
            ],
            [
                "HTMLCollection.item()",
                "Returns the specific node at the given zero-based index into the list. Returns null if the index is out of range."
            ],
            [
                "HTMLCollection.namedItem()",
                "Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLContentElement",
        "",
        "HTMLContentElement",
        "",
        [
            [
                "HTMLContentElement.select",
                "Is a DOMString that reflects the select HTML attribute. The value is a comma-separated list of CSS selectors that select the content to insert in place of the <content> element."
            ],
            [
                "HTMLContentElement.getDistributedNodes()",
                "Returns a static NodeList of the distributed nodes associated with this <content> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDataElement",
        "",
        "HTMLDataElement",
        "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
        [
            [
                "HTMLDataElement.value",
                "Is a DOMString reflecting the value HTML attribute, containing a machine-readable form of the element's value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDataListElement",
        "",
        "HTMLDataListElement",
        "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
        [
            [
                "HTMLDataListElement.options Read only",
                "Is a HTMLCollection representing a collection of the contained option elements."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDetailsElement",
        "",
        "HTMLDetailsElement",
        "The HTMLDetailsElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <details> elements.",
        [
            [
                "HTMLDetailsElement.open",
                "Is a boolean reflecting the open HTML attribute, indicating whether or not the element’s contents (not counting the <summary>) is to be shown to the user."
            ],
            [
                "toggle",
                "Fired when the open/closed state of a <details> element is toggled."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDialogElement",
        "",
        "HTMLDialogElement",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "HTMLDialogElement.open",
                "A Boolean reflecting the open HTML attribute, indicating whether the dialog is available for interaction."
            ],
            [
                "HTMLDialogElement.returnValue",
                "A DOMString that sets or returns the return value for the dialog."
            ],
            [
                "HTMLDialogElement.close()",
                "Closes the dialog. An optional DOMString may be passed as an argument, updating the returnValue of the dialog."
            ],
            [
                "HTMLDialogElement.show()",
                "Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog."
            ],
            [
                "HTMLDialogElement.showModal()",
                "Displays the dialog as a modal, over the top of any other dialogs that might be present. Interaction outside the dialog is blocked."
            ],
            [
                "cancel",
                "Fired when the user instructs the browser that they wish to dismiss the current open dialog. Also available via the oncancel property."
            ],
            [
                "close",
                "Fired when the dialog is closed. Also available via the onclose property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDivElement",
        "",
        "HTMLDivElement",
        "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.",
        [
            [
                "HTMLDivElement.align",
                "Is a DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDListElement",
        "",
        "HTMLDListElement",
        "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.",
        [
            [
                "HTMLDListElement.compact",
                "Is a Boolean indicating that spacing between list items should be reduced."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLDocument",
        "",
        "HTMLDocument",
        "The HTMLDocument interface, which may be accessed through the Window.HTMLDocument property, extends the Window.HTMLDocument property to include methods and properties that are specific to HTML documents.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLElement",
        "",
        "HTMLElement",
        "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
        [
            [
                "HTMLElement.accessKey",
                "Is a DOMString representing the access key assigned to the element."
            ],
            [
                "HTMLElement.accessKeyLabel Read only",
                "Returns a DOMString containing the element's assigned access key."
            ],
            [
                "HTMLElement.attributeStyleMap Read only",
                "Is a StylePropertyMap representing the declarations of the element's style attribute."
            ],
            [
                "HTMLElement.contentEditable",
                "Is a DOMString, where a value of true means the element is editable and a value of false means it isn't."
            ],
            [
                "HTMLElement.isContentEditable Read only",
                "Returns a Boolean that indicates whether or not the content of the element can be edited."
            ],
            [
                "HTMLElement.contextMenu",
                "Is a HTMLMenuElement representing the contextual menu associated with the element. It may be null."
            ],
            [
                "HTMLElement.dataset Read only",
                "Returns a DOMStringMap with which script can read and write the element's custom data attributes (data-*) ."
            ],
            [
                "HTMLElement.dir",
                "Is a DOMString, reflecting the dir global attribute, representing the directionality of the element. Possible values are \"ltr\", \"rtl\", and \"auto\"."
            ],
            [
                "HTMLElement.draggable",
                "Is a Boolean indicating if the element can be dragged."
            ],
            [
                "HTMLElement.enterkeyhint",
                "Is a DOMString defining what action label (or icon) to present for the enter key on virtual keyboards."
            ],
            [
                "HTMLElement.hidden",
                "Is a Boolean indicating if the element is hidden or not."
            ],
            [
                "HTMLElement.inert",
                "Is a Boolean indicating whether the user agent must act as though the given node is absent for the purposes of user interaction events, in-page text searches (\"find in page\"), and text selection."
            ],
            [
                "HTMLElement.innerText",
                "Represents the \"rendered\" text content of a node and its descendants. As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard."
            ],
            [
                "HTMLElement.itemScope",
                "Is a Boolean representing the item scope."
            ],
            [
                "HTMLElement.itemType Read only",
                "Returns a DOMSettableTokenList…"
            ],
            [
                "HTMLElement.itemId",
                "Is a DOMString representing the item ID."
            ],
            [
                "HTMLElement.itemRef Read only",
                "Returns a DOMSettableTokenList…"
            ],
            [
                "HTMLElement.itemProp Read only",
                "Returns a DOMSettableTokenList…"
            ],
            [
                "HTMLElement.itemValue",
                "Returns a Object representing the item value."
            ],
            [
                "HTMLElement.lang",
                "Is a DOMString representing the language of an element's attributes, text, and element contents."
            ],
            [
                "HTMLElement.noModule",
                "Is a Boolean indicating whether an import script can be executed in user agents that support module scripts."
            ],
            [
                "HTMLElement.nonce",
                "Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed."
            ],
            [
                "HTMLElement.offsetHeight Read only",
                "Returns a double containing the height of an element, relative to the layout."
            ],
            [
                "HTMLElement.offsetLeft Read only",
                "Returns a double, the distance from this element's left border to its offsetParent's left border."
            ],
            [
                "HTMLElement.offsetParent Read only",
                "Returns a Element that is the element from which all offset calculations are currently computed."
            ],
            [
                "HTMLElement.offsetTop Read only",
                "Returns a double, the distance from this element's top border to its offsetParent's top border."
            ],
            [
                "HTMLElement.offsetWidth Read only",
                "Returns a double containing the width of an element, relative to the layout."
            ],
            [
                "HTMLElement.properties Read only",
                "Returns a HTMLPropertiesCollection…"
            ],
            [
                "HTMLElement.spellcheck",
                "Is a Boolean that controls spell-checking. It is present on all HTML elements, though it doesn't have an effect on all of them."
            ],
            [
                "HTMLElement.style",
                "Is a CSSStyleDeclaration representing the declarations of the element's style attribute."
            ],
            [
                "HTMLElement.tabIndex",
                "Is a long representing the position of the element in the tabbing order."
            ],
            [
                "HTMLElement.title",
                "Is a DOMString containing the text that appears in a popup box when mouse is over the element."
            ],
            [
                "HTMLElement.translate",
                "Is a Boolean representing the translation."
            ],
            [
                "HTMLElement.oncopy",
                "Returns the event handling code for the copy event (bug 280959)."
            ],
            [
                "HTMLElement.oncut",
                "Returns the event handling code for the cut event (bug 280959)."
            ],
            [
                "HTMLElement.onpaste",
                "Returns the event handling code for the paste event (bug 280959)."
            ],
            [
                "TouchEventHandlers.ontouchstart",
                "Returns the event handling code for the touchstart event."
            ],
            [
                "TouchEventHandlers.ontouchend",
                "Returns the event handling code for the touchend event."
            ],
            [
                "TouchEventHandlers.ontouchmove",
                "Returns the event handling code for the touchmove event."
            ],
            [
                "TouchEventHandlers.ontouchenter",
                "Returns the event handling code for the touchenter event."
            ],
            [
                "TouchEventHandlers.ontouchleave",
                "Returns the event handling code for the touchleave event."
            ],
            [
                "TouchEventHandlers.ontouchcancel",
                "Returns the event handling code for the touchcancel event."
            ],
            [
                "HTMLElement.attachInternals()",
                "Returns an ElementInternals object, and enables a custom element to participate in HTML forms."
            ],
            [
                "HTMLElement.blur()",
                "Removes keyboard focus from the currently focused element."
            ],
            [
                "HTMLElement.click()",
                "Sends a mouse click event to the element."
            ],
            [
                "HTMLElement.focus()",
                "Makes the element the current keyboard focus."
            ],
            [
                "invalid",
                "Fired when an element does not satisfy its constraints during constraint validation. Also available via the oninvalid property."
            ],
            [
                "animationcancel",
                "Fired when an animation unexpectedly aborts. Also available via the onanimationcancel property."
            ],
            [
                "animationend",
                "Fired when an animation has completed normally. Also available via the onanimationend property."
            ],
            [
                "animationiteration",
                "Fired when an animation iteration has completed. Also available via the onanimationiteration property."
            ],
            [
                "animationstart",
                "Fired when an animation starts. Also available via the onanimationstart property."
            ],
            [
                "beforeinput",
                "Fired when the value of an <input>, <select>, or <textarea> element is about to be modified."
            ],
            [
                "input",
                "Fired when the value of an <input>, <select>, or <textarea> element has been changed. Also available via the oninput property."
            ],
            [
                "change",
                "Fired when the value of an <input>, <select>, or <textarea> element has been changed and committed by the user. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value."
            ],
            [
                "gotpointercapture",
                "Fired when an element captures a pointer using setPointerCapture(). Also available via the ongotpointercapture property."
            ],
            [
                "lostpointercapture",
                "Fired when a captured pointer is released. Also available via the onlostpointercapture property."
            ],
            [
                "pointercancel",
                "Fired when a pointer event is canceled. Also available via the onpointercancel property."
            ],
            [
                "pointerdown",
                "Fired when a pointer becomes active. Also available via the onpointerdown property."
            ],
            [
                "pointerenter",
                "Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants. Also available via the onpointerenter property."
            ],
            [
                "pointerleave",
                "Fired when a pointer is moved out of the hit test boundaries of an element. Also available via the onpointerleave property."
            ],
            [
                "pointermove",
                "Fired when a pointer changes coordinates. Also available via the onpointermove property."
            ],
            [
                "pointerout",
                "Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons). Also available via the onpointerout property."
            ],
            [
                "pointerover",
                "Fired when a pointer is moved into an element's hit test boundaries. Also available via the onpointerover property."
            ],
            [
                "pointerup",
                "Fired when a pointer is no longer active. Also available via the onpointerup property."
            ],
            [
                "transitioncancel",
                "Fired when a CSS transition is canceled. Also available via the ontransitioncancel property."
            ],
            [
                "transitionend",
                "Fired when a CSS transition has completed. Also available via the ontransitionend property."
            ],
            [
                "transitionrun",
                "Fired when a CSS transition is first created. Also available via the ontransitionrun property."
            ],
            [
                "transitionstart",
                "Fired when a CSS transition has actually started. Also available via the ontransitionstart property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLEmbedElement",
        "",
        "HTMLEmbedElement",
        "The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
        [
            [
                "HTMLEmbedElement.align",
                "Is a DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"center\", and \"justify\"."
            ],
            [
                "HTMLEmbedElement.height",
                "Is a DOMString reflecting the height HTML attribute, containing the displayed height of the resource."
            ],
            [
                "HTMLEmbedElement.name",
                "Is a DOMString representing the name of the embedded object."
            ],
            [
                "HTMLEmbedElement.src",
                "Is a DOMString that reflects the src HTML attribute, containing the address of the resource."
            ],
            [
                "HTMLEmbedElement.type",
                "Is a DOMString that reflects the type HTML attribute, containing the type of the resource."
            ],
            [
                "HTMLEmbedElement.width",
                "Is a DOMString that reflects the width HTML attribute, containing the displayed width of the resource."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLFieldSetElement",
        "",
        "HTMLFieldSetElement",
        "The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.",
        [
            [
                "HTMLFieldSetElement.disabled",
                "A Boolean reflecting the disabled HTML attribute, indicating whether the user can interact with the control."
            ],
            [
                "HTMLFieldSetElement.elementsRead only",
                "The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser."
            ],
            [
                "HTMLFieldSetElement.formRead only",
                "An HTMLFormControlsCollection or HTMLCollection referencing the containing form element, if this element is in a form. If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the null value if none matches."
            ],
            [
                "HTMLFieldSetElement.name",
                "A DOMString reflecting the name HTML attribute, containing the name of the field set. This can be used when accessing the field set in JavaScript. It is not part of the data which is sent to the server."
            ],
            [
                "HTMLFieldSetElement.typeRead only",
                "The DOMString \"fieldset\"."
            ],
            [
                "HTMLFieldSetElement.validationMessage",
                "A DOMString representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
            ],
            [
                "HTMLFieldSetElement.validity",
                "A ValidityState representing the validity states that this element is in."
            ],
            [
                "HTMLFieldSetElement.willValidate",
                "A Boolean false, because <fieldset> objects are never candidates for constraint validation."
            ],
            [
                "HTMLFieldSetElement.checkValidity()",
                "Always returns true because <fieldset> objects are never candidates for constraint validation."
            ],
            [
                "HTMLFieldSetElement.reportValidity()",
                "Always returns true because <fieldset> objects are never candidates for constraint validation."
            ],
            [
                "HTMLFieldSetElement.setCustomValidity()",
                "Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLFontElement",
        "",
        "HTMLFontElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "HTMLFontElement.color",
                "Is a DOMString that reflects the color HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format."
            ],
            [
                "HTMLFontElement.face",
                "Is a DOMString that reflects the face HTML attribute, containing a comma-separated list of one or more font names."
            ],
            [
                "HTMLFontElement.size",
                "Is a DOMString that reflects the size HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the size attribute of the <basefont> element, for example -2 or +1."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLFormControlsCollection",
        "",
        "HTMLFormControlsCollection",
        "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. It represents the lists returned by the HTMLFormElement interface's elements property and the HTMLFieldSetElement interface's elements property.",
        [
            [
                "HTMLFormControlsCollection.namedItem()",
                "Returns the RadioNodeList or the Element in the collection whose name or id matches the specified name, or null if no nodes match. Note that this version of namedItem() hide the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLFormElement",
        "",
        "HTMLFormElement",
        "The HTMLFormElement interface represents a <form> element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.",
        [
            [
                "HTMLFormElement.elements Read only",
                "A HTMLFormControlsCollection holding all form controls belonging to this form element."
            ],
            [
                "HTMLFormElement.lengthRead only",
                "A long reflecting the number of controls in the form."
            ],
            [
                "HTMLFormElement.name",
                "A DOMString reflecting the value of the form's name HTML attribute, containing the name of the form."
            ],
            [
                "HTMLFormElement.method",
                "A DOMString reflecting the value of the form's method HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set."
            ],
            [
                "HTMLFormElement.target",
                "A DOMString reflecting the value of the form's target HTML attribute, indicating where to display the results received from submitting the form."
            ],
            [
                "HTMLFormElement.action",
                "A DOMString reflecting the value of the form's action HTML attribute, containing the URI of a program that processes the information submitted by the form."
            ],
            [
                "HTMLFormElement.encoding or HTMLFormElement.enctype",
                "A DOMString reflecting the value of the form's enctype HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms."
            ],
            [
                "HTMLFormElement.acceptCharset",
                "A DOMString reflecting the value of the form's accept-charset HTML attribute, representing the character encoding that the server accepts."
            ],
            [
                "HTMLFormElement.autocomplete",
                "A DOMString reflecting the value of the form's autocomplete HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser."
            ],
            [
                "HTMLFormElement.noValidate",
                "A Boolean reflecting the value of the form's novalidate HTML attribute, indicating whether the form should not be validated."
            ],
            [
                "checkValidity()",
                "Returns true if the element's child controls are subject to constraint validation and satisfy those constraints; returns false if some controls do not satisfy their constraints. Fires an event named invalid at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to false."
            ],
            [
                "reportValidity()",
                "Returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user."
            ],
            [
                "requestSubmit()",
                "Requests that the form be submitted using the specified submit button and its corresponding configuration."
            ],
            [
                "reset()",
                "Resets the form to its initial state."
            ],
            [
                "submit()",
                "Submits the form to the server."
            ],
            [
                "HTMLFormElement.requestAutocomplete()",
                "Triggers a native browser interface to assist the user in completing the fields which have an autofill field name value that is not off or on. The form will receive an event once the user has finished with the interface, the event will either be autocomplete when the fields have been filled or autocompleteerror when there was a problem."
            ],
            [
                "formdata",
                "The formdata event fires after the entry list representing the form's data is constructed. Also available via the onformdata property."
            ],
            [
                "reset",
                "The reset event fires when a form is reset. Also available via the onreset property."
            ],
            [
                "submit",
                "The submit event fires when a form is submitted. Also available via the onsubmit property."
            ],
            [
                "document.forms[index]",
                "Returns the form at the specified index into the array of forms."
            ],
            [
                "document.forms[id]",
                "Returns the form whose ID is id."
            ],
            [
                "document.forms[name]",
                "Returns the form whose name attribute's value is name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLFrameSetElement",
        "",
        "HTMLFrameSetElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "HTMLFrameSetElement.cols",
                "Is a DOMString structured as a comma-separated list specifying the width of each column inside a frameset."
            ],
            [
                "HTMLFrameSetElement.rows",
                "Is a DOMString structured as a comma-separated list specifying the height of each column inside a frameset."
            ],
            [
                "WindowEventHandlers.onafterprint",
                "Is an event handler representing the code to be called when the afterprint event is raised."
            ],
            [
                "WindowEventHandlers.onbeforeprint",
                "Is an event handler representing the code to be called when the beforeprint event is raised."
            ],
            [
                "WindowEventHandlers.onbeforeunload",
                "Is an event handler representing the code to be called when the beforeunload event is raised."
            ],
            [
                "WindowEventHandlers.onhashchange",
                "Is an event handler representing the code to be called when the hashchange event is raised."
            ],
            [
                "WindowEventHandlers.onlanguagechange",
                "Is an event handler representing the code to be called when the languagechange event is raised."
            ],
            [
                "WindowEventHandlers.onmessage",
                "Is an event handler representing the code to be called when the message event is raised."
            ],
            [
                "WindowEventHandlers.onoffline",
                "Is an event handler representing the code to be called when the offline event is raised."
            ],
            [
                "WindowEventHandlers.ononline",
                "Is an event handler representing the code to be called when the online event is raised."
            ],
            [
                "WindowEventHandlers.onpagehide",
                "Is an event handler representing the code to be called when the pagehide event is raised."
            ],
            [
                "WindowEventHandlers.onpageshow",
                "Is an event handler representing the code to be called when the pageshow event is raised."
            ],
            [
                "WindowEventHandlers.onpopstate",
                "Is an event handler representing the code to be called when the popstate event is raised."
            ],
            [
                "WindowEventHandlers.onresize",
                "Is an event handler representing the code to be called when the resize event is raised."
            ],
            [
                "WindowEventHandlers.onstorage",
                "Is an event handler representing the code to be called when the storage event is raised."
            ],
            [
                "WindowEventHandlers.onunload",
                "Is an event handler representing the code to be called when the unload event is raised."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLHeadElement",
        "",
        "HTMLHeadElement",
        "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
        [
            [
                "HTMLHeadElement.profile",
                "Is a DOMString representing the URIs of one or more metadata profiles (white space separated)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLHeadingElement",
        "",
        "HTMLHeadingElement",
        "The HTMLHeadingElement interface represents the different heading elements, <h1> through <h6>. It inherits methods and properties from the HTMLElement interface.",
        [
            [
                "HTMLHeadingElement.align",
                "Is a DOMString representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLHRElement",
        "",
        "HTMLHRElement",
        "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
        [
            [
                "HTMLHRElement.align",
                "Is a DOMString, an enumerated attribute indicating alignment of the rule with respect to the surrounding context."
            ],
            [
                "HTMLHRElement.color",
                "Is a DOMString representing the name of the color of the rule."
            ],
            [
                "HTMLHRElement.noshade",
                "Is a Boolean that sets the rule to have no shading."
            ],
            [
                "HTMLHRElement.size",
                "Is a DOMString representing the height of the rule."
            ],
            [
                "HTMLHRElement.width",
                "Is a DOMString representing the width of the rule on the page."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLHtmlElement",
        "",
        "HTMLHtmlElement",
        "The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
        [
            [
                "HTMLHtmlElement.version",
                "Is a DOMString representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Omit it."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLIFrameElement",
        "",
        "HTMLIFrameElement",
        "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
        [
            [
                "HTMLIFrameElement.align",
                "Is a DOMString that specifies the alignment of the frame with respect to the surrounding context."
            ],
            [
                "HTMLIFrameElement.allow",
                "Is a list of origins the frame is allowed to display content from. This attribute also accepts the values self and src which represent the origin in the iframe's src attribute. The default value is src."
            ],
            [
                "HTMLIFrameElement.allowfullscreen",
                "Is a Boolean indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details."
            ],
            [
                "HTMLIFrameElement.allowPaymentRequest",
                "Is a Boolean indicating whether the Payment Request API may be invoked inside a cross-origin iframe."
            ],
            [
                "HTMLIFrameElement.contentDocument Read only",
                "Returns a Document, the active document in the inline frame's nested browsing context."
            ],
            [
                "HTMLIFrameElement.contentWindow Read only",
                "Returns a WindowProxy, the window proxy for the nested browsing context."
            ],
            [
                "HTMLIFrameElement.csp",
                "Specifies the Content Security Policy that an embedded document must agree to enforce upon itself."
            ],
            [
                "HTMLIFrameElement.frameBorder",
                "Is a DOMString that indicates whether to create borders between frames."
            ],
            [
                "HTMLIFrameElement.height",
                "Is a DOMString that reflects the height HTML attribute, indicating the height of the frame."
            ],
            [
                "HTMLIFrameElement.longDesc",
                "Is a DOMString that contains the URI of a long description of the frame."
            ],
            [
                "HTMLIFrameElement.marginHeight",
                "Is a DOMString being the height of the frame margin."
            ],
            [
                "HTMLIFrameElement.marginWidth",
                "Is a DOMString being the width of the frame margin."
            ],
            [
                "HTMLIFrameElement.name",
                "Is a DOMString that reflects the name HTML attribute, containing a name by which to refer to the frame."
            ],
            [
                "HTMLIFrameElement.featurePolicy Read only",
                "Returns the FeaturePolicy interface which provides a simple API for introspecting the feature policies applied to a specific document."
            ],
            [
                "HTMLIFrameElement.referrerPolicy",
                "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the linked resource."
            ],
            [
                "HTMLIFrameElement.sandbox",
                "Is a DOMSettableTokenList that reflects the sandbox HTML attribute, indicating extra restrictions on the behavior of the nested content."
            ],
            [
                "HTMLIFrameElement.scrolling",
                "Is a DOMString that indicates whether the browser should provide scrollbars for the frame."
            ],
            [
                "HTMLIFrameElement.src",
                "Is a DOMString that reflects the src HTML attribute, containing the address of the content to be embedded. Note that programmatically removing an <iframe>'s src attribute (e.g. via Element.removeAttribute()) causes about:blank to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS."
            ],
            [
                "HTMLIFrameElement.srcdoc",
                "Is a DOMString that represents the content to display in the frame."
            ],
            [
                "HTMLIFrameElement.width",
                "Is a DOMString that reflects the width HTML attribute, indicating the width of the frame."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLImageElement",
        "",
        "HTMLImageElement",
        "The HTMLImageElement interface represents an HTML <img> element, providing the properties and methods used to manipulate image elements.",
        [
            [
                "Image()",
                "The Image() constructor creates and returns a new HTMLImageElement object representing an HTML <img> element which is not attached to any DOM tree. It accepts optional width and height parameters. When called without parameters, new Image() is equivalent to calling document.createElement(\"img\")."
            ],
            [
                "HTMLImageElement.alt",
                "A DOMString that reflects the alt HTML attribute, thus indicating the alternate fallback content to be displayed if the image has not been loaded."
            ],
            [
                "HTMLImageElement.complete Read only",
                "Returns a Boolean that is true if the browser has finished fetching the image, whether successful or not. That means this value is also true if the image has no src value indicating an image to load."
            ],
            [
                "HTMLImageElement.crossOrigin",
                "A DOMString specifying the CORS setting for this image element. See CORS settings attributes for further details. This may be null if CORS is not used."
            ],
            [
                "HTMLImageElement.currentSrc Read only",
                "Returns a USVString representing the URL from which the currently displayed image was loaded. This may change as the image is adjusted due to changing conditions, as directed by any media queries which are in place."
            ],
            [
                "HTMLImageElement.decoding",
                "An optional DOMString representing a hint given to the browser on how it should decode the image. If this value is provided, it must be one of the possible permitted values: sync to decode the image synchronously, async to decode it asynchronously, or auto to indicate no preference (which is the default). Read the decoding page for details on the implications of this property's values."
            ],
            [
                "HTMLImageElement.height",
                "An integer value that reflects the height HTML attribute, indicating the rendered height of the image in CSS pixels."
            ],
            [
                "HTMLImageElement.isMap",
                "A Boolean that reflects the ismap HTML attribute, indicating that the image is part of a server-side image map. This is different from a client-side image map, specified using an <img> element and a corresponding <map> which contains <area> elements indicating the clickable areas in the image. The image must be contained within an <a> element; see the ismap page for details."
            ],
            [
                "HTMLImageElement.loading",
                "A DOMString providing a hint to the browser used to optimize loading the document by determining whether to load the image immediately (eager) or on an as-needed basis (lazy)."
            ],
            [
                "HTMLImageElement.naturalHeight Read only",
                "Returns an integer value representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows 0. This is the height the image would be if it were rendered at its natural full size."
            ],
            [
                "HTMLImageElement.naturalWidth Read only",
                "An integer value representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show 0. This is the width the image would be if it were rendered at its natural full size."
            ],
            [
                "HTMLImageElement.referrerPolicy",
                "A DOMString that reflects the referrerpolicy HTML attribute, which tells the user agent how to decide which referrer to use in order to fetch the image. Read this article for details on the possible values of this string."
            ],
            [
                "HTMLImageElement.sizes",
                "A DOMString reflecting the sizes HTML attribute. This string specifies a list of comma-separated conditional sizes for the image; that is, for a given viewport size, a particular image size is to be used. Read the documentation on the sizes page for details on the format of this string."
            ],
            [
                "HTMLImageElement.src",
                "A USVString that reflects the src HTML attribute, which contains the full URL of the image including base URI. You can load a different image into the element by changing the URL in the src attribute."
            ],
            [
                "HTMLImageElement.srcset",
                "A USVString reflecting the srcset HTML attribute. This specifies a list of candidate images, separated by commas (',', U+002C COMMA). Each candidate image is a URL followed by a space, followed by a specially-formatted string indicating the size of the image. The size may be specified either the width or a size multiple. Read the srcset page for specifics on the format of the size substring."
            ],
            [
                "HTMLImageElement.useMap",
                "A DOMString reflecting the usemap HTML attribute, containing the page-local URL of the <map> element describing the image map to use. The page-local URL is a pound (hash) symbol (#) followed by the ID of the <map> element, such as #my-map-element. The <map> in turn contains <area> elements indicating the clickable areas in the image."
            ],
            [
                "HTMLImageElement.width",
                "An integer value that reflects the width HTML attribute, indicating the rendered width of the image in CSS pixels."
            ],
            [
                "HTMLImageElement.x Read only",
                "An integer indicating the horizontal offset of the left border edge of the image's CSS layout box relative to the origin of the <html> element's containing block."
            ],
            [
                "HTMLImageElement.y Read only",
                "The integer vertical offset of the top border edge of the image's CSS layout box relative to the origin of the <html> element's containing block."
            ],
            [
                "HTMLImageElement.align",
                "A DOMString indicating the alignment of the image with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\". This is obsolete; you should instead use CSS (such as text-align, which works with images despite its name) to specify the alignment."
            ],
            [
                "HTMLImageElement.border",
                "A DOMString which defines the width of the border surrounding the image. This is deprecated; use the CSS border property instead."
            ],
            [
                "HTMLImageElement.hspace",
                "An integer value which specifies the amount of space (in pixels) to leave empty on the left and right sides of the image."
            ],
            [
                "HTMLImageElement.longDesc",
                "A USVString specifying the URL at which a long description of the image's contents may be found. This is used to turn the image into a hyperlink automatically. Modern HTML should instead place an <img> inside an <a> element defining the hyperlink."
            ],
            [
                "HTMLImageElement.lowsrc",
                "A USVString specifying the URL of a low-quality (but faster to load) version of the same image. This was once used by browsers under constrained network conditions or on slow devices."
            ],
            [
                "HTMLImageElement.name",
                "A DOMString representing the name of the element."
            ],
            [
                "HTMLImageElement.vspace",
                "An integer value specifying the amount of empty space, in pixels, to leave above and below the image."
            ],
            [
                "HTMLImageElement.decode()",
                "Returns a Promise that resolves when the image is decoded and it's safe to append the image to the DOM. This prevents rendering of the next frame from having to pause to decode the image, as would happen if an undecoded image were added to the DOM."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLInputElement",
        "",
        "HTMLInputElement",
        "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
        [
            [
                "HTMLInputElement.align",
                "string: Represents the alignment of the element. Use CSS instead."
            ],
            [
                "HTMLInputElement.useMap",
                "string: Represents a client-side image map."
            ],
            [
                "HTMLInputElement.stepDown()",
                "Decrements the value by (step * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception: if the method is not applicable to for the current type value, if the element has no step value, if the value cannot be converted to a number, if the resulting value is above the max or below the min."
            ],
            [
                "HTMLInputElement.stepUp()",
                "Increments the value by (step * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception: if the method is not applicable to for the current type value., if the element has no step value, if the value cannot be converted to a number, if the resulting value is above the max or below the min."
            ],
            [
                "HTMLInputElement.mozSetFileArray()",
                "Sets the files selected on the input to the given array of File objects. This is an alternative to mozSetFileNameArray() which can be used in frame scripts: a chrome script can open files as File objects and send them via message manager."
            ],
            [
                "HTMLInputElement.mozGetFileNameArray()",
                "Returns an array of all the file names from the input."
            ],
            [
                "HTMLInputElement.mozSetFileNameArray()",
                "Sets the filenames for the files selected on the input. Not for use in frame scripts, because it accesses the file system."
            ],
            [
                "input",
                "Fires when the value of an <input>, <select>, or <textarea> element has been changed. Note that this is actually fired on the HTMLElement interface and also applies to contenteditable elements, but we've listed it here because it is most commonly used with form input elements. Also available via the oninput event handler property."
            ],
            [
                "invalid",
                "Fired when an element does not satisfy its constraints during constraint validation. Also available via the oninvalid event handler property."
            ],
            [
                "search",
                "Fired when a search is initiated on an <input> of type=\"search\". Also available via the onsearch event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLKeygenElement",
        "",
        "HTMLKeygenElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "autofocus",
                "Is a Boolean that reflects the autofocus HTML attribute, indicating that the form control should have input focus when the page loads."
            ],
            [
                "challenge",
                "Is a DOMString that reflects the challenge HTML attribute, containing a challenge string that is packaged with the submitted key."
            ],
            [
                "form Read only",
                "Is a HTMLFormElement that indicates the control's form owner, reflecting the form HTML attribute if it is defined."
            ],
            [
                "keytype",
                "Is a DOMString that reflects the keytype HTML attribute, containing the type of key used."
            ],
            [
                "labels Read only Unimplemented (see bug 556743)",
                "Is a NodeList that represents a list of label elements associated with this keygen element."
            ],
            [
                "name",
                "Is a DOMString that reflects the name HTML attribute, containing the name for the control that is submitted with form data."
            ],
            [
                "type Read only",
                "Is a DOMString that must be the value keygen."
            ],
            [
                "validationMessage Read only",
                "Is a DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
            ],
            [
                "validity Read only",
                "Is a ValidityState representing the validity states that this element is in."
            ],
            [
                "willValidate",
                "Is a Boolean that is always false because keygen objects are never candidates for constraint validation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLLabelElement",
        "",
        "HTMLLabelElement",
        "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.",
        [
            [
                "HTMLLabelElement.control Read only",
                "Is a HTMLElement representing the control with which the label is associated."
            ],
            [
                "HTMLLabelElement.form Read only",
                "Is a HTMLFormElement object representing the form with which the labeled control is associated, or null if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for HTMLLabelElement.control.form."
            ],
            [
                "HTMLLabelElement.htmlFor",
                "Is a string containing the ID of the labeled control. This reflects the for attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLLegendElement",
        "",
        "HTMLLegendElement",
        "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
        [
            [
                "HTMLLegendElement.form Read only",
                "Is a HTMLFormElement representing the form that this legend belongs to. If the legend has a fieldset element as its parent, then this attribute returns the same value as the form attribute on the parent fieldset element. Otherwise, it returns null."
            ],
            [
                "HTMLLegendElement.accessKey",
                "Is a DOMString representing a single-character access key to give access to the element."
            ],
            [
                "HTMLLegendElement.align",
                "Is a DOMString representing the alignment relative to the form set"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLLIElement",
        "",
        "HTMLLIElement",
        "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
        [
            [
                "HTMLLIElement.type",
                "Is a DOMString representing the type of the bullets, \"disc\", \"square\" or \"circle\". As the standard way of defining the list type is via the CSS list-style-type property, use the CSSOM methods to set it via a script."
            ],
            [
                "HTMLLIElement.value",
                "Is a long indicating the ordinal position of the list element inside a given <ol>. It reflects the value attribute of the HTML <li> element, and can be smaller than 0. If the <li> element is not a child of an <ol> element, the property has no meaning."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLLinkElement",
        "",
        "HTMLLinkElement",
        "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa (corresponds to <link> element; not to be confused with <a>, which is represented by HTMLAnchorElement). This object inherits all of the properties and methods of the HTMLElement interface.",
        [
            [
                "HTMLLinkElement.as",
                "Is a DOMString representing the type of content being loaded by the HTML link."
            ],
            [
                "HTMLLinkElement.crossOrigin",
                "Is a DOMString that corresponds to the CORS setting for this link element. See CORS settings attributes for details."
            ],
            [
                "HTMLLinkElement.disabled",
                "Is a Boolean which represents whether the link is disabled; currently only used with style sheet links."
            ],
            [
                "HTMLLinkElement.href",
                "Is a DOMString representing the URI for the target resource."
            ],
            [
                "HTMLLinkElement.hreflang",
                "Is a DOMString representing the language code for the linked resource."
            ],
            [
                "HTMLLinkElement.media",
                "Is a DOMString representing a list of one or more media formats to which the resource applies."
            ],
            [
                "HTMLLinkElement.referrerPolicy",
                "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use."
            ],
            [
                "HTMLLinkElement.rel",
                "Is a DOMString representing the forward relationship of the linked resource from the document to the resource."
            ],
            [
                "HTMLLinkElement.relList Read only",
                "Is a DOMTokenList that reflects the rel HTML attribute, as a list of tokens."
            ],
            [
                "HTMLLinkElement.sizes Read only",
                "Is a DOMSettableTokenList that reflects the sizes HTML attribute, as a list of tokens."
            ],
            [
                "HTMLLinkElement.sheet Read only",
                "Returns the StyleSheet object associated with the given element, or null if there is none."
            ],
            [
                "HTMLLinkElement.type",
                "Is a DOMString representing the MIME type of the linked resource."
            ],
            [
                "HTMLLinkElement.charset",
                "Is a DOMString representing the character encoding for the target resource."
            ],
            [
                "HTMLLinkElement.rev",
                "Is a DOMString representing the reverse relationship of the linked resource from the resource to the document. Note: Currently the W3C HTML 5.2 spec states that rev is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete."
            ],
            [
                "HTMLLinkElement.target",
                "Is a DOMString representing the name of the target frame to which the resource applies."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMapElement",
        "",
        "HTMLMapElement",
        "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
        [
            [
                "HTMLMapElement.name",
                "Is a DOMString representing the <map> element for referencing it other context. If the id attribute is set, this must have the same value; and it cannot be null or empty."
            ],
            [
                "HTMLMapElement.areas Read only",
                "Is a live HTMLCollection representing the <area> elements associated to this <map>."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMarqueeElement",
        "",
        "HTMLMarqueeElement",
        "",
        [
            [
                "HTMLMarqueeElement.behavior",
                "Sets how the text is scrolled within the marquee. Possible values are scroll, slide and alternate. If no value is specified, the default value is scroll."
            ],
            [
                "HTMLMarqueeElement.bgColor",
                "Sets the background color through color name or hexadecimal value."
            ],
            [
                "HTMLMarqueeElement.direction",
                "Sets the direction of the scrolling within the marquee. Possible values are left, right, up and down. If no value is specified, the default value is left."
            ],
            [
                "HTMLMarqueeElement.height",
                "Sets the height in pixels or percentage value."
            ],
            [
                "HTMLMarqueeElement.hspace",
                "Sets the horizontal margin."
            ],
            [
                "HTMLMarqueeElement.loop",
                "Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously."
            ],
            [
                "HTMLMarqueeElement.scrollAmount",
                "Sets the amount of scrolling at each interval in pixels. The default value is 6."
            ],
            [
                "HTMLMarqueeElement.scrollDelay",
                "Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead, unless trueSpeed is true."
            ],
            [
                "HTMLMarqueeElement.trueSpeed",
                "By default, scrollDelay values lower than 60 are ignored. If trueSpeed is true, then those values are not ignored."
            ],
            [
                "HTMLMarqueeElement.vspace",
                "Sets the vertical margin."
            ],
            [
                "HTMLMarqueeElement.width",
                "Sets the width in pixels or percentage value."
            ],
            [
                "HTMLMarqueeElement.onbounce",
                "Fires when the marquee has reached the end of its scroll position. It can only fire when the behavior attribute is set to alternate."
            ],
            [
                "HTMLMarqueeElement.onfinish",
                "Fires when the marquee has finished the amount of scrolling that is set by the loop attribute. It can only fire when the loop attribute is set to some number that is greater than 0."
            ],
            [
                "HTMLMarqueeElement.onstart",
                "Fires when the marquee starts scrolling."
            ],
            [
                "HTMLMarqueeElement.start()",
                "Starts scrolling of the marquee."
            ],
            [
                "HTMLMarqueeElement.stop()",
                "Stops scrolling of the marquee."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMediaElement",
        "",
        "HTMLMediaElement",
        "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video. The HTMLVideoElement and HTMLAudioElement elements both inherit this interface.",
        [
            [
                "HTMLMediaElement.audioTracks",
                "A AudioTrackList that lists the AudioTrack objects contained in the element."
            ],
            [
                "HTMLMediaElement.autoplay",
                "A Boolean that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption. Note: Automatically playing audio when the user doesn't expect or desire it is a poor user experience and should be avoided in most cases, though there are exceptions. See the Autoplay guide for media and Web Audio APIs for more information. Keep in mind that browsers may ignore autoplay requests, so you should ensure that your code isn't dependent on autoplay working."
            ],
            [
                "HTMLMediaElement.buffered Read only",
                "Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed."
            ],
            [
                "HTMLMediaElement.controller",
                "Is a MediaController object that represents the media controller assigned to the element, or null if none is assigned."
            ],
            [
                "HTMLMediaElement.controls",
                "Is a Boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed."
            ],
            [
                "HTMLMediaElement.controlsList Read only",
                "Returns a DOMTokenList that helps the user agent select what controls to show on the media element whenever the user agent shows its own set of controls. The DOMTokenList takes one or more of three possible values: nodownload, nofullscreen, and noremoteplayback."
            ],
            [
                "HTMLMediaElement.crossOrigin",
                "A DOMString indicating the CORS setting for this media element."
            ],
            [
                "HTMLMediaElement.currentSrc Read only",
                "Returns a DOMString with the absolute URL of the chosen media resource."
            ],
            [
                "HTMLMediaElement.currentTime",
                "A double-precision floating-point value indicating the current playback time in seconds; if the media has not started to play and has not been seeked, this value is the media's initial playback time. Setting this value seeks the media to the new time. The time is specified relative to the media's timeline."
            ],
            [
                "HTMLMediaElement.defaultMuted",
                "A Boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default."
            ],
            [
                "HTMLMediaElement.defaultPlaybackRate",
                "A double indicating the default playback rate for the media."
            ],
            [
                "HTMLMediaElement.disableRemotePlayback",
                "A Boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI."
            ],
            [
                "HTMLMediaElement.duration Read only",
                "A read-only double-precision floating-point value indicating the total duration of the media in seconds. If no media data is available, the returned value is NaN. If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity."
            ],
            [
                "HTMLMediaElement.ended Read only",
                "Returns a Boolean that indicates whether the media element has finished playing."
            ],
            [
                "HTMLMediaElement.error Read only",
                "Returns a MediaError object for the most recent error, or null if there has not been an error."
            ],
            [
                "HTMLMediaElement.loop",
                "A Boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end."
            ],
            [
                "HTMLMediaElement.mediaKeys Read only",
                "Returns a MediaKeys object or null. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback."
            ],
            [
                "HTMLMediaElement.muted",
                "Is a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise."
            ],
            [
                "HTMLMediaElement.networkState Read only",
                "Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network."
            ],
            [
                "HTMLMediaElement.paused Read only",
                "Returns a Boolean that indicates whether the media element is paused."
            ],
            [
                "HTMLMediaElement.playbackRate",
                "Is a double that indicates the rate at which the media is being played back."
            ],
            [
                "HTMLMediaElement.played Read only",
                "Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any."
            ],
            [
                "HTMLMediaElement.preload",
                "Is a DOMString that reflects the preload HTML attribute, indicating what data should be preloaded, if any. Possible values are: none, metadata, auto."
            ],
            [
                "HTMLMediaElement.preservesPitch",
                "Is a Boolean that determines if the pitch of the sound will be preserved. If set to false, the pitch will adjust to the speed of the audio. This is implemented with prefixes in Firefox (mozPreservesPitch) and WebKit (webkitPreservesPitch)."
            ],
            [
                "HTMLMediaElement.readyState Read only",
                "Returns a unsigned short (enumeration) indicating the readiness state of the media."
            ],
            [
                "HTMLMediaElement.seekable Read only",
                "Returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any."
            ],
            [
                "HTMLMediaElement.seeking Read only",
                "Returns a Boolean that indicates whether the media is in the process of seeking to a new position."
            ],
            [
                "HTMLMediaElement.sinkId Read only",
                "Returns a DOMString that is the unique ID of the audio device delivering output, or an empty string if it is using the user agent default. This ID should be one of the MediaDeviceInfo.deviceid values returned from MediaDevices.enumerateDevices(), id-multimedia, or id-communications."
            ],
            [
                "HTMLMediaElement.src",
                "Is a DOMString that reflects the src HTML attribute, which contains the URL of a media resource to use."
            ],
            [
                "HTMLMediaElement.srcObject",
                "Is a MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned."
            ],
            [
                "HTMLMediaElement.textTracks Read only",
                "Returns the list of TextTrack objects contained in the element."
            ],
            [
                "HTMLMediaElement.videoTracks Read only",
                "Returns the list of VideoTrack objects contained in the element."
            ],
            [
                "HTMLMediaElement.volume",
                "Is a double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest)."
            ],
            [
                "HTMLMediaElement.onencrypted",
                "Sets the EventHandler called when the media is encrypted."
            ],
            [
                "HTMLMediaElement.onwaitingforkey",
                "Sets the EventHandler called when playback is blocked while waiting for an encryption key."
            ],
            [
                "HTMLMediaElement.mediaGroup",
                "A DOMString that reflects the mediagroup HTML attribute, which indicates the name of the group of elements it belongs to. A group of media elements shares a common MediaController."
            ],
            [
                "HTMLMediaElement.mozAudioCaptured Read only",
                "Returns a Boolean. Related to audio stream capture."
            ],
            [
                "HTMLMediaElement.mozChannels Read only",
                "Returns a double representing the number of channels in the audio resource (e.g., 2 for stereo)."
            ],
            [
                "HTMLMediaElement.mozFragmentEnd",
                "Is a double that provides access to the fragment end time if the media element has a fragment URI for currentSrc, otherwise it is equal to the media duration."
            ],
            [
                "HTMLMediaElement.mozFrameBufferLength",
                "Is a unsigned long that indicates the number of samples that will be returned in the framebuffer of each MozAudioAvailable event. This number is a total for all channels, and by default is set to be the number of channels * 1024 (e.g., 2 channels * 1024 samples = 2048 total). The mozFrameBufferLength property can be set to a new value for lower latency, larger amounts of data, etc. The size given must be a number between 512 and 16384. Using any other size results in an exception being thrown. The best time to set a new length is after the loadedmetadata event fires, when the audio info is known, but before the audio has started or MozAudioAvailable events have begun firing."
            ],
            [
                "HTMLMediaElement.mozSampleRate Read only",
                "Returns a double representing the number of samples per second that will be played. For example, 44100 samples per second is the sample rate used by CD audio."
            ],
            [
                "HTMLMediaElement.onmozinterruptbegin",
                "Sets the event handler called when the media element is interrupted because of the Audio Channel manager. This was Firefox-specific, having been implemented for Firefox OS, and was removed in Firefox 55."
            ],
            [
                "HTMLMediaElement.onmozinterruptend",
                "Sets the EventHandler called when the interruption is concluded. This was Firefox-specific, having been implemented for Firefox OS, and was removed in Firefox 55."
            ],
            [
                "HTMLMediaElement.addTextTrack()",
                "Adds a text track (such as a track for subtitles) to a media element."
            ],
            [
                "HTMLMediaElement.captureStream()",
                "Returns MediaStream, captures a stream of the media content."
            ],
            [
                "HTMLMediaElement.canPlayType()",
                "Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string probably if the media should be playable, maybe if there's not enough information to determine whether the media will play or not, or an empty string if the media cannot be played."
            ],
            [
                "HTMLMediaElement.fastSeek()",
                "Quickly seeks to the given time with low precision."
            ],
            [
                "HTMLMediaElement.load()",
                "Resets the media to the beginning and selects the best available source from the sources provided using the src attribute or the <source> element."
            ],
            [
                "HTMLMediaElement.pause()",
                "Pauses the media playback."
            ],
            [
                "HTMLMediaElement.play()",
                "Begins playback of the media."
            ],
            [
                "HTMLMediaElement.seekToNextFrame()",
                "Seeks to the next frame in the media. This non-standard, experimental method makes it possible to manually drive reading and rendering of media at a custom speed, or to move through the media frame-by-frame to perform filtering or other operations."
            ],
            [
                "HTMLMediaElement.setMediaKeys()",
                "Returns Promise. Sets the MediaKeys keys to use when decrypting media during playback."
            ],
            [
                "HTMLMediaElement.setSinkId()",
                "Sets the ID of the audio device to use for output and returns a Promise. This only works when the application is authorized to use the specified device."
            ],
            [
                "HTMLMediaElement.mozCaptureStream()",
                "[enter description]"
            ],
            [
                "HTMLMediaElement.mozCaptureStreamUntilEnded()",
                "[enter description]"
            ],
            [
                "HTMLMediaElement.mozGetMetadata()",
                "Returns Object, which contains properties that represent metadata from the playing media resource as {key: value} pairs. A separate copy of the data is returned each time the method is called. This method must be called after the loadedmetadata event fires."
            ],
            [
                "HTMLMediaElement.mozLoadFrom()",
                "This method, available only in Mozilla's implementation, loads data from another media element. This works similarly to load() except that instead of running the normal resource selection algorithm, the source is set to the other element's currentSrc. This is optimized so this element gets access to all of the other element's cached and buffered data; in fact, the two elements share downloaded data, so data downloaded by either element is available to both."
            ],
            [
                "abort",
                "Fired when the resource was not fully loaded, but not as the result of an error."
            ],
            [
                "canplay",
                "Fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content"
            ],
            [
                "canplaythrough",
                "Fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content."
            ],
            [
                "durationchange",
                "Fired when the duration attribute has been updated."
            ],
            [
                "emptied",
                "Fired when the media has become empty; for example, when the media has already been loaded (or partially loaded), and the HTMLMediaElement.load() method is called to reload it."
            ],
            [
                "ended",
                "Fired when playback stops when end of the media (<audio> or <video>) is reached or because no further data is available."
            ],
            [
                "error",
                "Fired when the resource could not be loaded due to an error."
            ],
            [
                "loadeddata",
                "Fired when the first frame of the media has finished loading."
            ],
            [
                "loadedmetadata",
                "Fired when the metadata has been loaded"
            ],
            [
                "loadstart",
                "Fired when the browser has started to load a resource."
            ],
            [
                "pause",
                "Fired when a request to pause play is handled and the activity has entered its paused state, most commonly occurring when the media's HTMLMediaElement.pause() method is called."
            ],
            [
                "play",
                "Fired when the paused property is changed from true to false, as a result of the HTMLMediaElement.play() method, or the autoplay attribute"
            ],
            [
                "playing",
                "Fired when playback is ready to start after having been paused or delayed due to lack of data"
            ],
            [
                "progress",
                "Fired periodically as the browser loads a resource."
            ],
            [
                "ratechange",
                "Fired when the playback rate has changed."
            ],
            [
                "seeked",
                "Fired when a seek operation completes"
            ],
            [
                "seeking",
                "Fired when a seek operation begins"
            ],
            [
                "stalled",
                "Fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming."
            ],
            [
                "suspend",
                "Fired when the media data loading has been suspended."
            ],
            [
                "timeupdate",
                "Fired when the time indicated by the currentTime attribute has been updated."
            ],
            [
                "volumechange",
                "Fired when the volume has changed."
            ],
            [
                "waiting",
                "Fired when playback has stopped because of a temporary lack of data."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMenuElement",
        "",
        "HTMLMenuElement",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMenuItemElement",
        "",
        "HTMLMenuItemElement",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMetaElement",
        "",
        "HTMLMetaElement",
        "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLMeterElement",
        "",
        "HTMLMeterElement",
        "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
        [
            [
                "HTMLMeterElement.high",
                "A double representing the value of the high boundary, reflecting the high attribute."
            ],
            [
                "HTMLMeterElement.low",
                "A double representing the value of the low boundary, reflecting the lowattribute."
            ],
            [
                "HTMLMeterElement.max",
                "A double representing the maximum value, reflecting the max attribute."
            ],
            [
                "HTMLMeterElement.min",
                "A double representing the minimum value, reflecting the min attribute."
            ],
            [
                "HTMLMeterElement.optimum",
                "A double representing the optimum, reflecting the optimum attribute."
            ],
            [
                "HTMLMeterElement.value",
                "A double representing the currrent value, reflecting the value attribute."
            ],
            [
                "HTMLMeterElement.labelsRead only",
                "A NodeList of <label> elements that are associated with the element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLModElement",
        "",
        "HTMLModElement",
        "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
        [
            [
                "HTMLModElement.cite",
                "Is a DOMString reflecting the cite HTML attribute, containing a URI of a resource explaining the change."
            ],
            [
                "HTMLModElement.dateTime",
                "Is a DOMString reflecting the datetime HTML attribute, containing a date-and-time string representing a timestamp for the change."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLObjectElement",
        "",
        "HTMLObjectElement",
        "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
        [
            [
                "HTMLObjectElement.align",
                "Is a DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
            ],
            [
                "HTMLObjectElement.archive",
                "Is a DOMString that reflects the archive HTML attribute, containing a list of archives for resources for this object."
            ],
            [
                "HTMLObjectElement.border",
                "Is a DOMString that reflects the border HTML attribute, specifying the width of a border around the object."
            ],
            [
                "HTMLObjectElement.code",
                "Is a DOMString representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself."
            ],
            [
                "HTMLObjectElement.codeBase",
                "Is a DOMString that reflects the codebase HTML attribute, specifying the base path to use to resolve relative URIs."
            ],
            [
                "HTMLObjectElement.codeType",
                "Is a DOMString that reflects the codetype HTML attribute, specifying the content type of the data."
            ],
            [
                "HTMLObjectElement.contentDocument Read only",
                "Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null."
            ],
            [
                "HTMLObjectElement.contentWindow Read only",
                "Returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null."
            ],
            [
                "HTMLObjectElement.data",
                "Returns a DOMString that reflects the data HTML attribute, specifying the address of a resource's data."
            ],
            [
                "HTMLObjectElement.declare",
                "Is a Boolean that reflects the declare HTML attribute, indicating that this is a declaration, not an instantiation, of the object."
            ],
            [
                "HTMLObjectElement.form Read only",
                "Returns a HTMLFormElement representing the object element's form owner, or null if there isn't one."
            ],
            [
                "HTMLObjectElement.height",
                "Returns a DOMString that reflects the height HTML attribute, specifying the displayed height of the resource in CSS pixels."
            ],
            [
                "HTMLObjectElement.hspace",
                "Is a long representing the horizontal space in pixels around the control."
            ],
            [
                "HTMLObjectElement.name",
                "Returns a DOMString that reflects the name HTML attribute, specifying the name of the browsing context."
            ],
            [
                "HTMLObjectElement.standby",
                "Is a DOMString that reflects the standby HTML attribute, specifying a message to display while the object loads."
            ],
            [
                "HTMLObjectElement.type",
                "Is a DOMString that reflects the type HTML attribute, specifying the MIME type of the resource."
            ],
            [
                "HTMLObjectElement.useMap",
                "Is a DOMString that reflects the usemap HTML attribute, specifying a <map> element to use."
            ],
            [
                "HTMLObjectElement.validationMessage Read only",
                "Returns a DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
            ],
            [
                "HTMLObjectElement.validity Read only",
                "Returns a ValidityState with the validity states that this element is in."
            ],
            [
                "HTMLObjectElement.vspace",
                "Is a long representing the horizontal space in pixels around the control."
            ],
            [
                "HTMLObjectElement.width",
                "Is a DOMString that reflects the width HTML attribute, specifying the displayed width of the resource in CSS pixels."
            ],
            [
                "HTMLObjectElement.willValidate Read only",
                "Returns a Boolean that indicates whether the element is a candidate for constraint validation. Always false for HTMLObjectElement objects."
            ],
            [
                "HTMLObjectElement.checkValidity()",
                "Returns a Boolean that always is true, because object objects are never candidates for constraint validation."
            ],
            [
                "HTMLObjectElement.setCustomValidity()",
                "Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLOListElement",
        "",
        "HTMLOListElement",
        "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
        [
            [
                "HTMLOListElement.reversed",
                "Is a Boolean value reflecting the reversed and defining if the numbering is descending, that is its value is true, or ascending (false)."
            ],
            [
                "HTMLOListElement.start",
                "Is a long value reflecting the start and defining the value of the first number of the first element of the list."
            ],
            [
                "HTMLOListElement.type",
                "Is a DOMString value reflecting the type and defining the kind of marker to be used to display. It can have the following values: '1' meaning that decimal numbers are used: 1, 2, 3, 4, 5, … 'a' meaning that the lowercase latin alphabet is used: a, b, c, d, e, … 'A' meaning that the uppercase latin alphabet is used: A, B, C, D, E, … 'i' meaning that the lowercase latin numerals are used: i, ii, iii, iv, v, … 'I' meaning that the uppercase latin numerals are used: I, II, III, IV, V, …"
            ],
            [
                "HTMLOListElement.compact",
                "Is a Boolean indicating that spacing between list items should be reduced. This property reflects the compact attribute only, it doesn't consider the line-height CSS property used for that behavior in modern pages."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLOptGroupElement",
        "",
        "HTMLOptGroupElement",
        "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
        [
            [
                "HTMLOptGroupElement.disabled",
                "Is a boolean representing whether or not the whole list of children <option> is disabled (true) or not (false)."
            ],
            [
                "HTMLOptGroupElement.label",
                "Is a DOMString representing the label for the group."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLOptionElement",
        "",
        "HTMLOptionElement",
        "The HTMLOptionElement interface represents <option> elements and inherits all properties and methods of the HTMLElement interface.",
        [
            [
                "HTMLOptionElement.defaultSelected",
                "Has a value of either true or false that shows the initial value of the selected HTML attribute, indicating whether the option is selected by default or not."
            ],
            [
                "HTMLOptionElement.disabled",
                "Has a value of either true or false representing the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected. An option can also be disabled if it is a child of an <optgroup> element that is disabled."
            ],
            [
                "HTMLOptionElement.form Read only",
                "Is a HTMLFormElement representing the same value as the form of the corresponding <select> element, if the option is a descendant of a <select> element, or null if none is found."
            ],
            [
                "HTMLOptionElement.index Read only",
                "Is a long representing the position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0."
            ],
            [
                "HTMLOptionElement.label Read only",
                "Is a DOMString that reflects the value of the label HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content."
            ],
            [
                "HTMLOptionElement.selected",
                "Has a value of either true or false that indicates whether the option is currently selected."
            ],
            [
                "HTMLOptionElement.text",
                "Is a DOMString that contains the text content of the element."
            ],
            [
                "HTMLOptionElement.value",
                "Is a DOMString that reflects the value of the value HTML attribute, if it exists; otherwise reflects value of the Node.textContent property."
            ],
            [
                "Option()",
                "Is a constructor creating an HTMLOptionElement object. It has four values: the text to display, text, the value associated, value, the value of defaultSelected, and the value of selected. The last three values are optional."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLOptionsCollection",
        "",
        "HTMLOptionsCollection",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLOutputElement",
        "",
        "HTMLOutputElement",
        "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
        [
            [
                "HTMLOutputElement.defaultValue",
                "A DOMString representing the default value of the element, initially the empty string."
            ],
            [
                "HTMLOutputElement.formRead only",
                "An HTMLFormElement indicating the form associated with the control, reflecting the form HTML attribute if it is defined."
            ],
            [
                "HTMLOutputElement.htmlForRead only",
                "A DOMTokenList reflecting the for HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated value."
            ],
            [
                "HTMLOutputElement.labelsRead only",
                "A NodeList of <label> elements associated with the element."
            ],
            [
                "HTMLOutputElement.name",
                "A DOMString reflecting the name HTML attribute, containing the name for the control that is submitted with form data."
            ],
            [
                "HTMLOutputElement.typeRead only",
                "The DOMString \"output\"."
            ],
            [
                "HTMLOutputElement.validationMessageRead only",
                "A DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
            ],
            [
                "HTMLOutputElement.validityRead only",
                "A ValidityState representing the validity states that this element is in."
            ],
            [
                "HTMLOutputElement.value",
                "A DOMString representing the value of the contents of the elements. Behaves like the Node.textContent property."
            ],
            [
                "HTMLOutputElement.willValidateRead only",
                "A Boolean indicating whether the element is a candidate for constraint validation."
            ],
            [
                "HTMLOutputElement.checkValidity()",
                "Checks the validity of the element and returns a Boolean holding the check result."
            ],
            [
                "HTMLOutputElement.reportValidity()",
                "This method reports the problems with the constraints on the element, if any, to the user. If there are problems, fires an invalid event at the element, and returns false; if there are no problems, it returns true."
            ],
            [
                "HTMLOutputElement.setCustomValidity()",
                "Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLParagraphElement",
        "",
        "HTMLParagraphElement",
        "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
        [
            [
                "HTMLParagraphElement.align",
                "A DOMString representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", \"justify\", and \"center\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLParamElement",
        "",
        "HTMLParamElement",
        "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.",
        [
            [
                "HTMLParamElement.name",
                "Is a DOMString representing the name of the parameter. It reflects the name attribute."
            ],
            [
                "HTMLParamElement.value",
                "Is a DOMString representing the value associated to the parameter. It reflects the value attribute."
            ],
            [
                "HTMLParamElement.type",
                "Is a DOMString containing the type of the parameter when valueType has the \"ref\" value. It reflects the type attribute."
            ],
            [
                "HTMLParamElement.valueType",
                "Is a DOMString containing the type of the value. It reflects the valuetype attribute and has one of the values: \"data\", \"ref\", or \"object\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLPictureElement",
        "",
        "HTMLPictureElement",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLPreElement",
        "",
        "HTMLPreElement",
        "The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).",
        [
            [
                "HTMLPreElement.width",
                "Is a long value reflecting the obsolete width attribute, containing a fixed-size length for the <pre> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLProgressElement",
        "",
        "HTMLProgressElement",
        "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
        [
            [
                "HTMLProgressElement.max",
                "Is a double value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is 1.0."
            ],
            [
                "HTMLProgressElement.positionRead only",
                "Returns a double value returning the result of dividing the current value (value) by the maximum value (max); if the progress bar is an indeterminate progress bar, it returns -1."
            ],
            [
                "HTMLProgressElement.value",
                "Is a double value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns 0."
            ],
            [
                "HTMLProgressElement.labelsRead only",
                "Returns NodeList containing the list of <label> elements that are labels for this element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLQuoteElement",
        "",
        "HTMLQuoteElement",
        "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
        [
            [
                "HTMLQuoteElement.cite",
                "Is a DOMString reflecting the cite HTML attribute, containing a URL for the source of the quotation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLScriptElement",
        "",
        "HTMLScriptElement",
        "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
        [
            [
                "HTMLScriptElement.type",
                "Is a DOMString representing the MIME type of the script. It reflects the type attribute."
            ],
            [
                "HTMLScriptElement.src",
                "Is a DOMString representing the URL of an external script. It reflects the src attribute."
            ],
            [
                "HTMLScriptElement.event",
                "Is a DOMString; an obsolete way of registering event handlers on elements in an HTML document."
            ],
            [
                "HTMLScriptElement.charset",
                "Is a DOMString representing the character encoding of an external script. It reflects the charset attribute."
            ],
            [
                "HTMLScriptElement.async, HTMLScriptElement.defer",
                "The async and defer attributes are Boolean attributes that control how the script should be executed. The defer and async attributes must not be specified if the src attribute is absent. There are three possible execution modes: If the async attribute is present, then the script will be executed asynchronously as soon as it downloads. If the async attribute is absent but the defer attribute is present, then the script is executed when the page has finished parsing. If neither attribute is present, then the script is fetched and executed immediately, blocking further parsing of the page. The defer attribute may be specified with the async attribute, so legacy browsers that only support defer (and not async) fall back to the defer behavior instead of the default blocking behavior. Note: The exact processing details for these attributes are complex, involving many different aspects of HTML, and therefore are scattered throughout the specification. These algorithms describe the core ideas, but they rely on the parsing rules for <script> start and end tags in HTML, in foreign content, and in XML; the rules for the document.write() method; the handling of scripting; and so on."
            ],
            [
                "HTMLScriptElement.crossOrigin",
                "Is a DOMString reflecting the CORS setting for the script element. For scripts from other origins, this controls if error information will be exposed."
            ],
            [
                "HTMLScriptElement.text",
                "Is a DOMString that joins and returns the contents of all Text nodes inside the <script> element (ignoring other nodes like comments) in tree order. On setting, it acts the same way as the textContent IDL attribute. Note: When inserted using the document.write() method, <script> elements execute (typically synchronously), but when inserted using innerHTML or outerHTML, they do not execute at all."
            ],
            [
                "HTMLScriptElement.noModule",
                "Is a Boolean that if true, stops the script's execution in browsers that support ES2015 modules — used to run fallback scripts in older browsers that do not support JavaScript modules."
            ],
            [
                "HTMLScriptElement.referrerPolicy",
                "Is a DOMString that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the script, and fetches done by that script."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLSelectElement",
        "",
        "HTMLSelectElement",
        "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
        [
            [
                "HTMLSelectElement.autofocus",
                "A Boolean reflecting the autofocus HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified."
            ],
            [
                "HTMLSelectElement.disabled",
                "A Boolean reflecting the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks."
            ],
            [
                "HTMLSelectElement.formRead only",
                "An HTMLFormElement referencing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null."
            ],
            [
                "HTMLSelectElement.labelsRead only",
                "A NodeList of <label> elements associated with the element."
            ],
            [
                "HTMLSelectElement.length",
                "An unsigned long The number of <option> elements in this select element."
            ],
            [
                "HTMLSelectElement.multiple",
                "A Boolean reflecting the multiple HTML attribute, which indicates whether multiple items can be selected."
            ],
            [
                "HTMLSelectElement.name",
                "A DOMString reflecting the name HTML attribute, containing the name of this control used by servers and DOM search functions."
            ],
            [
                "HTMLSelectElement.optionsRead only",
                "An HTMLOptionsCollection representing the set of <option> (HTMLOptionElement) elements contained by this element."
            ],
            [
                "HTMLSelectElement.required",
                "A Boolean reflecting the required HTML attribute, which indicates whether the user is required to select a value before submitting the form."
            ],
            [
                "HTMLSelectElement.selectedIndex",
                "A long reflecting the index of the first selected <option> element. The value -1 indicates no element is selected."
            ],
            [
                "HTMLSelectElement.selectedOptionsRead only",
                "An HTMLCollection representing the set of <option> elements that are selected."
            ],
            [
                "HTMLSelectElement.size",
                "A long reflecting the size HTML attribute, which contains the number of visible items in the control. The default is 1, unless multiple is true, in which case it is 4."
            ],
            [
                "HTMLSelectElement.typeRead only",
                "A DOMString represeting the form control's type. When multiple is true, it returns \"select-multiple\"; otherwise, it returns \"select-one\"."
            ],
            [
                "HTMLSelectElement.validationMessageRead only",
                "A DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints."
            ],
            [
                "HTMLSelectElement.validityRead only",
                "A ValidityState reflecting the validity state that this control is in."
            ],
            [
                "HTMLSelectElement.value",
                "A DOMString reflecting the value of the form control. Returns the value property of the first selected option element if there is one, otherwise the empty string."
            ],
            [
                "HTMLSelectElement.willValidateRead only",
                "A Boolean that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation."
            ],
            [
                "HTMLSelectElement.add()",
                "Adds an element to the collection of option elements for this select element."
            ],
            [
                "HTMLSelectElement.blur()",
                "Removes input focus from this element. This method is now implemented on HTMLElement."
            ],
            [
                "HTMLSelectElement.checkValidity()",
                "Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element (and returns false)."
            ],
            [
                "HTMLSelectElement.focus()",
                "Gives input focus to this element. This method is now implemented on HTMLElement."
            ],
            [
                "HTMLSelectElement.item()",
                "Gets an item from the options collection for this <select> element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly."
            ],
            [
                "HTMLSelectElement.namedItem()",
                "Gets the item in the options collection with the specified name. The name string can match either the id or the name attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly."
            ],
            [
                "HTMLSelectElement.remove()",
                "Removes the element at the specified index from the options collection for this select element."
            ],
            [
                "HTMLSelectElement.reportValidity()",
                "This method reports the problems with the constraints on the element, if any, to the user. If there are problems, it fires a cancelable invalid event at the element, and returns false; if there are no problems, it returns true."
            ],
            [
                "HTMLSelectElement.setCustomValidity()",
                "Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error."
            ],
            [
                "input event",
                "Fires when the value of an <input>, <select>, or <textarea> element has been changed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLShadowElement",
        "",
        "HTMLShadowElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "HTMLShadowElement.getDistributedNodes()",
                "Returns a static NodeList of the distributed nodes associated with this <shadow> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLSlotElement",
        "",
        "HTMLSlotElement",
        "",
        [
            [
                "HTMLSlotElement.name",
                "DOMString: Can be used to get and set the slot's name."
            ],
            [
                "HTMLSlotElement.assignedNodes()",
                "Returns a sequence of the nodes assigned to this slot, and if the flatten option is set to true, the assigned nodes of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content."
            ],
            [
                "HTMLSlotElement.assignedElements()",
                "Returns a sequence of the elements assigned to this slot (and no other nodes). If the flatten option is set to true, it also returns the assigned elements of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content."
            ],
            [
                "slotchange",
                "Fired on an HTMLSlotElement instance (<slot> element) when the node(s) contained in that slot change."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLSourceElement",
        "",
        "HTMLSourceElement",
        "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
        [
            [
                "HTMLSourceElement.media",
                "Is a DOMString reflecting the media HTML attribute, containing the intended type of the media resource."
            ],
            [
                "HTMLSourceElement.sizes",
                "Is a DOMString representing image sizes between breakpoints"
            ],
            [
                "HTMLSourceElement.src",
                "Is a DOMString reflecting the src HTML attribute, containing the URL for the media resource. The HTMLSourceElement.src property has a meaning only when the associated <source> element is nested in a media element that is a <video> or an <audio> element. It has no meaning and is ignored when it is nested in a <picture> element. Note: If the src property is updated (along with any siblings), the parent HTMLMediaElement's load method should be called when done, since <source> elements are not re-scanned automatically."
            ],
            [
                "HTMLSourceElement.srcset",
                "Is a DOMString reflecting the srcset HTML attribute, containing a list of candidate images, separated by a comma (',', U+002C COMMA). A candidate image is a URL followed by a 'w' with the width of the images, or an 'x' followed by the pixel density."
            ],
            [
                "HTMLSourceElement.type",
                "Is a DOMString reflecting the type HTML attribute, containing the type of the media resource."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLSpanElement",
        "",
        "HTMLSpanElement",
        "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLStyleElement",
        "",
        "HTMLStyleElement",
        "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement.",
        [
            [
                "HTMLStyleElement.media",
                "Is a DOMString representing the intended destination medium for style information."
            ],
            [
                "HTMLStyleElement.type",
                "Is a DOMString representing the type of style being applied by this statement."
            ],
            [
                "HTMLStyleElement.disabled",
                "Is a Boolean value representing whether or not the stylesheet is disabled (true) or not (false)."
            ],
            [
                "HTMLStyleElement.sheet Read only",
                "Returns the StyleSheet object associated with the given element, or null if there is none"
            ],
            [
                "HTMLStyleElement.scoped",
                "Is a Boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTableCaptionElement",
        "",
        "HTMLTableCaptionElement",
        "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
        [
            [
                "HTMLTableCaptionElement.align",
                "Is a DOMString which represents an enumerated attribute indicating alignment of the caption with respect to the table."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTableCellElement",
        "",
        "HTMLTableCellElement",
        "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
        [
            [
                "HTMLTableCellElement.abbr",
                "A DOMString which can be used on <th> elements (not on <td>), specifying an alternative label for the header cell. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of abbr is an abbreviation or acronym, but can be any text that's appropriate contextually."
            ],
            [
                "HTMLTableCellElement.cellIndex Read only",
                "A long integer representing the cell's position in the cells collection of the <tr> the cell is contained within. If the cell doesn't belong to a <tr>, it returns -1."
            ],
            [
                "HTMLTableCellElement.colSpan",
                "An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the colspan attribute."
            ],
            [
                "HTMLTableCellElement.headers Read only",
                "Is a DOMSettableTokenList describing a list of id of <th> elements that represents headers associated with the cell. It reflects the headers attribute."
            ],
            [
                "HTMLTableCellElement.rowSpan",
                "An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the rowspan attribute."
            ],
            [
                "HTMLTableCellElement.scope",
                "A DOMString indicating the scope of a <th> cell. Header cells can be configured, using the scope property, the apply to a specified row or column, or to the not-yet-scoped cells within the current row group (that is, the same ancestor <thead>, <tbody>, or <tfoot> element). If no value is specified for scope, the header is not associated directly with cells in this way. Permitted values for scope are: col The header cell applies to the following cells in the same column (or columns, if colspan is used as well), until either the end of the column or another <th> in the column establishes a new scope. colgroup The header cell applies to all cells in the current column group that do not already have a scope applied to them. This value is only allowed if the cell is in a column group. row The header cell applies to the following cells in the same row (or rows, if rowspan is used as well), until either the end of the row or another <th> in the same row establishes a new scope. rowgroup The header cell applies to all cells in the current row group that do not already have a scope applied to them. This value is only allowed if the cell is in a row group. The empty string (\"\") The header cell has no predefined scope; the user agent will establish the scope based on contextual clues."
            ],
            [
                "col",
                "The header cell applies to the following cells in the same column (or columns, if colspan is used as well), until either the end of the column or another <th> in the column establishes a new scope."
            ],
            [
                "colgroup",
                "The header cell applies to all cells in the current column group that do not already have a scope applied to them. This value is only allowed if the cell is in a column group."
            ],
            [
                "row",
                "The header cell applies to the following cells in the same row (or rows, if rowspan is used as well), until either the end of the row or another <th> in the same row establishes a new scope."
            ],
            [
                "rowgroup",
                "The header cell applies to all cells in the current row group that do not already have a scope applied to them. This value is only allowed if the cell is in a row group."
            ],
            [
                "The empty string (\"\")",
                "The header cell has no predefined scope; the user agent will establish the scope based on contextual clues."
            ],
            [
                "HTMLTableCellElement.align",
                "A DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\"."
            ],
            [
                "HTMLTableCellElement.axis",
                "A DOMString containing a name grouping cells in virtual. It reflects the obsolete axis attribute."
            ],
            [
                "HTMLTableCellElement.bgColor",
                "A DOMString containing the background color of the cells. It reflects the obsolete bgcolor attribute."
            ],
            [
                "HTMLTableCellElement.ch",
                "A DOMString containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported."
            ],
            [
                "HTMLTableCellElement.chOff",
                "A DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableCellElement.ch. This property was optional and was not very well supported."
            ],
            [
                "HTMLTableCellElement.height",
                "A DOMString containing a length of pixel of the hinted height of the cell. It reflects the obsolete height attribute."
            ],
            [
                "HTMLTableCellElement.noWrap",
                "A Boolean value reflecting the nowrap attribute and indicating if cell content can be broken in several lines."
            ],
            [
                "HTMLTableCellElement.vAlign",
                "A DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\". Use the CSS vertical-align property instead."
            ],
            [
                "HTMLTableCellElement.width",
                "A DOMString specifying the number of pixels wide the cell should be drawn, if possible. This property reflects the also obsolete width attribute. Use the CSS width property instead."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTableColElement",
        "",
        "HTMLTableColElement",
        "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
        [
            [
                "HTMLTableColElement.align",
                "Is a DOMString that indicates the horizontal alignment of the cell data in the column."
            ],
            [
                "HTMLTableColElement.ch",
                "Is a DOMString representing the alignment character for cell data."
            ],
            [
                "HTMLTableColElement.chOff",
                "Is a DOMString representing the offset for the alignment character."
            ],
            [
                "HTMLTableColElement.span",
                "Is an unsigned long that reflects the span HTML attribute, indicating the number of columns to apply this object's attributes to. Must be a positive integer."
            ],
            [
                "HTMLTableColElement.vAlign",
                "Is a DOMString that indicates the vertical alignment of the cell data in the column."
            ],
            [
                "HTMLTableColElement.width",
                "Is a DOMString representing the default column width."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTableElement",
        "",
        "HTMLTableElement",
        "",
        [
            [
                "HTMLTableElement.caption",
                "Is a HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <caption>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first <caption> that is a child of this element is removed from the tree, if any."
            ],
            [
                "HTMLTableElement.tHead",
                "Is a HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <thead>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element, and the first <thead> that is a child of this element is removed from the tree, if any."
            ],
            [
                "HTMLTableElement.tFoot",
                "Is a HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <tfoot>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, a <colgroup>, nor a <thead>, or as the last child if there is no such element, and the first <tfoot> that is a child of this element is removed from the tree, if any."
            ],
            [
                "HTMLTableElement.rowsRead only",
                "Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child of one of its <thead>, <tbody> and <tfoot> children. The rows members of a <thead> appear first, in tree order, and those members of a <tbody> last, also in tree order. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes."
            ],
            [
                "HTMLTableElement.tBodiesRead only",
                "Returns a live HTMLCollection containing all the <tbody> of the element. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes."
            ],
            [
                "HTMLTableElement.align",
                "Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\"."
            ],
            [
                "HTMLTableElement.bgColor",
                "Is a DOMString containing the background color of the cells. It reflects the obsolete bgcolor attribute."
            ],
            [
                "HTMLTableElement.border",
                "Is a DOMString containing the width in pixels of the border of the table. It reflects the obsolete border attribute."
            ],
            [
                "HTMLTableElement.cellPadding",
                "Is a DOMString containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete cellpadding attribute."
            ],
            [
                "HTMLTableElement.cellSpacing",
                "Is a DOMString containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete cellspacing attribute."
            ],
            [
                "HTMLTableElement.frame",
                "Is a DOMString containing the type of the external borders of the table. It reflects the obsolete frame attribute and can take one of the following values: \"void\", \"above\", \"below\", \"hsides\", \"vsides\", \"lhs\", \"rhs\", \"box\", or \"border\"."
            ],
            [
                "HTMLTableElement.rules",
                "Is a DOMString containing the type of the internal borders of the table. It reflects the obsolete rules attribute and can take one of the following values: \"none\", \"groups\", \"rows\", \"cols\", or \"all\"."
            ],
            [
                "HTMLTableElement.summary",
                "Is a DOMString containing a description of the purpose or the structure of the table. It reflects the obsolete summary attribute."
            ],
            [
                "HTMLTableElement.width",
                "Is a DOMString containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete width attribute."
            ],
            [
                "HTMLTableElement.createTHead()",
                "Returns an HTMLTableSectionElement representing the first <thead> that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element."
            ],
            [
                "HTMLTableElement.deleteTHead()",
                "Removes the first <thead> that is a child of the element."
            ],
            [
                "HTMLTableElement.createTFoot()",
                "Returns an HTMLTableSectionElement representing the first <tfoot> that is a child of the element. If none is found, a new one is created and inserted in the tree as the last child."
            ],
            [
                "HTMLTableElement.deleteTFoot()",
                "Removes the first <tfoot> that is a child of the element."
            ],
            [
                "HTMLTableElement.createTBody()",
                "Returns a HTMLTableSectionElement representing a new <tbody> that is a child of the element. It is inserted in the tree after the last element that is a <tbody>, or as the last child if there is no such element."
            ],
            [
                "HTMLTableElement.createCaption()",
                "Returns an HTMLElement representing the first <caption> that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the <table> element."
            ],
            [
                "HTMLTableElement.deleteCaption()",
                "Removes the first <caption> that is a child of the element."
            ],
            [
                "HTMLTableElement.insertRow()",
                "Returns an HTMLTableRowElement representing a new row of the table. It inserts it in the rows collection immediately before the <tr> element at the given index position. If necessary a <tbody> is created. If the index is -1, the new row is appended to the collection. If the index is smaller than -1 or greater than the number of rows in the collection, a DOMException with the value IndexSizeError is raised."
            ],
            [
                "HTMLTableElement.deleteRow()",
                "Removes the row corresponding to the index given in parameter. If the index value is -1 the last row is removed; if it smaller than -1 or greater than the amount of rows in the collection, a DOMException with the value IndexSizeError is raised."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTableRowElement",
        "",
        "HTMLTableRowElement",
        "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
        [
            [
                "HTMLTableRowElement.cells Read only",
                "Returns a live HTMLCollection containing the cells in the row. The HTMLCollection is live and is automatically updated when cells are added or removed."
            ],
            [
                "HTMLTableRowElement.rowIndex Read only",
                "Returns a long value which gives the logical position of the row within the entire table. If the row is not part of a table, returns -1."
            ],
            [
                "HTMLTableRowElement.sectionRowIndex Read only",
                "Returns a long value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1."
            ],
            [
                "HTMLTableRowElement.deleteCell()",
                "Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than 0, it raises a DOMException with the IndexSizeError value."
            ],
            [
                "HTMLTableRowElement.insertCell()",
                "Inserts a new cell just before the given position in the row. If the given position is not given or is -1, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than -1, it raises a DOMException with the IndexSizeError value. Returns a reference to a HTMLTableCellElement."
            ],
            [
                "HTMLTableRowElement.align",
                "Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\"."
            ],
            [
                "HTMLTableRowElement.bgColor",
                "Is a DOMString containing the background color of the cells. It reflects the obsolete bgcolor attribute."
            ],
            [
                "HTMLTableRowElement.ch",
                "Is a DOMString containing one single character. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported."
            ],
            [
                "HTMLTableRowElement.chOff",
                "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported."
            ],
            [
                "HTMLTableRowElement.vAlign",
                "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTableSectionElement",
        "",
        "HTMLTableSectionElement",
        "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
        [
            [
                "HTMLTableSectionElement.align",
                "Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\"."
            ],
            [
                "HTMLTableSectionElement.rows Read only",
                "Returns a live HTMLCollection containing the rows in the section. The HTMLCollection is live and is automatically updated when rows are added or removed."
            ],
            [
                "HTMLTableSectionElement.ch",
                "Is a DOMString containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported."
            ],
            [
                "HTMLTableSectionElement.chOff",
                "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported."
            ],
            [
                "HTMLTableSectionElement.vAlign",
                "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\"."
            ],
            [
                "HTMLTableSectionElement.deleteRow()",
                "Removes the row at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than 0, it raises a DOMException with the IndexSizeError value."
            ],
            [
                "HTMLTableSectionElement.insertRow()",
                "Inserts a new row just before the given position in the section. If the given position is not given or is -1, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than -1, it raises a DOMException with the IndexSizeError value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTemplateElement",
        "",
        "HTMLTemplateElement",
        "The HTMLTemplateElement interface enables access to the contents of an HTML <template> element.",
        [
            [
                "content Read only",
                "A read-only DocumentFragment which contains the DOM subtree representing the <template> element's template contents."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTextAreaElement",
        "",
        "HTMLTextAreaElement",
        "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of <textarea> elements.",
        [
            [
                "input event",
                "Fires when the value of an <input>, <select>, or <textarea> element has been changed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTimeElement",
        "",
        "HTMLTimeElement",
        "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
        [
            [
                "HTMLTimeElement.dateTime",
                "Is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTitleElement",
        "",
        "HTMLTitleElement",
        "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
        [
            [
                "HTMLTitleElement.text",
                "Is a DOMString representing the text of the document's title."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLTrackElement",
        "",
        "HTMLTrackElement",
        "The HTMLTrackElement interface represents an HTML <track> element within the DOM. This element can be used as a child of either <audio> or <video> to specify a text track containing information such as closed captions or subtitles.",
        [
            [
                "HTMLTrackElement.kind",
                "Is a DOMString that reflects the kind HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, or metadata."
            ],
            [
                "HTMLTrackElement.src",
                "Is a DOMString that reflects the src HTML attribute, indicating the address of the text track data."
            ],
            [
                "HTMLTrackElement.srclang",
                "Is a DOMString that reflects the srclang HTML attribute, indicating the language of the text track data."
            ],
            [
                "HTMLTrackElement.label",
                "Is a DOMString that reflects the label HTML attribute, indicating a user-readable title for the track."
            ],
            [
                "HTMLTrackElement.default",
                "A Boolean reflecting the default attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate."
            ],
            [
                "HTMLTrackElement.readyState Read only",
                "Returns an unsigned short that show the readiness state of the track: Constant Value Description NONE 0 Indicates that the text track's cues have not been obtained. LOADING 1 Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser. LOADED 2 Indicates that the text track has been loaded with no fatal errors. ERROR 3 Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained."
            ],
            [
                "HTMLTrackElement.track Read only",
                "Returns TextTrack is the track element's text track data."
            ],
            [
                "cuechange",
                "Sent when the underlying TextTrack has changed the currently-presented cues. This event is always sent to the TextTrack but is also sent to the HTMLTrackElement if one is associated with the track. You may also use the oncuechange event handler to establish a handler for this event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLUListElement",
        "",
        "HTMLUListElement",
        "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
        [
            [
                "HTMLUListElement.type",
                "Is a DOMString value reflecting the type and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized."
            ],
            [
                "HTMLUListElement.compact",
                "Is a Boolean indicating that spacing between list items should be reduced. This property reflects the compact attribute only, it doesn't consider the line-height CSS property used for that behavior in modern pages."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLUnknownElement",
        "",
        "HTMLUnknownElement",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/HTMLVideoElement",
        "",
        "HTMLVideoElement",
        "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
        [
            [
                "HTMLVideoElement.height",
                "Is a DOMString that reflects the height HTML attribute, which specifies the height of the display area, in CSS pixels."
            ],
            [
                "HTMLVideoElement.poster",
                "Is a DOMString that reflects the poster HTML attribute, which specifies an image to show while no video data is available."
            ],
            [
                "HTMLVideoElement.videoHeight Read only",
                "Returns an unsigned integer value indicating the intrinsic height of the resource in CSS pixels, or 0 if no media is available yet."
            ],
            [
                "HTMLVideoElement.videoWidth Read only",
                "Returns an unsigned integer value indicating the intrinsic width of the resource in CSS pixels, or 0 if no media is available yet."
            ],
            [
                "HTMLVideoElement.width",
                "Is a DOMString that reflects the width HTML attribute, which specifies the width of the display area, in CSS pixels."
            ],
            [
                "HTMLVideoElement.autoPictureInPicture",
                "The autoPictureInPicture attribute will automatically enter and leave the picture-in-picture mode for a video element when the user switches tab and/or applications"
            ],
            [
                "HTMLVideoElement.disablePictureInPicture",
                "The disablePictureInPicture property will hint the user agent to not suggest the picture-in-picture to users or to request it automatically"
            ],
            [
                "HTMLVideoElement.mozParsedFrames Read only",
                "Returns an unsigned long with the count of video frames that have been parsed from the media resource."
            ],
            [
                "HTMLVideoElement.mozDecodedFrames Read only",
                "Returns an unsigned long with the count of parsed video frames that have been decoded into images."
            ],
            [
                "HTMLVideoElement.mozPresentedFrames Read only",
                "Returns an unsigned long with the count of decoded frames that have been presented to the rendering pipeline for painting."
            ],
            [
                "HTMLVideoElement.mozPaintedFrames Read only",
                "Returns an unsigned long with the count of presented frames which were painted on the screen."
            ],
            [
                "HTMLVideoElement.mozFrameDelay Read only",
                "Returns an double with the time which the last painted video frame was late by, in seconds."
            ],
            [
                "HTMLVideoElement.mozHasAudio Read only",
                "Returns a boolean indicating if there is some audio associated with the video."
            ],
            [
                "HTMLVideoElement.msFrameStep()",
                "Steps the video by one frame forward or one frame backward."
            ],
            [
                "HTMLVideoElement.msHorizontalMirror",
                "Gets or sets whether a video element is flipped horizontally in the display."
            ],
            [
                "HTMLVideoElement.msInsertVideoEffect()",
                "Inserts the specified video effect into the media pipeline."
            ],
            [
                "HTMLVideoElement.msIsLayoutOptimalForPlayback Read only",
                "Indicates whether the video can be rendered more efficiently."
            ],
            [
                "HTMLVideoElement.msIsStereo3D Read only",
                "Determines whether the system considers the loaded video source to be stereo 3-D or not. Value set to true indicates source is stereo 3D."
            ],
            [
                "HTMLVideoElement.msZoom",
                "Controls whether the video frame is trimmed to fit the video display."
            ],
            [
                "HTMLVideoElement.getVideoPlaybackQuality()",
                "Returns a VideoPlaybackQuality object that contains the current playback metrics. This information includes things like the number of dropped or corrupted frames, as well as the total number of frames."
            ],
            [
                "HTMLVideoElement.requestPictureInPicture()",
                "Requests that the user agent make video enters picture-in-picture mode"
            ],
            [
                "enterpictureinpicture",
                "Sent to a HTMLVideoElement when it enters Picture-in-Picture mode. The associated event handler is HTMLVideoElement.onenterpictureinpicture"
            ],
            [
                "leavepictureinpicture",
                "Sent to a HTMLVideoElement when it leaves Picture-in-Picture mode. The associated event handler is HTMLVideoElement.onleavepictureinpicture"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBCursor",
        "",
        "IDBCursor",
        "",
        [
            [
                "IDBCursor.source Read only",
                "Returns the IDBObjectStore or IDBIndex that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active."
            ],
            [
                "IDBCursor.direction Read only",
                "Returns the direction of traversal of the cursor. See Constants for possible values."
            ],
            [
                "IDBCursor.key Read only",
                "Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type."
            ],
            [
                "IDBCursor.primaryKey Read only",
                "Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type."
            ],
            [
                "IDBCursor.request Read only",
                "Returns the IDBRequest that was used to obtain the cursor."
            ],
            [
                "IDBCursor.advance()",
                "Sets the number of times a cursor should move its position forward."
            ],
            [
                "IDBCursor.continue()",
                "Advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter."
            ],
            [
                "IDBCursor.continuePrimaryKey()",
                "Sets the cursor to the given index key and primary key given as arguments."
            ],
            [
                "IDBCursor.delete()",
                "Returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records."
            ],
            [
                "IDBCursor.update()",
                "Returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBCursorSync",
        "",
        "IDBCursorSync",
        "",
        [
            [
                "DATA_ERR",
                "If the underlying object store uses in-line keys and the property at the key path does not match the key in this cursor's position."
            ],
            [
                "NOT_ALLOWED_ERR",
                "If the underlying index or object store does not support updating the record because it is open in the READ_ONLY or SNAPSHOT_READ mode, or if an index record cannot be changed because the underlying index is auto-populated."
            ],
            [
                "SERIAL_ERR",
                "If the data being stored could not be serialized by the internal structured cloning algorithm."
            ],
            [
                "key",
                "The key to which to move the cursor's position."
            ],
            [
                "NOT_ALLOWED_ERR",
                "If the underlying index or object store does not support updating the record because it is open in the READ_ONLY or SNAPSHOT_READ mode."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBCursorWithValue",
        "",
        "IDBCursorWithValue",
        "",
        [
            [
                "IDBCursorWithValue.value Read only",
                "Returns the value of the current cursor."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBDatabase",
        "",
        "IDBDatabase",
        "",
        [
            [
                "IDBDatabase.name Read only",
                "A DOMString that contains the name of the connected database."
            ],
            [
                "IDBDatabase.version Read only",
                "A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string."
            ],
            [
                "IDBDatabase.objectStoreNames Read only",
                "A DOMStringList that contains a list of the names of the object stores currently in the connected database."
            ],
            [
                "IDBDatabase.close()",
                "Returns immediately and closes the connection to a database in a separate thread."
            ],
            [
                "IDBDatabase.createMutableFile()",
                "Creates a file handle, allowing files to be stored inside an IndexedDB database."
            ],
            [
                "IDBDatabase.createObjectStore()",
                "Creates and returns a new object store or index."
            ],
            [
                "IDBDatabase.deleteObjectStore()",
                "Destroys the object store with the given name in the connected database, along with any indexes that reference it."
            ],
            [
                "IDBDatabase.transaction()",
                "Immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store. Runs in a separate thread."
            ],
            [
                "abort",
                "Fired when a transaction is aborted and bubbles up to the connection object. Also available via the onabort property."
            ],
            [
                "close",
                "Fired when the database connection is unexpectedly closed. Also available via the onclose property."
            ],
            [
                "error",
                "Fired when a request returns an error and the event bubbles up to the connection object. Also available via the onerror property."
            ],
            [
                "versionchange",
                "Fired when a database structure change was requested. Also available via the onversionchange property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBDatabaseException",
        "",
        "IDBDatabaseException",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBDatabaseSync",
        "",
        "IDBDatabaseSync",
        "",
        [
            [
                "name",
                "The name of a new object store."
            ],
            [
                "keypath",
                "The key path used by the new object store. If a null path is specified, then the object store does not have a key path, and uses out-of-line keys."
            ],
            [
                "autoIncrement",
                "If true, the object store uses a key generator; if false, it does not use one."
            ],
            [
                "IDBObjectStoreSync",
                "An object to access the newly created object store."
            ],
            [
                "CONSTRAINT_ERR",
                "If an object store with the same name (based on case-sensitive comparison) already exists in the connected database."
            ],
            [
                "name",
                "The name of the object store to open."
            ],
            [
                "mode",
                "The mode that is used to access the object store."
            ],
            [
                "IDBObjectStoreSync",
                "An object to access the opened object store."
            ],
            [
                "NOT_FOUND_ERR",
                "If an object store with the given name (based on case-sensitive comparison) already exists in the connected database."
            ],
            [
                "storeName",
                "The name of an existing object store to remove."
            ],
            [
                "NOT_FOUND_ERR",
                "If the object store with the given name (based on case-sensitive comparison) does not exist in the connected database."
            ],
            [
                "version",
                "The version to store in the database."
            ],
            [
                "storeNames",
                "The names of object stores and indexes in the scope of the new transaction."
            ],
            [
                "timeout",
                "The interval that this operation is allowed to take to acquire locks on all the objects stores and indexes identified in storeNames."
            ],
            [
                "IDBTransactionSync",
                "An object to access the newly created transaction."
            ],
            [
                "TIMEOUT_ERR",
                "If reserving all the database objects identified in storeNames takes longer than the timeout interval."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBEnvironment",
        "",
        "IDBEnvironment",
        "",
        [
            [
                "WindowOrWorkerGlobalScope.indexedDB Read only",
                "Provides a mechanism for applications to asynchronously access capabilities of indexed databases; contains an IDBFactory object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBEnvironmentSync",
        "",
        "IDBEnvironmentSync",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBFactory",
        "",
        "IDBFactory",
        "",
        [
            [
                "IDBFactory.open",
                "The current method to request opening a connection to a database."
            ],
            [
                "IDBFactory.deleteDatabase",
                "A method to request the deletion of a database."
            ],
            [
                "IDBFactory.cmp",
                "A method that compares two keys and returns a result indicating which one is greater in value."
            ],
            [
                "IDBFactory.databases",
                "A method that returns a list of all available databases, including their names and versions."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBFactorySync",
        "",
        "IDBFactorySync",
        "",
        [
            [
                "name",
                "The name for the database."
            ],
            [
                "description",
                "The description for the database."
            ],
            [
                "IDBDatabaseSync",
                "An object to access the open database."
            ],
            [
                "NON_TRANSIENT_ERR",
                "If the name parameter is not valid. A valid name is any string including the empty string."
            ],
            [
                "UNKNOWN_ERR",
                "If an error occurs while the database is being opened."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBIndex",
        "",
        "IDBIndex",
        "",
        [
            [
                "IDBIndex.isAutoLocale Read only",
                "Returns a Boolean indicating whether the index had a locale value of auto specified upon its creation (see createIndex()'s optionalParameters.)"
            ],
            [
                "IDBIndex.locale Read only",
                "Returns the locale of the index (for example en-US, or pl) if it had a locale value specified upon its creation (see createIndex()'s optionalParameters.)"
            ],
            [
                "IDBIndex.name",
                "The name of this index."
            ],
            [
                "IDBIndex.objectStore Read only",
                "The name of the object store referenced by this index."
            ],
            [
                "IDBIndex.keyPath Read only",
                "The key path of this index. If null, this index is not auto-populated."
            ],
            [
                "IDBIndex.multiEntry Read only",
                "Affects how the index behaves when the result of evaluating the index's key path yields an array. If true, there is one record in the index for each item in an array of keys. If false, then there is one record for each key that is an array."
            ],
            [
                "IDBIndex.unique Read only",
                "If true, this index does not allow duplicate values for a key."
            ],
            [
                "IDBIndex.count()",
                "Returns an IDBRequest object, and in a separate thread, returns the number of records within a key range."
            ],
            [
                "IDBIndex.get()",
                "Returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is an IDBKeyRange."
            ],
            [
                "IDBIndex.getKey()",
                "Returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is an IDBKeyRange."
            ],
            [
                "IDBIndex.getAll()",
                "Returns an IDBRequest object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if key is an IDBKeyRange."
            ],
            [
                "IDBIndex.getAllKeys()",
                "Returns an IDBRequest object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if key is an IDBKeyRange."
            ],
            [
                "IDBIndex.openCursor()",
                "Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range."
            ],
            [
                "IDBIndex.openKeyCursor()",
                "Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBIndexSync",
        "",
        "IDBIndexSync",
        "",
        [
            [
                "value",
                "The value to store into the index."
            ],
            [
                "key",
                "A key to use for identifying the record."
            ],
            [
                "any",
                "The key for the stored record."
            ],
            [
                "CONSTRAINT_ERR",
                "If a record exists in this index with a key corresponding to the key parameter or the index is auto-populated, or if no record exists with a key corresponding to the value parameter in the index's referenced object store."
            ],
            [
                "key",
                "The key that identifies the record to be retrieved."
            ],
            [
                "any",
                "The retrieved value from the index."
            ],
            [
                "NOT_FOUND_ERR",
                "If no record exists in this index for the given key."
            ],
            [
                "key",
                "The key that identifies the record to be retrieved."
            ],
            [
                "any",
                "The retrieved value from the referenced object store."
            ],
            [
                "NOT_FOUND_ERR",
                "If no record exists in this index for the given key."
            ],
            [
                "range",
                "The key range to use as the cursor's range."
            ],
            [
                "direction",
                "The cursor's required direction."
            ],
            [
                "NOT_FOUND_ERR",
                "If no records exist in this index for the requested key range."
            ],
            [
                "range",
                "The key range to use as the cursor's range."
            ],
            [
                "direction",
                "The cursor's required direction."
            ],
            [
                "NOT_FOUND_ERR",
                "If no records exist in this index for the requested key range."
            ],
            [
                "value",
                "The value to be stored in the record."
            ],
            [
                "key",
                "The key to be used to identify the record."
            ],
            [
                "any",
                "The key for the stored record."
            ],
            [
                "key",
                "Key of the records to be removed."
            ],
            [
                "NOT_FOUND_ERR",
                "If a record does not exist in this index with the given key."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBKeyRange",
        "",
        "IDBKeyRange",
        "",
        [
            [
                "IDBKeyRange.lower Read only",
                "Lower bound of the key range."
            ],
            [
                "IDBKeyRange.upper Read only",
                "Upper bound of the key range."
            ],
            [
                "IDBKeyRange.lowerOpen Read only",
                "Returns false if the lower-bound value is included in the key range."
            ],
            [
                "IDBKeyRange.upperOpen Read only",
                "Returns false if the upper-bound value is included in the key range."
            ],
            [
                "IDBKeyRange.bound()",
                "Creates a new key range with upper and lower bounds."
            ],
            [
                "IDBKeyRange.only()",
                "Creates a new key range containing a single value."
            ],
            [
                "IDBKeyRange.lowerBound()",
                "Creates a new key range with only a lower bound."
            ],
            [
                "IDBKeyRange.upperBound()",
                "Creates a new upper-bound key range."
            ],
            [
                "IDBKeyRange.includes()",
                "Returns a boolean indicating whether a specified key is inside the key range."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBLocaleAwareKeyRange",
        "",
        "IDBLocaleAwareKeyRange",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBMutableFile",
        "",
        "IDBMutableFile",
        "",
        [
            [
                "MutableFile.name Read only",
                "The name of the handled file."
            ],
            [
                "MutableFile.type Read only",
                "The MIME type of the handled file."
            ],
            [
                "MutableFile.onabort",
                "The abort event is triggered each time the handled file is aborted."
            ],
            [
                "MutableFile.onerror",
                "The error event is triggered each time something goes wrong."
            ],
            [
                "MutableFile.open()",
                "Returns a LockedFile object to read or write the associated file safely."
            ],
            [
                "MutableFile.getFile()",
                "Returns a DOMRequest object. In case of success, the request's result is a File object representing a snapshot of the handled file."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBObjectStore",
        "",
        "IDBObjectStore",
        "",
        [
            [
                "IDBObjectStore.indexNames Read only",
                "A list of the names of indexes on objects in this object store."
            ],
            [
                "IDBObjectStore.keyPath Read only",
                "The key path of this object store. If this attribute is null, the application must provide a key for each modification operation."
            ],
            [
                "IDBObjectStore.name",
                "The name of this object store."
            ],
            [
                "IDBObjectStore.transaction Read only",
                "The IDBTransaction object to which this object store belongs."
            ],
            [
                "IDBObjectStore.autoIncrement Read only",
                "The value of the auto increment flag for this object store."
            ],
            [
                "IDBObjectStore.add()",
                "Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store."
            ],
            [
                "IDBObjectStore.clear()",
                "Creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all current records out of an object store."
            ],
            [
                "IDBObjectStore.count()",
                "Returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store."
            ],
            [
                "IDBObjectStore.createIndex()",
                "Creates a new index during a version upgrade, returning a new IDBIndex object in the connected database."
            ],
            [
                "IDBObjectStore.delete()",
                "returns an IDBRequest object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store."
            ],
            [
                "IDBObjectStore.deleteIndex()",
                "Destroys the specified index in the connected database, used during a version upgrade."
            ],
            [
                "IDBObjectStore.get()",
                "Returns an IDBRequest object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store."
            ],
            [
                "IDBObjectStore.getKey()",
                "Returns an IDBRequest object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter."
            ],
            [
                "IDBObjectStore.getAll()",
                "Returns an IDBRequest object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given."
            ],
            [
                "IDBObjectStore.getAllKeys()",
                "Returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given."
            ],
            [
                "IDBObjectStore.index()",
                "Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor."
            ],
            [
                "IDBObjectStore.openCursor()",
                "Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store by primary key with a cursor."
            ],
            [
                "IDBObjectStore.openKeyCursor()",
                "Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursor. Used for iterating through an object store with a key."
            ],
            [
                "IDBObjectStore.put()",
                "Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is readwrite."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBObjectStoreSync",
        "",
        "IDBObjectStoreSync",
        "",
        [
            [
                "value",
                "The value to store into the index."
            ],
            [
                "key",
                "A key to use for identifying the record."
            ],
            [
                "any",
                "The key for the stored record."
            ],
            [
                "CONSTRAINT_ERR",
                "If a record exists in this index with a key corresponding to the key parameter or the index is auto-populated, or if no record exists with a key corresponding to the value parameter in the index's referenced object store."
            ],
            [
                "DATA_ERR",
                "If this object store uses out-of-line keys, and the key parameter was not passed."
            ],
            [
                "SERIAL_ERR",
                "If the data being stored could not be serialized by the internal structured cloning algorithm."
            ],
            [
                "name",
                "The name of a new index."
            ],
            [
                "keyPath",
                "The key path used by the new index."
            ],
            [
                "unique",
                "If true, keys in the index must be unique; if false, duplicate keys are allowed."
            ],
            [
                "IDBIndexSync",
                "An object to access the newly created index."
            ],
            [
                "key",
                "The key that identifies the record to be retrieved."
            ],
            [
                "any",
                "The value retrieved from the object store."
            ],
            [
                "SERIAL_ERR",
                "If the data being stored could not be deserialized by the internal structured cloning algorithm."
            ],
            [
                "NOT_FOUND_ERR",
                "If no record exists in this index for the given key."
            ],
            [
                "range",
                "The key range to use as the cursor's range."
            ],
            [
                "direction",
                "The cursor's required direction."
            ],
            [
                "IDBIndexSync",
                "An object for accessing the index."
            ],
            [
                "NOT_FOUND_ERR",
                "If no records exist in this index for the requested key range."
            ],
            [
                "name",
                "The name of the index to open."
            ],
            [
                "IDBIndexSync",
                "An object to access the index."
            ],
            [
                "NOT_FOUND_ERR",
                "If the index with the given name does not exist in the connected database."
            ],
            [
                "value",
                "The value to be stored in the record."
            ],
            [
                "key",
                "The key to be used to identify the record."
            ],
            [
                "any",
                "The key for the stored record."
            ],
            [
                "CONSTRAINT_ERR",
                "If noOverwrite was true, and a record exists in this index for the given key or this index is auto-populated; or if no record exists with the given key in the index's referenced object store."
            ],
            [
                "DATA_ERR",
                "If this object store uses out-of-line keys and no key generator, but no key was given."
            ],
            [
                "SERIAL_ERR",
                "If the data being stored could not be serialized by the internal structured cloning algorithm."
            ],
            [
                "key",
                "Key of the records to be removed."
            ],
            [
                "NOT_FOUND_ERR",
                "If a record does not exist in this index with the given key."
            ],
            [
                "indexName",
                "The name of the existing index to remove."
            ],
            [
                "NOT_FOUND_ERR",
                "If an index with the given name does not exist in the connected database."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBOpenDBRequest",
        "",
        "IDBOpenDBRequest",
        "",
        [
            [
                "blocked",
                "Fired when an open connection to a database is blocking a versionchange transaction on the same database. Also available via the onblocked property."
            ],
            [
                "upgradeneeded",
                "Fired when an attempt was made to open a database with a version number higher than its current version. Also available via the onupgradeneeded property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBRequest",
        "",
        "IDBRequest",
        "",
        [
            [
                "IDBRequest.error Read only",
                "Returns a DOMException in the event of an unsuccessful request, indicating what went wrong."
            ],
            [
                "IDBRequest.result Read only",
                "Returns the result of the request. If the request failed and the result is not available, an InvalidStateError exception is thrown."
            ],
            [
                "IDBRequest.source Read only",
                "The source of the request, such as an IDBIndex or an IDBObjectStore. If no source exists (such as when calling IDBFactory.open), it returns null."
            ],
            [
                "IDBRequest.readyState Read only",
                "The state of the request. Every request starts in the pending state. The state changes to done when the request completes successfully or when an error occurs."
            ],
            [
                "IDBRequest.transaction Read only",
                "The transaction for the request. This property can be null for certain requests, for example those returned from IDBFactory.open unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return)."
            ],
            [
                "error",
                "Fired when an error caused a request to fail. Also available via the onerror property."
            ],
            [
                "success",
                "Fired when an IDBRequest succeeds. Also available via the onsuccess property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBTransaction",
        "",
        "IDBTransaction",
        "The IDBTransaction interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You use IDBDatabase to start transactions, IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and you access an IDBObjectStore to make a request. You can also use an IDBTransaction object to abort transactions.",
        [
            [
                "IDBTransaction.db Read only",
                "The database connection with which this transaction is associated."
            ],
            [
                "IDBTransaction.durability Read only",
                "Returns the durability hint the transaction was created with."
            ],
            [
                "IDBTransaction.error Read only",
                "Returns a DOMException indicating the type of error that occurred when there is an unsuccessful transaction. This property is null if the transaction is not finished, is finished and successfully committed, or was aborted with theIDBTransaction.abort() function."
            ],
            [
                "IDBTransaction.mode Read only",
                "The mode for isolating access to data in the object stores that are in the scope of the transaction. The default value is readonly."
            ],
            [
                "IDBTransaction.objectStoreNames Read only",
                "Returns a DOMStringList of the names of IDBObjectStore objects associated with the transaction."
            ],
            [
                "IDBTransaction.abort()",
                "Rolls back all the changes to objects in the database associated with this transaction. If this transaction has been aborted or completed, this method fires an error event."
            ],
            [
                "IDBTransaction.objectStore()",
                "Returns an IDBObjectStore object representing an object store that is part of the scope of this transaction."
            ],
            [
                "IDBTransaction.commit()",
                "For an active transaction, commits the transaction. Note that this doesn't normally have to be called — a transaction will automatically commit when all outstanding requests have been satisfied and no new requests have been made. commit() can be used to start the commit process without waiting for events from outstanding requests to be dispatched."
            ],
            [
                "abort",
                "Fired when an IndexedDB transaction is aborted. Also available via the onabort property."
            ],
            [
                "complete",
                "Fired when a transaction successfully completes. Also available via the oncomplete property."
            ],
            [
                "error",
                "Fired when a request returns an error and the event bubbles up to the transaction object. Also available via the onerror property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBTransactionSync",
        "",
        "IDBTransactionSync",
        "",
        [
            [
                "NON_TRANSIENT_ERR",
                "If this transaction has already been committed or aborted."
            ],
            [
                "NON_TRANSIENT_ERR",
                "If this transaction has already been committed or aborted."
            ],
            [
                "RECOVERABLE_ERR",
                "If this transaction's scope is dynamic, and the browser cannot commit all of the changes due to another transaction."
            ],
            [
                "name",
                "The name of the requested object store."
            ],
            [
                "IDBObjectStoreSync",
                "An object for accessing the requested object store."
            ],
            [
                "NOT_FOUND_ERR",
                "If the requested object store is not in this transaction's scope."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IDBVersionChangeEvent",
        "",
        "IDBVersionChangeEvent",
        "",
        [
            [
                "IDBVersionChangeEvent()",
                "Creates and returns a new IDBVersionChangeEvent object which is used to represent when a version of the database has changed."
            ],
            [
                "IDBVersionChangeEvent.oldVersion Read only",
                "Returns the old version of the database."
            ],
            [
                "IDBVersionChangeEvent.newVersion Read only",
                "Returns the new version of the database."
            ],
            [
                "IDBVersionChangeEvent.version Read only",
                "The new version of the database in a versionchange transaction. Warning: While this property is still implemented in older browsers, the latest specification replaces it with the oldVersion and newVersion attributes. See the compatibility table to know what browsers support them."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IdleDeadline",
        "",
        "IdleDeadline",
        "The IdleDeadline interface is used as the data type of the input parameter to idle callbacks established by calling Window.requestIdleCallback(). It offers a method, timeRemaining(), which lets you determine how much longer the user agent estimates it will remain idle and a property, didTimeout, which lets you determine if your callback is executing because its timeout duration expired.",
        [
            [
                "IdleDeadline.didTimeout Read only",
                "A Boolean whose value is true if the callback is being executed because the timeout specified when the idle callback was installed has expired."
            ],
            [
                "IdleDeadline.timeRemaining()",
                "Returns a DOMHighResTimeStamp, which is a floating-point value providing an estimate of the number of milliseconds remaining in the current idle period. If the idle period is over, the value is 0. Your callback can call this repeatedly to see if there's enough time left to do more work before returning."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IIRFilterNode",
        "",
        "IIRFilterNode",
        "",
        [
            [
                "IIRFilterNode()",
                "Creates a new instance of an IIRFilterNode object."
            ],
            [
                "getFrequencyResponse()",
                "Uses the filter's current parameter settings to calculate the response for frequencies specified in the provided array of frequencies."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ImageBitmap",
        "",
        "ImageBitmap",
        "The ImageBitmap interface represents a bitmap image which can be drawn to a <canvas> without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.",
        [
            [
                "ImageBitmap.height Read only",
                "Is an unsigned long representing the height, in CSS pixels, of the ImageData."
            ],
            [
                "ImageBitmap.width Read only",
                "Is an unsigned long representing the width, in CSS pixels, of the ImageData."
            ],
            [
                "ImageBitmap.close()",
                "Disposes of all graphical resources associated with an ImageBitmap."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ImageBitmapRenderingContext",
        "",
        "ImageBitmapRenderingContext",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "ImageBitmapRenderingContext.transferFromImageBitmap()",
                "Displays the given ImageBitmap in the canvas associated with this rendering context. Ownership of the ImageBitmap is transferred to the canvas. This was previously named transferImageBitmap(), but was renamed in a spec change. The old name is being kept as an alias to avoid code breakage."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ImageCapture",
        "",
        "ImageCapture",
        "The ImageCapture interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid MediaStreamTrack.",
        [
            [
                "ImageCapture()",
                "Creates a new ImageCapture object which can be used to capture still frames (photos) from a given MediaStreamTrack which represents a video stream."
            ],
            [
                "ImageCapture.track Read only",
                "Returns a reference to the MediaStreamTrack passed to the constructor."
            ],
            [
                "ImageCapture.takePhoto()",
                "Takes a single exposure using the video capture device sourcing a MediaStreamTrack and returns a Promise that resolves with a Blob containing the data."
            ],
            [
                "ImageCapture.getPhotoCapabilities()",
                "Returns a Promise that resolves with a PhotoCapabilities object containing the ranges of available configuration options."
            ],
            [
                "ImageCapture.getPhotoSettings()",
                "Returns a Promise that resolves with a PhotoSettings object containing the current photo configuration settings."
            ],
            [
                "ImageCapture.grabFrame()",
                "Takes a snapshot of the live video in a MediaStreamTrack, returning an ImageBitmap, if successful."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ImageData",
        "",
        "ImageData",
        "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().",
        [
            [
                "ImageData()",
                "Creates an ImageData object from a given Uint8ClampedArray and the size of the image it contains. If no array is given, it creates an image of a transparent black rectangle. Note that this is the most common way to create such an object in workers as createImageData() is not available there."
            ],
            [
                "ImageData.data Read only",
                "Is a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (inclusive)."
            ],
            [
                "ImageData.height Read only",
                "Is an unsigned long representing the actual height, in pixels, of the ImageData."
            ],
            [
                "ImageData.width Read only",
                "Is an unsigned long representing the actual width, in pixels, of the ImageData."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Index",
        "",
        "Index",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/InputDeviceCapabilities",
        "",
        "InputDeviceCapabilities",
        "",
        [
            [
                "InputDeviceCapabilities.InputDeviceCapabilities()",
                "Creates an InputDeviceCapabilities object."
            ],
            [
                "InputDeviceCapabilities.firesTouchEventsRead only",
                "A Boolean that indicates whether the device dispatches touch events."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/InputDeviceInfo",
        "",
        "InputDeviceInfo",
        "The InputDeviceInfo interface of the Media Streams API gives access to the capabilities of the input device that it represents.",
        [
            [
                "InputDeviceInfo.getCapabilities()",
                "Returns a MediaTrackCapabilities object describing the primary audio or video track of a device's MediaStream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/InputEvent",
        "",
        "InputEvent",
        "The InputEvent interface represents an event notifying the user of editable content changes.",
        [
            [
                "InputEvent()",
                "Creates an InputEvent object."
            ],
            [
                "InputEvent.dataRead only",
                "Returns a DOMString with the inserted characters. This may be an empty string if the change doesn't insert text (such as when deleting characters, for example)."
            ],
            [
                "InputEvent.dataTransferRead only",
                "Returns a DataTransfer object containing information about richtext or plaintext data being added to or removed from editable content."
            ],
            [
                "InputEvent.inputTypeRead only",
                "Returns the type of change for editable content such as, for example, inserting, deleting, or formatting text. See the property page for a complete list of input types."
            ],
            [
                "InputEvent.isComposingRead only",
                "Returns a Boolean value indicating if the event is fired after compositionstart and before compositionend."
            ],
            [
                "InputEvent.getTargetRanges()",
                "Returns an array of static ranges that will be affected by a change to the DOM if the input event is not canceled."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/InstallEvent",
        "",
        "InstallEvent",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "InstallEvent.InstallEvent()",
                "Creates a new InstallEvent object."
            ],
            [
                "InstallEvent.activeWorker Read only",
                "Returns the ServiceWorker that is currently controlling the page."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/InstallTrigger",
        "",
        "InstallTrigger",
        "",
        [
            [
                "InstallTrigger.compareVersion",
                "Compares the version of a file or package with the version of an existing file or package."
            ],
            [
                "InstallTrigger.enabled",
                "Indicates whether or not Software Installation is enabled for this client machine."
            ],
            [
                "InstallTrigger.getVersion()",
                "Parts of this page show the use of the XPInstall API. The majority of this API is now deprecated and as of Gecko 1.9 no longer available. Extension, Theme, and plug-in developers must switch away from install.js based packages to the new packaging scheme with an install.rdf manifest. In particular plugin developers should see how to package a plugin as an extension."
            ],
            [
                "InstallTrigger.install",
                "Installs one or more XPI files on the local machine."
            ],
            [
                "InstallTrigger.installChrome",
                "Installs new skin or locale packages in Netscape 6 and Mozilla."
            ],
            [
                "InstallTrigger.startSoftwareUpdate",
                "Triggers the downloading and installation of the software at the specified URL."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IntersectionObserver",
        "",
        "IntersectionObserver",
        "The IntersectionObserver interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root.",
        [
            [
                "IntersectionObserver.IntersectionObserver()",
                "Creates a new IntersectionObserver object which will execute a specified callback function when it detects that a target element's visibility has crossed one or more thresholds."
            ],
            [
                "IntersectionObserver.root Read only",
                "The Element or Document whose bounds are used as the bounding box when testing for intersection. If no root value was passed to the constructor or its value is null, the top-level document's viewport is used."
            ],
            [
                "IntersectionObserver.rootMargin Read only",
                "An offset rectangle applied to the root's bounding box when calculating intersections, effectively shrinking or growing the root for calculation purposes. The value returned by this property may not be the same as the one specified when calling the constructor as it may be changed to match internal requirements. Each offset can be expressed in pixels (px) or as a percentage (%). The default is \"0px 0px 0px 0px\"."
            ],
            [
                "IntersectionObserver.thresholds Read only",
                "A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. Notifications for a target are generated when any of the thresholds are crossed for that target. If no value was passed to the constructor, 0 is used."
            ],
            [
                "IntersectionObserver.disconnect()",
                "Stops the IntersectionObserver object from observing any target."
            ],
            [
                "IntersectionObserver.observe()",
                "Tells the IntersectionObserver a target element to observe."
            ],
            [
                "IntersectionObserver.takeRecords()",
                "Returns an array of IntersectionObserverEntry objects for all observed targets."
            ],
            [
                "IntersectionObserver.unobserve()",
                "Tells the IntersectionObserver to stop observing a particular target element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/IntersectionObserverEntry",
        "",
        "IntersectionObserverEntry",
        "The IntersectionObserverEntry interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition. Instances of IntersectionObserverEntry are delivered to an IntersectionObserver callback in its entries parameter; otherwise, these objects can only be obtained by calling IntersectionObserver.takeRecords().",
        [
            [
                "IntersectionObserverEntry.boundingClientRect Read only",
                "Returns the bounds rectangle of the target element as a DOMRectReadOnly. The bounds are computed as described in the documentation for Element.getBoundingClientRect()."
            ],
            [
                "IntersectionObserverEntry.intersectionRatio Read only",
                "Returns the ratio of the intersectionRect to the boundingClientRect."
            ],
            [
                "IntersectionObserverEntry.intersectionRect Read only",
                "Returns a DOMRectReadOnly representing the target's visible area."
            ],
            [
                "IntersectionObserverEntry.isIntersecting Read only",
                "A Boolean value which is true if the target element intersects with the intersection observer's root. If this is true, then, the IntersectionObserverEntry describes a transition into a state of intersection; if it's false, then you know the transition is from intersecting to not-intersecting."
            ],
            [
                "IntersectionObserverEntry.rootBounds Read only",
                "Returns a DOMRectReadOnly for the intersection observer's root."
            ],
            [
                "IntersectionObserverEntry.target Read only",
                "The Element whose intersection with the root changed."
            ],
            [
                "IntersectionObserverEntry.time Read only",
                "A DOMHighResTimeStamp indicating the time at which the intersection was recorded, relative to the IntersectionObserver's time origin."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/InterventionReportBody",
        "",
        "InterventionReportBody",
        "The InterventionReportBody interface of the Reporting API represents the body of an intervention report.",
        [
            [
                "InterventionReportBody.idRead only",
                "A string representing the intervention that generated the report. This can be used to group reports."
            ],
            [
                "InterventionReportBody.messageRead only",
                "A string containing a human-readable description of the intervention, including information such how the intervention could be avoided. This typically matches the message a browser will display in its DevTools console when an intervention is imposed, if one is available."
            ],
            [
                "InterventionReportBody.sourceFileRead only",
                "A string containing the path to the source file where the intervention occurred, if known, or null otherwise."
            ],
            [
                "InterventionReportBody.lineNumberRead only",
                "A string representing the line in the source file in which the intervention occurred, if known, or null otherwise."
            ],
            [
                "InterventionReportBody.columnNumberRead only",
                "A string representing the column in the source file in which the intervention occurred, if known, or null otherwise."
            ],
            [
                "InterventionReportBody.toJSON()",
                "A serializer which returns a JSON representation of the InterventionReportBody object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Keyboard",
        "",
        "Keyboard",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Keyboard.getLayoutMap()",
                "Returns a Promise that resolves with an instance of KeyboardLayoutMap which is a map-like object with functions for retrieving the strings associated with specific physical keys."
            ],
            [
                "Keyboard.lock()",
                "Returns a Promise after enabling the capture of keypresses for any or all of the keys on the physical keyboard."
            ],
            [
                "Keyboard.unlock()",
                "Unlocks all keys captured by the lock() method and returns synchronously."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/KeyboardEvent",
        "",
        "KeyboardEvent",
        "KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (keydown, keypress, or keyup) identifies what kind of keyboard activity occurred.",
        [
            [
                "KeyboardEvent()",
                "Creates a new KeyboardEvent object."
            ],
            [
                "KeyboardEvent.altKey Read only",
                "Returns a Boolean that is true if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated."
            ],
            [
                "KeyboardEvent.code Read only",
                "Returns a DOMString with the code value of the physical key represented by the event. Warning: This ignores the user's keyboard layout, so that if the user presses the key at the \"Y\" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return \"KeyY\", even if the user has a QWERTZ keyboard (which would mean the user expects a \"Z\" and all the other properties would indicate a \"Z\") or a Dvorak keyboard layout (where the user would expect an \"F\"). If you want to display the correct keystrokes to the user, you can use Keyboard.getLayoutMap()."
            ],
            [
                "KeyboardEvent.ctrlKey Read only",
                "Returns a Boolean that is true if the Ctrl key was active when the key event was generated."
            ],
            [
                "KeyboardEvent.isComposing Read only",
                "Returns a Boolean that is true if the event is fired between after compositionstart and before compositionend."
            ],
            [
                "KeyboardEvent.key Read only",
                "Returns a DOMString representing the key value of the key represented by the event."
            ],
            [
                "KeyboardEvent.locale Read only",
                "Returns a DOMString representing a locale string indicating the locale the keyboard is configured for. This may be the empty string if the browser or device doesn't know the keyboard's locale. Note: This does not describe the locale of the data being entered. A user may be using one keyboard layout while typing text in a different language."
            ],
            [
                "KeyboardEvent.location Read only",
                "Returns a Number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations."
            ],
            [
                "KeyboardEvent.metaKey Read only",
                "Returns a Boolean that is true if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated."
            ],
            [
                "KeyboardEvent.repeat Read only",
                "Returns a Boolean that is true if the key is being held down such that it is automatically repeating."
            ],
            [
                "KeyboardEvent.shiftKey Read only",
                "Returns a Boolean that is true if the Shift key was active when the key event was generated."
            ],
            [
                "KeyboardEvent.getModifierState()",
                "Returns a Boolean indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created."
            ],
            [
                "KeyboardEvent.initKeyEvent()",
                "Initializes a KeyboardEvent object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the KeyboardEvent() constructor."
            ],
            [
                "KeyboardEvent.initKeyboardEvent()",
                "Initializes a KeyboardEvent object. This is now deprecated. You should instead use the KeyboardEvent() constructor."
            ],
            [
                "KeyboardEvent.char Read only",
                "Returns a DOMString representing the character value of the key. If the key corresponds to a printable character, this value is a non-empty Unicode string containing that character. If the key doesn't have a printable representation, this is an empty string. Note: If the key is used as a macro that inserts multiple characters, this attribute's value is the entire string, not just the first character."
            ],
            [
                "KeyboardEvent.charCode Read only",
                "Returns a Number representing the Unicode reference number of the key; this attribute is used only by the keypress event. For keys whose char attribute contains multiple characters, this is the Unicode value of the first character in that attribute. In Firefox 26 this returns codes for printable characters. Warning: This attribute is deprecated; you should use KeyboardEvent.key instead, if available."
            ],
            [
                "KeyboardEvent.keyCode Read only",
                "Returns a Number representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key. Warning: This attribute is deprecated; you should use KeyboardEvent.key instead, if available."
            ],
            [
                "KeyboardEvent.keyIdentifier Read only",
                "This property is non-standard and has been deprecated in favor of KeyboardEvent.key. It was part of an old version of DOM Level 3 Events."
            ],
            [
                "KeyboardEvent.keyLocation Read only",
                "This is a non-standard deprecated alias for KeyboardEvent.location. It was part of an old version of DOM Level 3 Events."
            ],
            [
                "KeyboardEvent.which Read only",
                "Returns a Number representing a system and implementation dependent numeric code identifying the unmodified value of the pressed key; this is usually the same as keyCode. Warning: This attribute is deprecated; you should use KeyboardEvent.key instead, if available."
            ],
            [
                "keydown",
                "A key has been pressed."
            ],
            [
                "keyup",
                "A key has been released."
            ],
            [
                "keypress",
                "A key that normally produces a character value has been pressed. This event was highly device-dependent and is obsolete. You should not use it."
            ],
            [
                "Windows",
                "Auto-repeat behavior is the same as in Gecko 4.0 and later."
            ],
            [
                "Mac",
                "After the initial keydown event, only keypress events are sent until the keyup event occurs; the inter-spaced keydown events are not sent."
            ],
            [
                "Linux",
                "The event behavior depends on the specific platform. It will either behave like Windows or Mac depending on what the native event model does."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/KeyboardLayoutMap",
        "",
        "KeyboardLayoutMap",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "KeyboardLayoutMap.entries Read only",
                "Returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
            ],
            [
                "KeyboardLayoutMap.keys Read only",
                "Returns a new Array Iterator object that contains the keys for each index in the array."
            ],
            [
                "KeyboardLayoutMap.size Read only",
                "Returns the number of elements in the KeyboardLayoutMap object."
            ],
            [
                "KeyboardLayoutMap.values Read only",
                "Returns a new Array Iterator object that contains the values for each index in the KeyboardLayoutMap object."
            ],
            [
                "KeyboardLayoutMap.forEach() Read only",
                "Executes a provided function once for each element of KeyboardLayoutMap."
            ],
            [
                "KeyboardLayoutMap.get()",
                "Returns the element with the given key from the KeyboardLayoutMap object."
            ],
            [
                "KeyboardLayoutMap.has()",
                "Returns a boolean indicating whether the KeyboardLayoutMap object has an element with the specified key."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/KeyframeEffect",
        "",
        "KeyframeEffect",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "KeyframeEffect()",
                "Returns a new KeyframeEffect object instance, and also allows you to clone an existing keyframe effect object instance."
            ],
            [
                "KeyframeEffect.target",
                "Gets and sets the element, or originating element of the pseudo-element, being animated by this object. This may be null for animations that do not target a specific element or pseudo-element."
            ],
            [
                "KeyframeEffect.pseudoElement",
                "Gets and sets the selector of the pseudo-element being animated by this object. This may be null for animations that do not target a pseudo-element."
            ],
            [
                "KeyframeEffect.iterationComposite",
                "Gets and sets the iteration composite operation for resolving the property value changes of this keyframe effect."
            ],
            [
                "KeyframeEffect.composite",
                "Gets and sets the composite operation property for resolving the property value changes between this and other keyframe effects."
            ],
            [
                "AnimationEffect.getComputedTiming()",
                "Returns the calculated, current timing values for this keyframe effect."
            ],
            [
                "KeyframeEffect.getKeyframes()",
                "Returns the computed keyframes that make up this effect along with their computed keyframe offsets."
            ],
            [
                "AnimationEffect.getTiming()",
                "The EffectTiming object associated with the animation containing all the animation's timing values."
            ],
            [
                "KeyframeEffect.setKeyframes()",
                "Replaces the set of keyframes that make up this effect."
            ],
            [
                "AnimationEffect.updateTiming()",
                "Updates the specified timing properties."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/KeyframeEffectOptions",
        "",
        "KeyframeEffectOptions",
        "",
        [
            [
                "composite Optional",
                "Determines how values are combined between this animation and other, separate animations that do not specify their own specific composite operation. Defaults to replace. add dictates an additive effect, where each successive iteration builds on the last. For instance with transform, a translateX(-200px) would not override an earlier rotate(20deg) value but result in translateX(-200px) rotate(20deg). accumulate is similar but a little smarter: blur(2) and blur(5) become blur(7), not blur(2) blur(5). replace overwrites the previous value with the new one."
            ],
            [
                "iterationComposite Optional",
                "Determines how values build from iteration to iteration in this animation. Can be set to accumulate or replace (see above). Defaults to replace."
            ],
            [
                "pseudoElement Optional",
                "The selector of the pseudo-element to be targeted, if any. Defaults to null."
            ],
            [
                "delay Optional",
                "The number of milliseconds to delay the start of the animation. Defaults to 0."
            ],
            [
                "direction Optional",
                "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to \"normal\"."
            ],
            [
                "duration Optional",
                "The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0."
            ],
            [
                "easing Optional",
                "The rate of the animation's change over time. Accepts the pre-defined values \"linear\", \"ease\", \"ease-in\", \"ease-out\", and \"ease-in-out\", or a custom \"cubic-bezier\" value like \"cubic-bezier(0.42, 0, 0.58, 1)\". Defaults to \"linear\"."
            ],
            [
                "endDelay Optional",
                "The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0."
            ],
            [
                "fill Optional",
                "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (\"backwards\"), retained after the animation has completed playing (\"forwards\"), or both. Defaults to \"none\"."
            ],
            [
                "iterationStart Optional",
                "Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0."
            ],
            [
                "iterations Optional",
                "The number of times the animation should repeat. Defaults to 1, and can also take a value of Infinity to make it repeat for as long as the element exists."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/KHR_parallel_shader_compile",
        "",
        "KHR_parallel_shader_compile",
        "This page is not complete.",
        [
            [
                "ext.COMPLETION_STATUS_KHR",
                "A GLenum."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LargestContentfulPaint",
        "",
        "LargestContentfulPaint",
        "The LargestContentfulPaint interface of the Largest Contentful Paint API provides details about the largest image or text paint before user input on a web page. The timing of this paint is a good heuristic for when the main page content is available during load.",
        [
            [
                "LargestContentfulPaint.elementRead only",
                "The element that is the current largest contentful paint."
            ],
            [
                "LargestContentfulPaint.renderTimeRead only",
                "The time the element was rendered to the screen. May not be available if the element is a cross-origin image loaded without the Timing-Allow-Origin header."
            ],
            [
                "LargestContentfulPaint.loadTimeRead only",
                "The time the element was loaded."
            ],
            [
                "LargestContentfulPaint.sizeRead only",
                "The intrinsic size of the element returned as the area (width * height)."
            ],
            [
                "LargestContentfulPaint.idRead only",
                "The id of the element. This property returns an empty string when there is no id."
            ],
            [
                "LargestContentfulPaint.urlRead only",
                "If the element is an image, the request url of the image."
            ],
            [
                "LargestContentfulPaint.toJSON()",
                "Returns the above properties as JSON."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LayoutShift",
        "",
        "LayoutShift",
        "The LayoutShift interface of the Layout Instability API provides insights into the stability of web pages based on movements of the elements on the page.",
        [
            [
                "LayoutShift.value",
                "Returns the impact fraction (fraction of the viewport that was shifted) times the distance fraction (distance moved as a fraction of viewport)."
            ],
            [
                "LayoutShift.hadRecentInput",
                "Returns true if there was a user input in the past 500 milliseconds."
            ],
            [
                "LayoutShift.lastInputTime",
                "Returns the time of the most recent user input."
            ],
            [
                "LayoutShift.sources",
                "Returns an array of LayoutShiftAttribution objects with information on the elements that were shifted."
            ],
            [
                "LayoutShift.toJSON()",
                "Converts the properties to JSON."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LayoutShiftAttribution",
        "",
        "LayoutShiftAttribution",
        "The LayoutShiftAttribution interface of the Layout Instability API provides debugging information about elements which have shifted.",
        [
            [
                "LayoutShiftAttribution.NodeRead only",
                "Returns the element that has shifted (null if it has been removed)."
            ],
            [
                "LayoutShiftAttribution.previousRectRead only",
                "Returns a DOMRectReadOnly object representing the position of the element before the shift."
            ],
            [
                "LayoutShiftAttribution.currentRectRead only",
                "Returns a DOMRectReadOnly object representing the position of the element after the shift."
            ],
            [
                "LayoutShiftAttribution.toJSON()",
                "Returns a JSON representation of the LayoutShiftAttribution object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LinearAccelerationSensor",
        "",
        "LinearAccelerationSensor",
        "The LinearAccelerationSensor interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.",
        [
            [
                "LinearAccelerationSensor()",
                "Creates a new LinearAccelerationSensor object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LocalFileSystem",
        "",
        "LocalFileSystem",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "type",
                "The storage type of the file system. The values can be either TEMPORARY or PERSISTENT."
            ],
            [
                "size",
                "The storage space—in bytes—that you need for your app."
            ],
            [
                "successCallback",
                "The success callback that is called when the browser provides a file system. Its argument is the FileSystem object with two properties: name - the unique name assigned by the browser to the file system. root - the read-only DirectoryEntry object representing the root of the file system."
            ],
            [
                "opt_errorCallback",
                "The error callback that is called when errors happen or when the request to obtain the file system is denied. Its argument is the FileError object."
            ],
            [
                "void",
                ""
            ],
            [
                "url",
                "The URL of a local file in the file system."
            ],
            [
                "successCallback",
                "The success callback that is called when the browser provides the file or directory for the supplied URL."
            ],
            [
                "errorCallback",
                "The error callback that is called when errors happen or when the request to obtain the entry object is denied."
            ],
            [
                "void",
                ""
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LocalFileSystemSync",
        "",
        "LocalFileSystemSync",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "type",
                "The storage type of the file system. The values can be either TEMPORARY or PERSISTENT."
            ],
            [
                "size",
                "The storage space—in bytes—that you need for your app."
            ],
            [
                "FileSystemSync",
                "An object that represents the file system."
            ],
            [
                "url",
                "The URL of a local file in the file system."
            ],
            [
                "EntrySync",
                "An object that represents entries in the file system."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Location",
        "",
        "Location",
        "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
        [
            [
                "Location.ancestorOrigins",
                "Is a static DOMStringList containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given Location object."
            ],
            [
                "Location.href",
                "Is a stringifier that returns a USVString containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document."
            ],
            [
                "Location.protocol",
                "Is a USVString containing the protocol scheme of the URL, including the final ':'."
            ],
            [
                "Location.host",
                "Is a USVString containing the host, that is the hostname, a ':', and the port of the URL."
            ],
            [
                "Location.hostname",
                "Is a USVString containing the domain of the URL."
            ],
            [
                "Location.port",
                "Is a USVString containing the port number of the URL."
            ],
            [
                "Location.pathname",
                "Is a USVString containing an initial '/' followed by the path of the URL, not including the query string or fragment."
            ],
            [
                "Location.search",
                "Is a USVString containing a '?' followed by the parameters or \"querystring\" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring."
            ],
            [
                "Location.hash",
                "Is a USVString containing a '#' followed by the fragment identifier of the URL."
            ],
            [
                "Location.origin Read only",
                "Returns a USVString containing the canonical form of the origin of the specific location."
            ],
            [
                "Location.assign()",
                "Loads the resource at the URL provided in parameter."
            ],
            [
                "Location.reload()",
                "Reloads the current URL, like the Refresh button."
            ],
            [
                "Location.replace()",
                "Replaces the current resource with the one at the provided URL (redirects to the provided URL). The difference from the assign() method and setting the href property is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it."
            ],
            [
                "Location.toString()",
                "Returns a USVString containing the whole URL. It is a synonym for HTMLAnchorElement.href, though it can't be used to modify the value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Lock",
        "",
        "Lock",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Lock.mode Read only",
                "Returns the access mode passed to LockManager.request() when the lock was requested. The mode is either \"exclusive\" (the default) or \"shared\"."
            ],
            [
                "Lock.name Read only",
                "Returns the name passed to LockManager.request() when the lock was requested."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LockedFile",
        "",
        "LockedFile",
        "",
        [
            [
                "LockedFile.fileHandle Read only",
                "The IDBMutableFile object from which the lock was opened."
            ],
            [
                "LockedFile.mode Read only",
                "The mode for accessing the file; can be readonly or readwrite."
            ],
            [
                "LockedFile.active Read only",
                "A flag indicating if the file can be accessed (true) or not (false)."
            ],
            [
                "LockedFile.location",
                "The position of the reading/writing pointer within the file."
            ],
            [
                "LockedFile.oncomplete",
                "The complete event is triggered each time a read or write operation is successful."
            ],
            [
                "LockedFile.onabort",
                "The abort event is triggered each time the abort() method is called."
            ],
            [
                "LockedFile.onerror",
                "The error event is triggered each time something goes wrong."
            ],
            [
                "LockedFile.getMetadata()",
                "Allows to retrieve the file metadata (size and date of the last modification). Returns a FileRequest."
            ],
            [
                "LockedFile.readAsArrayBuffer()",
                "Allows to retrieve a part of the content of the file as an ArrayBuffer. Returns a FileRequest object."
            ],
            [
                "LockedFile.readAsText()",
                "Allows to retrieve a part of the content of the file as a string. Returns a FileRequest object."
            ],
            [
                "LockedFile.write()",
                "Allows to write some data in the file starting at the location offset. Returns a FileRequest object."
            ],
            [
                "LockedFile.append()",
                "Allows to write some data at the end of the file. Returns a FileRequest object."
            ],
            [
                "LockedFile.truncate()",
                "Allows to truncate the file's content. Returns a FileRequest object."
            ],
            [
                "LockedFile.flush()",
                "Allows to guarantee that any buffered data has been transferred to disk."
            ],
            [
                "LockedFile.abort()",
                "Makes the LockedFile inactive and cancels all ongoing operations."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/LockManager",
        "",
        "LockManager",
        "",
        [
            [
                "LockManager.request()",
                "Requests a Lock object with parameters specifying its name and characteristics."
            ],
            [
                "LockManager.query()",
                "Returns a Promise that resolves with a LockManagerSnapshot which contains information about held and pending locks."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Magnetometer",
        "",
        "Magnetometer",
        "The Magnetometer interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.",
        [
            [
                "Magnetometer()",
                "Creates a new Magnetometer object."
            ],
            [
                "Magnetometer.x Read only",
                "Returns a double containing the magnetic field around the device's x axis."
            ],
            [
                "Magnetometer.y Read only",
                "Returns a double containing the magnetic field around the device's y axis."
            ],
            [
                "Magnetometer.z Read only",
                "Returns a double containing the magnetic field around the device's z axis."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MathMLElement",
        "",
        "MathMLElement",
        "The MathMLElement interface represents any MathML element.",
        [
            [
                "MathMLElement.attributeStyleMap Read only",
                "A StylePropertyMap representing the declarations of the element's style attribute."
            ],
            [
                "MathMLElement.style",
                "A CSSStyleDeclaration representing the declarations of the element's style attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaCapabilities",
        "",
        "MediaCapabilities",
        "",
        [
            [
                "MediaCapabilities.encodingInfo()",
                "When passed a valid media configuration, it returns a promise with information as to whether the media type is supported, and whether encoding such media would be smooth and power efficient."
            ],
            [
                "MediaCapabilities.decodingInfo()",
                "When passed a valid media configuration, it returns a promise with information as to whether the media type is supported, and whether decoding such media would be smooth and power efficient."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaCapabilitiesInfo",
        "",
        "MediaCapabilitiesInfo",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaConfiguration",
        "",
        "MediaConfiguration",
        "The MediaConfiguration MediaCapabilities dictionary of the Media Capabilities API describes how media and audio files must be configured, or defined, to be passed as a parameter of the MediaCapabilities.encodingInfo() and MediaCapabilities.encodingInfo() methods.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaDecodingConfiguration",
        "",
        "MediaDecodingConfiguration",
        "The MediaDecodingConfiguration dictionary of the Media Capabilities API is used to define the type of media being tested when calling MediaCapabilities.decodingInfo() to query whether a specific media configuration is supported, smooth, and/or power efficient.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaDeviceInfo",
        "",
        "MediaDeviceInfo",
        "The MediaDeviceInfo interface contains information that describes a single media input or output device. The list of devices obtained by calling navigator.mediaDevices.enumerateDevices() is an array of MediaDeviceInfo objects, one per media device.",
        [
            [
                "MediaDeviceInfo.deviceIdRead only",
                "Returns a DOMString that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions)."
            ],
            [
                "MediaDeviceInfo.groupIdRead only",
                "Returns a DOMString that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone."
            ],
            [
                "MediaDeviceInfo.kindRead only",
                "Returns an enumerated value that is either \"videoinput\", \"audioinput\" or \"audiooutput\"."
            ],
            [
                "MediaDeviceInfo.labelRead only",
                "Returns a DOMString that is a label describing this device (for example \"External USB Webcam\")."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaDevices",
        "",
        "MediaDevices",
        "The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.",
        [
            [
                "devicechange",
                "Fired when a media input or output device is attached to or removed from the user's computer. Also available via the ondevicechange property."
            ],
            [
                "enumerateDevices()",
                "Obtains an array of information about the media input and output devices available on the system."
            ],
            [
                "getSupportedConstraints()",
                "Returns an object conforming to MediaTrackSupportedConstraints indicating which constrainable properties are supported on the MediaStreamTrack interface. See Capabilities and constraints in Media Capture and Streams API (Media Stream) to learn more about constraints and how to use them."
            ],
            [
                "getDisplayMedia()",
                "Prompts the user to select a display or portion of a display (such as a window) to capture as a MediaStream for sharing or recording purposes. Returns a promise that resolves to a MediaStream."
            ],
            [
                "getUserMedia()",
                "With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaElementAudioSourceNode",
        "",
        "MediaElementAudioSourceNode",
        "",
        [
            [
                "MediaElementAudioSourceNode()",
                "Creates a new MediaElementAudioSourceNode object instance."
            ],
            [
                "mediaElement Read only",
                "The HTMLMediaElement used when constructing this MediaStreamAudioSourceNode."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaEncodingConfiguration",
        "",
        "MediaEncodingConfiguration",
        "The MediaEncodingConfiguration dictionary of the Media Capabilities API is used to define the type of media being tested when calling MediaCapabilities.encodingInfo() to query whether a specific media configuration is supported, smooth, and/or power efficient.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaError",
        "",
        "MediaError",
        "",
        [
            [
                "MediaError.code",
                "A number which represents the general type of error that occurred, as follows: Name Value Description MEDIA_ERR_ABORTED 1 The fetching of the associated resource was aborted by the user's request. MEDIA_ERR_NETWORK 2 Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available. MEDIA_ERR_DECODE 3 Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error. MEDIA_ERR_SRC_NOT_SUPPORTED 4 The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable."
            ],
            [
                "MediaError.message",
                "A DOMString object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one user agent to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (\"\")."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaImage",
        "",
        "MediaImage",
        "",
        [
            [
                "src",
                "The URL from which the user agent fetches the image's data."
            ],
            [
                "sizes",
                "Specifies the resource in multiple sizes so the user agent doesn't have to scale a single image."
            ],
            [
                "type",
                "The MIME type hint for the user agent that allows it to ignore images of types that it doesn't support. However, the user agent may still use MIME type sniffing after downloading the image to determine its type."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaKeyMessageEvent",
        "",
        "MediaKeyMessageEvent",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "MediaKeyMessageEvent()",
                "Creates a new instance of MediaKeyMessageEvent."
            ],
            [
                "MediaKeyMessageEvent.message Read only",
                "Returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system."
            ],
            [
                "MediaKeyMessageEvent.messageType Read only",
                "Indicates the type of message. May be one of license-request, license-renewal, license-release, or individualization-request."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaKeys",
        "",
        "MediaKeys",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "MediaKeys.createSession()",
                "Returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM)."
            ],
            [
                "MediaKeys.setServerCertificate()",
                "Returns a Promise to a server certificate to be used to encrypt messages to the license server."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaKeySession",
        "",
        "MediaKeySession",
        "",
        [
            [
                "MediaKeySession.closed Read only",
                "Returns a Promise signaling when a MediaKeySession closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data."
            ],
            [
                "MediaKeySession.expiration Read only",
                "The time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window."
            ],
            [
                "MediaKeySession.keyStatuses Read only",
                "Contains a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses."
            ],
            [
                "MediaKeySession.sessionId Read only",
                "Contains a unique string generated by the CDM for the current media object and its associated keys or licenses."
            ],
            [
                "MediaKeySession.onkeystatuseschange",
                "Sets the EventHandler called when there has been a change in the keys in a session or their statuses."
            ],
            [
                "MediaKeySession.onmessage",
                "Sets the EventHandler called when the content decryption module has generated a message for the session."
            ],
            [
                "MediaKeySession.close()",
                "Returns a Promise after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it."
            ],
            [
                "MediaKeySession.generateRequest()",
                "Returns a Promise after generating a media request based on initialization data."
            ],
            [
                "MediaKeySession.load()",
                "Returns a Promise that resolves to a boolean value after loading data for a specified session object."
            ],
            [
                "MediaKeySession.remove()",
                "Returns a Promise after removing any session data associated with the current object."
            ],
            [
                "MediaKeySession.update()",
                "Returns a Promise after loading messages and licenses to the CDM."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaKeyStatusMap",
        "",
        "MediaKeyStatusMap",
        "",
        [
            [
                "MediaKeyStatusMap.size Read only",
                "Returns the number of key/value pars in the status map."
            ],
            [
                "MediaKeyStatusMap.entries() Read only",
                "Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order."
            ],
            [
                "MediaKeyStatusMap.forEach(callback[, argument]) Read only",
                "Calls callback once for each key-value pair in the status map, in insertion order. If argument is present it will be passed to the callback."
            ],
            [
                "MediaKeyStatusMap.get() Read only",
                "Returns the value associated with the given key, or undefined if there is none."
            ],
            [
                "MediaKeyStatusMap.has() Read only",
                "Returns a boolean asserting whether a value has been associated with the given key."
            ],
            [
                "MediaKeyStatusMap.keys() Read only",
                "Returns a new Iterator object containing keys for each element in the status map, in insertion order."
            ],
            [
                "MediaKeyStatusMap.values() Read only",
                "Returns a new Iterator object containing values for each element in the status map, in insertion order."
            ],
            [
                "MediaKeyStatusMap.[@@iterator]() Read only",
                "Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaKeySystemAccess",
        "",
        "MediaKeySystemAccess",
        "",
        [
            [
                "MediaKeySystemAccess.keySystem Read only",
                "Returns a DOMString identifying the key system being used."
            ],
            [
                "MediaKeySystemAccess.createMediaKeys()",
                "Returns a Promise that resolves to a new MediaKeys object."
            ],
            [
                "MediaKeySystemAccess.getConfiguration()",
                "Returns a MediaKeySystemConfiguration object with the supported combination of configuration options."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaKeySystemConfiguration",
        "",
        "MediaKeySystemConfiguration",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "MediaKeySystemConfiguration.initDataTypes Read only",
                "Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data."
            ],
            [
                "MediaKeySystemConfiguration.audioCapabilities Read only",
                "Returns a list of supported audio type and capability pairs."
            ],
            [
                "MediaKeySystemConfiguration.videoCapabilities Read only",
                "Returns a list of supported video type and capability pairs."
            ],
            [
                "MediaKeySystemConfiguration.distinctiveIdentifier Read only",
                "Indicates whether a persistent distinctive identifier is required."
            ],
            [
                "MediaKeySystemConfiguration.persistentState Read only",
                "Indicates whether the ability to persist state is required."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaList",
        "",
        "MediaList",
        "The MediaList interface represents the media queries of a stylesheet, e.g. those set using a <link> element's media attribute.",
        [
            [
                "MediaList.mediaText",
                "A stringifier that returns a DOMString representing the MediaList as text, and also allows you to set a new MediaList."
            ],
            [
                "MediaList.length Read only",
                "Returns the number of media queries in the MediaList."
            ],
            [
                "MediaList.appendMedium()",
                "Adds a media query to the MediaList."
            ],
            [
                "MediaList.deleteMedium()",
                "Removes a media query from the MediaList."
            ],
            [
                "MediaList.item()",
                "A getter that returns a CSSOMString representing a media query as text, given the media query's index value inside the MediaList."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaMetadata",
        "",
        "MediaMetadata",
        "",
        [
            [
                "MediaMetadata.MediaMetadata()",
                "Creates a new MediaMetaData object."
            ],
            [
                "MediaMetadata.title",
                "Returns or sets the title of the media to be played."
            ],
            [
                "MediaMetadata.artist",
                "Returns or sets the name of the artist, group, creator, etc. of the media to be played."
            ],
            [
                "MediaMetadata.album",
                "Returns or sets the name of the album or collection containing the media to be played."
            ],
            [
                "MediaMetadata.artwork",
                "Returns or sets an array of images associated with playing media."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaQueryList",
        "",
        "MediaQueryList",
        "",
        [
            [
                "matchesRead only",
                "A Boolean that returns true if the document currently matches the media query list, or false if not."
            ],
            [
                "mediaRead only",
                "A DOMString representing a serialized media query."
            ],
            [
                "addListener()",
                "Adds to the MediaQueryList a callback which is invoked whenever the media query status—whether or not the document matches the media queries in the list—changes. This method exists primarily for backward compatibility; if possible, you should instead use addEventListener() to watch for the change event."
            ],
            [
                "removeListener()",
                "Removes the specified listener callback from the callbacks to be invoked when the MediaQueryList changes media query status, which happens any time the document switches between matching and not matching the media queries listed in the MediaQueryList. This method has been kept for backward compatibility; if possible, you should generally use removeEventListener() to remove change notification callbacks (which should have previously been added using addEventListener())."
            ],
            [
                "change",
                "Sent to the MediaQueryList when the result of running the media query against the document changes. For example, if the media query is (min-width: 400px), the change event is fired any time the width of the document's viewport changes such that its width moves across the 400px boundary in either direction. Also available using the onchange event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaQueryListEvent",
        "",
        "MediaQueryListEvent",
        "",
        [
            [
                "MediaQueryListEvent()",
                "Creates a new MediaQueryListEvent instance."
            ],
            [
                "MediaQueryListEvent.matchesRead only",
                "A Boolean that returns true if the document currently matches the media query list, or false if not."
            ],
            [
                "MediaQueryListEvent.mediaRead only",
                "A DOMString representing a serialized media query."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaRecorder",
        "",
        "MediaRecorder",
        "The MediaRecorder interface of the MediaStream Recording API provides functionality to easily record media. It is created using the MediaRecorder() constructor.",
        [
            [
                "MediaRecorder()",
                "Creates a new MediaRecorder object, given a MediaStream to record. Options are available to do things like set the container's MIME type (such as \"video/webm\" or \"video/mp4\") and the bit rates of the audio and video tracks or a single overall bit rate."
            ],
            [
                "MediaRecorder.mimeType Read only",
                "Returns the MIME type that was selected as the recording container for the MediaRecorder object when it was created."
            ],
            [
                "MediaRecorder.state Read only",
                "Returns the current state of the MediaRecorder object (inactive, recording, or paused.)"
            ],
            [
                "MediaRecorder.stream Read only",
                "Returns the stream that was passed into the constructor when the MediaRecorder was created."
            ],
            [
                "MediaRecorder.ignoreMutedMedia",
                "Indicates whether the MediaRecorder instance will record input when the input MediaStreamTrack is muted. If this attribute is false, MediaRecorder will record silence for audio and black frames for video. The default is false."
            ],
            [
                "MediaRecorder.videoBitsPerSecond Read only",
                "Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided)."
            ],
            [
                "MediaRecorder.audioBitsPerSecond Read only",
                "Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided)."
            ],
            [
                "MediaRecorder.pause()",
                "Pauses the recording of media."
            ],
            [
                "MediaRecorder.requestData()",
                "Requests a Blob containing the saved data received thus far (or since the last time requestData() was called. After calling this method, recording continues, but in a new Blob."
            ],
            [
                "MediaRecorder.resume()",
                "Resumes recording of media after having been paused."
            ],
            [
                "MediaRecorder.start()",
                "Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk."
            ],
            [
                "MediaRecorder.stop()",
                "Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs."
            ],
            [
                "MediaRecorder.isTypeSupported()",
                "A static method which returns a true or false value indicating if the given MIME media type is supported by the current user agent."
            ],
            [
                "MediaRecorder.ondataavailable",
                "Called to handle the dataavailable event, which is periodically triggered each time timeslice milliseconds of media have been recorded (or when the entire media has been recorded, if timeslice wasn't specified). The event, of type BlobEvent, contains the recorded media in its data property. You can then collect and act upon that recorded media data using this event handler."
            ],
            [
                "MediaRecorder.onerror",
                "An event handler called to handle the error event, including reporting errors that arise with media recording. These are fatal errors that stop recording. The received event is based on the MediaRecorderErrorEvent interface, whose error property contains a DOMException that describes the actual error that occurred."
            ],
            [
                "MediaRecorder.onpause",
                "An event handler called to handle the pause event, which occurs when media recording is paused."
            ],
            [
                "MediaRecorder.onresume",
                "An event handler called to handle the resume event, which occurs when media recording resumes after being paused."
            ],
            [
                "MediaRecorder.onstart",
                "An event handler called to handle the start event, which occurs when media recording starts."
            ],
            [
                "MediaRecorder.onstop",
                "An event handler called to handle the stop event, which occurs when media recording ends, either when the MediaStream ends — or after the MediaRecorder.stop() method is called."
            ],
            [
                "MediaRecorder.onwarning",
                "An event handler called to handle the warning event, which occurs when media recording has a non-fatal error, or after the MediaRecorder.onwarning() method is called."
            ],
            [
                "error",
                "Fired when an error occurs: for example because recording wasn't allowed or was attempted using an unsupported codec. Also available via the onerror property."
            ],
            [
                "warning",
                "Fired when a problem occurs that does not halt recording. Also available via the onwarning property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaRecorderErrorEvent",
        "",
        "MediaRecorderErrorEvent",
        "The MediaRecorderErrorEvent interface represents errors returned by the MediaStream Recording API. It is an Event object that encapsulates a reference to a DOMException describing the error that occurred.",
        [
            [
                "error Read only",
                "A DOMException containing information about the error that occurred. Read only."
            ],
            [
                "MediaStreamRecorderEvent()",
                "Creates and returns a new MediaRecorderErrorEvent event object with the given parameters."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaSession",
        "",
        "MediaSession",
        "",
        [
            [
                "metadata",
                "Returns an instance of MediaMetadata, which contains rich media metadata for display in a platform UI."
            ],
            [
                "playbackState",
                "Indicates whether the current media session is playing. Valid values are none, paused, or playing."
            ],
            [
                "setActionHandler()",
                "Sets an action handler for a media session action, such as play or pause."
            ],
            [
                "setPositionState()",
                "Sets the current playback position and speed of the media currently being presented."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaSessionActionDetails",
        "",
        "MediaSessionActionDetails",
        "",
        [
            [
                "action",
                "A Media Session action type string taken from the MediaSessionAction enumerated type, indicating which type of action needs to be performed. See Media action types below for possible values."
            ],
            [
                "fastSeek Optional",
                "An seekto action may optionally include this property, which is a Boolean value indicating whether or not to perform a \"fast\" seek. A \"fast\" seek is a seek being performed in a rapid sequence, such as when fast-forwarding or reversing through the media, rapidly skipping through it. This property can be used to indicate that you should use the shortest possible method to seek the media. fastSeek is not included on the final action in the seek sequence in this situation."
            ],
            [
                "seekOffset Optional",
                "If the action is either seekforward or seekbackward and this property is present, it is a floating point value which indicates the number of seconds to move the play position forward or backward. If this property isn't present, those actions should choose a reasonable default distance to skip forward or backward (such as 7 or 10 seconds)."
            ],
            [
                "seekTime Optional",
                "If the action is seekto, this property must be present and must be a floating-point value indicating the absolute time within the media to move the playback position to, where 0 indicates the beginning of the media. This property is not present for other action types."
            ],
            [
                "nexttrack",
                "Advances playback to the next track."
            ],
            [
                "pause",
                "Pauses playback of the media."
            ],
            [
                "play",
                "Begins (or resumes) playback of the media."
            ],
            [
                "previoustrack",
                "Moves back to the previous track."
            ],
            [
                "seekbackward",
                "Seeks backward through the media from the current position. The MediaSessionActionDetails property seekOffset specifies the amount of time to seek backward."
            ],
            [
                "seekforward",
                "Seeks forward from the current position through the media. The MediaSessionActionDetails property seekOffset specifies the amount of time to seek forward."
            ],
            [
                "seekto",
                "Moves the playback position to the specified time within the media. The time to which to seek is specified in the MediaSessionActionDetails property seekTime. If you intend to perform multiple seekto operations in rapid succession, you can also specify the MediaSessionActionDetails property fastSeek property with a value of true. This lets the browser know it can take steps to optimize repeated operations, and is likely to result in improved performance."
            ],
            [
                "skipad",
                "Skips past the currently playing advertisement or commercial. This action may or may not be available, depending on the platform and user agent, or may be disabled due to subscription level or other circumstances."
            ],
            [
                "stop",
                "Halts playback entirely."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaSettingsRange",
        "",
        "MediaSettingsRange",
        "",
        [
            [
                "MediaSettingsRange.max",
                "Returns the maximum value of this settings."
            ],
            [
                "MediaSettingsRange.min",
                "Returns the minimum value of this setting."
            ],
            [
                "MediaSettingsRange.step",
                "Returns the minimum difference between consecutive values of this setting."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaSource",
        "",
        "MediaSource",
        "",
        [
            [
                "MediaSource()",
                "Constructs and returns a new MediaSource object with no associated source buffers."
            ],
            [
                "MediaSource.sourceBuffers Read only",
                "Returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource."
            ],
            [
                "MediaSource.activeSourceBuffers Read only",
                "Returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within MediaSource.sourceBuffers — the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks."
            ],
            [
                "MediaSource.readyState Read only",
                "Returns an enum representing the state of the current MediaSource, whether it is not currently attached to a media element (closed), attached and ready to receive SourceBuffer objects (open), or attached but the stream has been ended via MediaSource.endOfStream() (ended.)"
            ],
            [
                "MediaSource.duration",
                "Gets and sets the duration of the current media being presented."
            ],
            [
                "MediaSource.onsourceclose",
                "The event handler for the sourceclose event."
            ],
            [
                "MediaSource.onsourceended",
                "The event handler for the sourceended event."
            ],
            [
                "MediaSource.onsourceopen",
                "The event handler for the sourceopen event."
            ],
            [
                "MediaSource.addSourceBuffer()",
                "Creates a new SourceBuffer of the given MIME type and adds it to the MediaSource.sourceBuffers list."
            ],
            [
                "MediaSource.clearLiveSeekableRange()",
                "Clears a seekable range previously set with a call to setLiveSeekableRange()."
            ],
            [
                "MediaSource.endOfStream()",
                "Signals the end of the stream."
            ],
            [
                "MediaSource.removeSourceBuffer()",
                "Removes the given SourceBuffer from the MediaSource.sourceBuffers list."
            ],
            [
                "MediaSource.setLiveSeekableRange()",
                "Sets the range that the user can seek to in the media element."
            ],
            [
                "MediaSource.isTypeSupported()",
                "Returns a Boolean value indicating if the given MIME type is supported by the current user agent — this is, if it can successfully create SourceBuffer objects for that MIME type."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStream",
        "",
        "MediaStream",
        "The MediaStream interface represents a stream of media content. A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.",
        [
            [
                "MediaStream()",
                "Creates and returns a new MediaStream object. You can create an empty stream, a stream which is based upon an existing stream, or a stream that contains a specified list of tracks (specified as an array of MediaStreamTrack objects)."
            ],
            [
                "MediaStream.active Read only",
                "A Boolean value that returns true if the MediaStream is active, or false otherwise."
            ],
            [
                "MediaStream.ended Read only",
                "A Boolean value set to true if the end of the stream has been reached. This has been removed from the specification; you should instead check the value of MediaStreamTrack.readyState to see if its value is ended for the track or tracks you want to ensure have finished playing."
            ],
            [
                "MediaStream.id Read only",
                "A DOMString containing 36 characters denoting a universally unique identifier (UUID) for the object."
            ],
            [
                "MediaStream.onaddtrack",
                "An event handler containing the action to perform when an addtrack event is fired when a new MediaStreamTrack object is added."
            ],
            [
                "MediaStream.onremovetrack",
                "An event handler containing the action to perform when a removetrack event is fired when a MediaStreamTrack object is removed from it."
            ],
            [
                "MediaStream.addTrack()",
                "Stores a copy of the MediaStreamTrack given as argument. If the track has already been added to the MediaStream object, nothing happens."
            ],
            [
                "MediaStream.clone()",
                "Returns a clone of the MediaStream object. The clone will, however, have a unique value for id."
            ],
            [
                "MediaStream.getAudioTracks()",
                "Returns a list of the MediaStreamTrack objects stored in the MediaStream object that have their kind attribute set to audio. The order is not defined, and may not only vary from one browser to another, but also from one call to another."
            ],
            [
                "MediaStream.getTrackById()",
                "Returns the track whose ID corresponds to the one given in parameters, trackid. If no parameter is given, or if no track with that ID does exist, it returns null. If several tracks have the same ID, it returns the first one."
            ],
            [
                "MediaStream.getTracks()",
                "Returns a list of all MediaStreamTrack objects stored in the MediaStream object, regardless of the value of the kind attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another."
            ],
            [
                "MediaStream.getVideoTracks()",
                "Returns a list of the MediaStreamTrack objects stored in the MediaStream object that have their kind attribute set to \"video\". The order is not defined, and may not only vary from one browser to another, but also from one call to another."
            ],
            [
                "MediaStream.removeTrack()",
                "Removes the MediaStreamTrack given as argument. If the track is not part of the MediaStream object, nothing happens."
            ],
            [
                "addtrack",
                "Fired when a new MediaStreamTrack object is added. Also available via the onaddtrack property."
            ],
            [
                "removetrack",
                "Fired when a MediaStreamTrack object has been removed. Also available via the onremovetrack property."
            ],
            [
                "active",
                "Fired when the MediaStream is activated."
            ],
            [
                "inactive",
                "Fired when the MediaStream is inactivated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamAudioDestinationNode",
        "",
        "MediaStreamAudioDestinationNode",
        "",
        [
            [
                "MediaStreamAudioDestinationNode.MediaStreamAudioDestinationNode()",
                "Creates a new MediaStreamAudioDestinationNode object instance."
            ],
            [
                "MediaStreamAudioDestinationNode.stream",
                "A MediaStream containing a single MediaStreamTrack whose kind is audio and with the same number of channels as the node. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamAudioSourceNode",
        "",
        "MediaStreamAudioSourceNode",
        "The MediaStreamAudioSourceNode interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs. This media could be from a microphone (through getUserMedia()) or from a remote peer on a WebRTC call (using the RTCPeerConnection's audio tracks).",
        [
            [
                "new MediaStreamAudioSourceNode()",
                "Creates a new MediaStreamAudioSourceNode object instance with the specified options."
            ],
            [
                "mediaStream Read only",
                "The MediaStream used when constructing this MediaStreamAudioSourceNode."
            ],
            [
                "InvalidStateError",
                "The stream specified by the mediaStream parameter does not contain any audio tracks."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamAudioSourceOptions",
        "",
        "MediaStreamAudioSourceOptions",
        "The MediaStreamAudioSourceOptions dictionary provides configuration options used when creating a MediaStreamAudioSourceNode using its constructor. It is not needed when using the AudioContext.createMediaStreamSource() method.",
        [
            [
                "mediaStream",
                "A required property which specifies the MediaStream from which to obtain audio for the node."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamConstraints",
        "",
        "MediaStreamConstraints",
        "The MediaStreamConstraints dictionary is used when calling getUserMedia() to specify what kinds of tracks should be included in the returned MediaStream, and, optionally, to establish constraints for those tracks' settings.",
        [
            [
                "audio",
                "Either a Boolean (which indicates whether or not an audio track is requested) or a MediaTrackConstraints object providing the constraints which must be met by the audio track included in the returned MediaStream. If constraints are specified, an audio track is inherently requested."
            ],
            [
                "video",
                "Either a Boolean (which indicates whether or not a video track is requested) or a MediaTrackConstraints object providing the constraints which must be met by the video track included in the returned MediaStream. If constraints are specified, a video track is inherently requested."
            ],
            [
                "peerIdentity",
                "A DOMString identifying the peer who has sole access to the stream. If this property is specified, only the indicated peer can receive and use the stream. Streams isolated in this way can only be displayed in a media element (<audio> or <video>) where the content is protected just as if CORS cross-origin rules were in effect."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamEvent",
        "",
        "MediaStreamEvent",
        "",
        [
            [
                "MediaStreamEvent.stream Read only",
                "Contains the MediaStream containing the stream associated with the event."
            ],
            [
                "MediaStreamEvent()",
                "Returns a new MediaStreamEvent. It takes two parameters, the first being a DOMString representing the type of the event; the second a dictionary containing the MediaStream it refers to."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamTrack",
        "",
        "MediaStreamTrack",
        "The MediaStreamTrack interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.",
        [
            [
                "MediaStreamTrack.contentHint",
                "A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers."
            ],
            [
                "MediaStreamTrack.enabled",
                "A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect. Note: You can implement standard \"mute\" functionality by setting enabled to false. The muted property refers to a condition in which there's no media because of a technical issue."
            ],
            [
                "MediaStreamTrack.id Read only",
                "Returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser."
            ],
            [
                "MediaStreamTrack.kind Read only",
                "Returns a DOMString set to \"audio\" if the track is an audio track and to \"video\", if it is a video track. It doesn't change if the track is deassociated from its source."
            ],
            [
                "MediaStreamTrack.label Read only",
                "Returns a DOMString containing a user agent-assigned label that identifies the track source, as in \"internal microphone\". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed."
            ],
            [
                "MediaStreamTrack.muted Read only",
                "Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue. Note: You can implement standard \"mute\" functionality by setting enabled to false, and unmute the media by setting it back to true again."
            ],
            [
                "MediaStreamTrack.readyState Read only",
                "Returns an enumerated value giving the status of the track. This will be one of the following values: \"live\" which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the enabled attribute. \"ended\" which indicates that the input is not giving any more data and will never provide new data."
            ],
            [
                "MediaStreamTrack.remote Read only",
                "Returns a Boolean with a value of true if the track is sourced by a RTCPeerConnection, false otherwise."
            ],
            [
                "MediaStreamTrack.applyConstraints()",
                "Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the MediaStreamTrack."
            ],
            [
                "MediaStreamTrack.clone()",
                "Returns a duplicate of the MediaStreamTrack."
            ],
            [
                "MediaStreamTrack.getCapabilities()",
                "Returns the a list of constrainable properties available for the MediaStreamTrack."
            ],
            [
                "MediaStreamTrack.getConstraints()",
                "Returns a MediaTrackConstraints object containing the currently set constraints for the track; the returned value matches the constraints last set using applyConstraints()."
            ],
            [
                "MediaStreamTrack.getSettings()",
                "Returns a MediaTrackSettings object containing the current values of each of the MediaStreamTrack's constrainable properties."
            ],
            [
                "MediaStreamTrack.stop()",
                "Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to ended."
            ],
            [
                "ended",
                "Sent when playback of the track ends (when the value readyState changes to ended). Also available using the onended event handler property."
            ],
            [
                "mute",
                "Sent to the MediaStreamTrack when the value of the muted property is changed to true, indicating that the track is unable to provide data temporarily (such as when the network is experiencing a service malfunction). Also available using the onmute event handler property."
            ],
            [
                "overconstrained",
                "Sent when the constraints specified for the track cause the track to be incompatible and therefore to not be used. Also available through the onoverconstrained event handler property."
            ],
            [
                "unmute",
                "Sent to the track when data becomes available again, ending the muted state. Also available through the onunmute event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode",
        "",
        "MediaStreamTrackAudioSourceNode",
        "The MediaStreamTrackAudioSourceNode interface is a type of AudioNode which represents a source of audio data taken from a specific MediaStreamTrack obtained through the WebRTC or Media Capture and Streams APIs. The audio itself might be input from a microphone or other audio sampling device, or might be received through a RTCPeerConnection, among other posible options.",
        [
            [
                "new MediaStreamTrackAudioSourceNode()",
                "Creates a new MediaStreamTrackAudioSourceNode object instance with the specified options."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamTrackAudioSourceOptions",
        "",
        "MediaStreamTrackAudioSourceOptions",
        "The MediaStreamTrackAudioSourceOptions dictionary is used when specifying options to the MediaStreamTrackAudioSourceNode() constructor. It isn't needed when using the AudioContext.createMediaStreamTrackSource() method.",
        [
            [
                "mediaStreamTrack",
                "The MediaStreamTrack from which to take audio data for this node's output."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaStreamTrackEvent",
        "",
        "MediaStreamTrackEvent",
        "The MediaStreamTrackEvent interface represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.",
        [
            [
                "track Read only",
                "A MediaStreamTrack object representing the track which was added to the stream."
            ],
            [
                "MediaStreamTrackEvent()",
                "Constructs a new MediaStreamTrackEvent with the specified configuration."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaTrackConstraints",
        "",
        "MediaTrackConstraints",
        "The MediaTrackConstraints dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into applyConstraints() to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling getConstraints().",
        [
            [
                "deviceId",
                "A ConstrainDOMString object specifying a device ID or an array of device IDs which are acceptable and/or required."
            ],
            [
                "groupId",
                "A ConstrainDOMString object specifying a group ID or an array of group IDs which are acceptable and/or required."
            ],
            [
                "autoGainControl",
                "A ConstrainBoolean object which specifies whether automatic gain control is preferred and/or required."
            ],
            [
                "channelCount",
                "A ConstrainULong specifying the channel count or range of channel counts which are acceptable and/or required."
            ],
            [
                "echoCancellation",
                "A ConstrainBoolean object specifying whether or not echo cancellation is preferred and/or required."
            ],
            [
                "latency",
                "A ConstrainDouble specifying the latency or range of latencies which are acceptable and/or required."
            ],
            [
                "noiseSuppression",
                "A ConstrainBoolean which specifies whether noise suppression is preferred and/or required."
            ],
            [
                "sampleRate",
                "A ConstrainULong specifying the sample rate or range of sample rates which are acceptable and/or required."
            ],
            [
                "sampleSize",
                "A ConstrainULong specifying the sample size or range of sample sizes which are acceptable and/or required."
            ],
            [
                "volume",
                "A ConstrainDouble specifying the volume or range of volumes which are acceptable and/or required."
            ],
            [
                "whiteBalanceMode",
                "A String specifying one of \"none\", \"manual\", \"single-shot\", or \"continuous\"."
            ],
            [
                "exposureMode",
                "A String specifying one of \"none\", \"manual\", \"single-shot\", or \"continuous\"."
            ],
            [
                "focusMode",
                "A String specifying one of \"none\", \"manual\", \"single-shot\", or \"continuous\"."
            ],
            [
                "pointsOfInterest",
                "The pixel coordinates on the sensor of one or more points of interest. This is either an object in the form { x:value, y:value } or an array of such objects, where value is a double-precision integer."
            ],
            [
                "exposureCompensation",
                "A ConstrainDouble (a double-precision integer) specifying f-stop adjustment by up to ±3."
            ],
            [
                "colorTemperature",
                "A ConstrainDouble (a double-precision integer) specifying a desired color temperature in degrees kelvin."
            ],
            [
                "iso",
                "A ConstrainDouble (a double-precision integer) specifying a desired iso setting."
            ],
            [
                "brightness",
                "A ConstrainDouble (a double-precision integer) specifying a desired brightness setting."
            ],
            [
                "contrast",
                "A ConstrainDouble (a double-precision integer) specifying the degree of difference between light and dark."
            ],
            [
                "saturation",
                "A ConstrainDouble (a double-precision integer) specifying the degree of color intensity."
            ],
            [
                "sharpness",
                "A ConstrainDouble (a double-precision integer) specifying the intensity of edges."
            ],
            [
                "focusDistance",
                "A ConstrainDouble (a double-precision integer) specifying distance to a focused object."
            ],
            [
                "zoom",
                "A ConstrainDouble (a double-precision integer) specifying the desired focal length."
            ],
            [
                "torch",
                "A Boolean defining whether the fill light is continuously connected, meaning it stays on as long as the track is active."
            ],
            [
                "aspectRatio",
                "A ConstrainDouble specifying the video aspect ratio or range of aspect ratios which are acceptable and/or required."
            ],
            [
                "facingMode",
                "A ConstrainDOMString object specifying a facing or an array of facings which are acceptable and/or required."
            ],
            [
                "frameRate",
                "A ConstrainDouble specifying the frame rate or range of frame rates which are acceptable and/or required."
            ],
            [
                "height",
                "A ConstrainULong specifying the video height or range of heights which are acceptable and/or required."
            ],
            [
                "width",
                "A ConstrainULong specifying the video width or range of widths which are acceptable and/or required."
            ],
            [
                "resizeMode",
                "A ConstrainDOMString object specifying a mode or an array of modes the UA can use to derive the resolution of a video track. Allowed values are none and crop-and-scale. none means that the user agent uses the resolution provided by the camera, its driver or the OS. crop-and-scale means that the user agent can use cropping and downscaling on the camera output in order to satisfy other constraints that affect the resolution."
            ],
            [
                "cursor",
                "A ConstrainDOMString which specifies whether or not to include the mouse cursor in the generated track, and if so, whether or not to hide it while not moving. The value may be a single one of the following strings, or an array of them to allow the browser flexibility in deciding what to do about the cursor. always The mouse is always visible in the video content of the {domxref(\"MediaStream\"), unless the mouse has moved outside the area of the content. motion The mouse cursor is always included in the video if it's moving, and for a short time after it stops moving. never The mouse cursor is never included in the shared video."
            ],
            [
                "always",
                "The mouse is always visible in the video content of the {domxref(\"MediaStream\"), unless the mouse has moved outside the area of the content."
            ],
            [
                "motion",
                "The mouse cursor is always included in the video if it's moving, and for a short time after it stops moving."
            ],
            [
                "never",
                "The mouse cursor is never included in the shared video."
            ],
            [
                "displaySurface",
                "A ConstrainDOMString which specifies the types of display surface that may be selected by the user. This may be a single one of the following strings, or a list of them to allow multiple source surfaces: application The stream contains all of the windows of the application chosen by the user rendered into the one video track. browser The stream contains the contents of a single browser tab selected by the user. monitor The stream's video track contains the entire contents of one or more of the user's screens. window The stream contains a single window selected by the user for sharing."
            ],
            [
                "application",
                "The stream contains all of the windows of the application chosen by the user rendered into the one video track."
            ],
            [
                "browser",
                "The stream contains the contents of a single browser tab selected by the user."
            ],
            [
                "monitor",
                "The stream's video track contains the entire contents of one or more of the user's screens."
            ],
            [
                "window",
                "The stream contains a single window selected by the user for sharing."
            ],
            [
                "logicalSurface",
                "A ConstrainBoolean value which may contain a single Boolean value or a set of them, indicating whether or not to allow the user to choose source surfaces which do not directly correspond to display areas. These may include backing buffers for windows to allow capture of window contents that are hidden by other windows in front of them, or buffers containing larger documents that need to be scrolled through to see the entire contents in their windows."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaTrackSettings",
        "",
        "MediaTrackSettings",
        "The MediaTrackSettings dictionary is used to return the current values configured for each of a MediaStreamTrack's settings. These values will adhere as closely as possible to any constraints previously described using a MediaTrackConstraints object and set using applyConstraints(), and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.",
        [
            [
                "deviceId",
                "A DOMString indicating the current value of the deviceId property. The device ID is a origin-unique string identifying the source of the track; this is usually a GUID. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling MediaDevices.getUserMedia()."
            ],
            [
                "groupId",
                "A DOMString indicating the current value of the groupId property. The group ID is a browsing session-unique string identifying the source group of the track. Two devices (as identified by the deviceId) are considered part of the same group if they are from the same physical device. For instance, the audio input and output devices for the speaker and microphone built into a phone would share the same group ID, since they're part of the same physical device. The microphone on a headset would have a different ID, though. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling MediaDevices.getUserMedia()."
            ],
            [
                "autoGainControl",
                "A Boolean which indicates the current value of the autoGainControl property, which is true if automatic gain control is enabled and is false otherwise."
            ],
            [
                "channelCount",
                "A long integer value indicating the current value of the channelCount property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth."
            ],
            [
                "echoCancellation",
                "A Boolean indicating the current value of the echoCancellation property, specifying true if echo cancellation is enabled, otherwise false."
            ],
            [
                "latency",
                "A double-precision floating point value indicating the current value of the latency property, specifying the audio latency, in seconds. Latency is the amount of time which elapses between the start of processing the audio and the data being available to the next stop in the audio utilization process. This value is a target value; actual latency may vary to some extent for various reasons."
            ],
            [
                "noiseSuppression",
                "A Boolean which indicates the current value of the noiseSuppression property, which is true if noise suppression is enabled and is false otherwise."
            ],
            [
                "sampleRate",
                "A long integer value indicating the current value of the sampleRate property, specifying the sample rate in samples per second of the audio data. Standard CD-quality audio, for example, has a sample rate of 41,000 samples per second."
            ],
            [
                "sampleSize",
                "A long integer value indicating the current value of the sampleSize property, specifying the linear size, in bits, of each audio sample. CD-quality audio, for example, is 16-bit, so this value would be 16 in that case."
            ],
            [
                "volume",
                "A double-precision floating point value indicating the current value of the volume property, specifying the volume level of the track. This value will be between 0.0 (silent) to 1.0 (maximum supported volume)."
            ],
            [
                "aspectRatio",
                "A double-precision floating point value indicating the current value of the aspectRatio property, specified precisely to 10 decimal places. This is the width of the image in pixels divided by its height in pixels. Common values include 1.3333333333 (for the classic television 4:3 \"standard\" aspect ratio, also used on tablets such as Apple's iPad), 1.7777777778 (for the 16:9 high-definition widescreen aspect ratio), and 1.6 (for the 16:10 aspect ratio common among widescreen computers and tablets)."
            ],
            [
                "facingMode",
                "A DOMString indicating the current value of the facingMode property, specifying the direction the camera is facing. The value will be one of: \"user\" A camera facing the user (commonly known as a \"selfie cam\"), used for self-portraiture and video calling. \"environment\" A camera facing away from the user (when the user is looking at the screen). This is typically the highest quality camera on the device, used for general photography. \"left\" A camera facing toward the environment to the user's left. \"right\" A camera facing toward the environment to the user's right."
            ],
            [
                "\"user\"",
                "A camera facing the user (commonly known as a \"selfie cam\"), used for self-portraiture and video calling."
            ],
            [
                "\"environment\"",
                "A camera facing away from the user (when the user is looking at the screen). This is typically the highest quality camera on the device, used for general photography."
            ],
            [
                "\"left\"",
                "A camera facing toward the environment to the user's left."
            ],
            [
                "\"right\"",
                "A camera facing toward the environment to the user's right."
            ],
            [
                "frameRate",
                "A double-precision floating point value indicating the current value of the frameRate property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on."
            ],
            [
                "height",
                "A long integer value indicating the current value of the height property, specifying the height of the track's video data in pixels."
            ],
            [
                "width",
                "A long integer value indicating the current value of the width property, specifying the width of the track's video data in pixels."
            ],
            [
                "resizeMode",
                "A DOMString indicating the current value of the resizeMode property, specifying the mode used by the user agent to derive the resolution of the track. The value will be one of: \"none\" The track has the resolution offered by the camera, its driver or the OS. \"crop-and-scale\" The track's resolution might be the result of the user agent using cropping or downscaling from a higher camera resolution."
            ],
            [
                "\"none\"",
                "The track has the resolution offered by the camera, its driver or the OS."
            ],
            [
                "\"crop-and-scale\"",
                "The track's resolution might be the result of the user agent using cropping or downscaling from a higher camera resolution."
            ],
            [
                "cursor",
                "A DOMString which indicates whether or not the mouse cursor is being included in the generated stream and under what conditions. Possible values are: always The mouse is always visible in the video content of the {domxref(\"MediaStream\"), unless the mouse has moved outside the area of the content. motion The mouse cursor is always included in the video if it's moving, and for a short time after it stops moving. never The mouse cursor is never included in the shared video."
            ],
            [
                "always",
                "The mouse is always visible in the video content of the {domxref(\"MediaStream\"), unless the mouse has moved outside the area of the content."
            ],
            [
                "motion",
                "The mouse cursor is always included in the video if it's moving, and for a short time after it stops moving."
            ],
            [
                "never",
                "The mouse cursor is never included in the shared video."
            ],
            [
                "displaySurface",
                "A DOMString which specifies the type of source the track contains; one of: application The stream contains all of the windows of the application chosen by the user rendered into the one video track. browser The stream contains the contents of a single browser tab selected by the user. monitor The stream's video track contains the entire contents of one or more of the user's screens. window The stream contains a single window selected by the user for sharing."
            ],
            [
                "application",
                "The stream contains all of the windows of the application chosen by the user rendered into the one video track."
            ],
            [
                "browser",
                "The stream contains the contents of a single browser tab selected by the user."
            ],
            [
                "monitor",
                "The stream's video track contains the entire contents of one or more of the user's screens."
            ],
            [
                "window",
                "The stream contains a single window selected by the user for sharing."
            ],
            [
                "logicalSurface",
                "A Boolean value which, if true, indicates that the video contained in the stream's video track contains a background rendering context, rather than a user-visible one. This is false if the video being captured is coming from a foreground (user-visible) source."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MediaTrackSupportedConstraints",
        "",
        "MediaTrackSupportedConstraints",
        "The MediaTrackSupportedConstraints dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the MediaStreamTrack object. An object conforming to MediaTrackSupportedConstraints is returned by MediaDevices.getSupportedConstraints().",
        [
            [
                "autoGainControl",
                "A Boolean whose value is true if the autoGainControl constraint is supported in the current environment."
            ],
            [
                "width",
                "A Boolean value whose value is true if the width constraint is supported in the current environment."
            ],
            [
                "height",
                "A Boolean value whose value is true if the height constraint is supported in the current environment."
            ],
            [
                "aspectRatio",
                "A Boolean value whose value is true if the aspectRatio constraint is supported in the current environment."
            ],
            [
                "frameRate",
                "A Boolean value whose value is true if the frameRate constraint is supported in the current environment."
            ],
            [
                "facingMode",
                "A Boolean value whose value is true if the facingMode constraint is supported in the current environment."
            ],
            [
                "resizeMode",
                "A Boolean value whose value is true if the resizeMode constraint is supported in the current environment."
            ],
            [
                "volume",
                "A Boolean value whose value is true if the volume constraint is supported in the current environment."
            ],
            [
                "sampleRate",
                "A Boolean value whose value is true if the sampleRate constraint is supported in the current environment."
            ],
            [
                "sampleSize",
                "A Boolean value whose value is true if the sampleSize constraint is supported in the current environment."
            ],
            [
                "echoCancellation",
                "A Boolean value whose value is true if the echoCancellation constraint is supported in the current environment."
            ],
            [
                "latency",
                "A Boolean value whose value is true if the latency constraint is supported in the current environment."
            ],
            [
                "noiseSuppression",
                "A Boolean whose value is true if the noiseSuppression constraint is supported in the current environment."
            ],
            [
                "channelCount",
                "A Boolean value whose value is true if the channelCount constraint is supported in the current environment."
            ],
            [
                "deviceId",
                "A Boolean value whose value is true if the deviceId constraint is supported in the current environment."
            ],
            [
                "groupId",
                "A Boolean value whose value is true if the groupId constraint is supported in the current environment."
            ],
            [
                "cursor",
                "A Boolean value which is true if the cursor constraint is supported in the current environment."
            ],
            [
                "displaySurface",
                "A Boolean value which is true if the cursor constraint is supported in the current environment."
            ],
            [
                "logicalSurface",
                "A Boolean value which is true if the logicalSurface constraint is supported in the current environment."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MerchantValidationEvent",
        "",
        "MerchantValidationEvent",
        "",
        [
            [
                "MerchantValidationEvent() Secure context",
                "Creates a new MerchantValidationEvent object describing a merchantvalidation event that will be sent to the payment handler to request that it validate the merchant."
            ],
            [
                "MerchantValidationEvent.methodName Secure context",
                "A DOMString providing a unique payment method identifier for the payment handler that's requiring validation. This may be either one of the standard payment method identifier strings or a URL that both identifies and handles requests for the payment handler, such as https://apple.com/apple-pay."
            ],
            [
                "MerchantValidationEvent.validationURL Secure context",
                "A USVString specifying a URL from which the site or app can fetch payment handler specific validation information. Once this data is retrieved, the data (or a promise resolving to the validation data) should be passed into complete() to validate that the payment request is coming from an authorized merchant."
            ],
            [
                "MerchantValidationEvent.complete() Secure context",
                "Pass the data retrieved from the URL specified by validationURL into complete() to complete the validation process for the PaymentRequest."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MessageChannel",
        "",
        "MessageChannel",
        "",
        [
            [
                "MessageChannel.port1 Read only",
                "Returns port1 of the channel."
            ],
            [
                "MessageChannel.port2 Read only",
                "Returns port2 of the channel."
            ],
            [
                "MessageChannel()",
                "Returns a new MessageChannel object with two new MessagePort objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MessageEvent",
        "",
        "MessageEvent",
        "The MessageEvent interface represents a message received by a target object.",
        [
            [
                "MessageEvent()",
                "Creates a new MessageEvent."
            ],
            [
                "MessageEvent.data Read only",
                "The data sent by the message emitter."
            ],
            [
                "MessageEvent.origin Read only",
                "A USVString representing the origin of the message emitter."
            ],
            [
                "MessageEvent.lastEventId Read only",
                "A DOMString representing a unique ID for the event."
            ],
            [
                "MessageEvent.source Read only",
                "A MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter."
            ],
            [
                "MessageEvent.ports Read only",
                "An array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker)."
            ],
            [
                "initMessageEvent()",
                "Initializes a message event. Do not use this anymore — use the MessageEvent() constructor instead."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MessagePort",
        "",
        "MessagePort",
        "",
        [
            [
                "postMessage()",
                "Sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts."
            ],
            [
                "start()",
                "Starts the sending of messages queued on the port (only needed when using EventTarget.addEventListener; it is implied when using MessagePort.onmessage.)"
            ],
            [
                "close()",
                "Disconnects the port, so it is no longer active."
            ],
            [
                "onmessage",
                "An EventListener called when MessageEvent of type message is fired on the port—that is, when the port receives a message."
            ],
            [
                "onmessageerror",
                "An EventListener called when a MessageEvent of type MessageError is fired—that is, when it receives a message that cannot be deserialized."
            ],
            [
                "message",
                "Fired when a MessagePort object receives a message. Also available via the onmessage property."
            ],
            [
                "messageerror",
                "Fired when a MessagePort object receives a message that can't be deserialized. Also available via the onmessageerror property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Metadata",
        "",
        "Metadata",
        "",
        [
            [
                "modificationTime Read only",
                "A Date object indicating the date and time the entry was modified."
            ],
            [
                "size Read only",
                "A 64-bit unsigned integer indicating the size of the entry in bytes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIAccess",
        "",
        "MIDIAccess",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "MIDIAccess.inputs Read only",
                "Returns an instance of MIDIInputMap which provides access to any available MIDI input ports."
            ],
            [
                "MIDIAccess.outputs Read only",
                "Returns an instance of MIDIOutputMap which provides access to any available MIDI output ports."
            ],
            [
                "MIDIAccess.sysexEnabled Read only",
                "A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance."
            ],
            [
                "MIDIAccess.onstatechange",
                "Called whenever a new MIDI port is added or an existing port changes state."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIConnectionEvent",
        "",
        "MIDIConnectionEvent",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "MIDIConnectionEvent.MIDIConnectionEvent",
                "Creates a new MIDIConnectionEvent object."
            ],
            [
                "MIDIConnectionEvent.portRead only",
                "Returns a reference to a MIDIPort instance for a port that has been connected or disconnected.\""
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIInput",
        "",
        "MIDIInput",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "MIDIInput.onmidimessage",
                "When the current port receives a MIDI message it triggers a call to this event handler."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIInputMap",
        "",
        "MIDIInputMap",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIMessageEvent",
        "",
        "MIDIMessageEvent",
        "",
        [
            [
                "MIDIMessageEvent.MIDIMessageEvent",
                "Creates a new MIDIMessageEvent object instance."
            ],
            [
                "MIDIMessageEvent.data",
                "A Uint8Array containing the data bytes of a single MIDI message. See the MIDI specification for more information on its form."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIOutput",
        "",
        "MIDIOutput",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "MIDIoutput.send()",
                "Queues a message to be sent to the MIDI port."
            ],
            [
                "MIDIOutput.clear()",
                "Clears any pending send data from the queue."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIOutputMap",
        "",
        "MIDIOutputMap",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MIDIPort",
        "",
        "MIDIPort",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "MIDIPort.idRead only",
                "Returns a string containing the unique ID of the port."
            ],
            [
                "MIDIPort.manufacturerRead only",
                "Returns a string containing the manufacturer of the port."
            ],
            [
                "MIDIPort.nameRead only",
                "Returns a string containing the system name of the port."
            ],
            [
                "MIDIPort.typeRead only",
                "Returns a string containing the type of the port, one of: \"input\" The MIDIPort is an input port. \"output\" The MIDIPort is an output port."
            ],
            [
                "\"input\"",
                "The MIDIPort is an input port."
            ],
            [
                "\"output\"",
                "The MIDIPort is an output port."
            ],
            [
                "MIDIPort.versionRead only",
                "Returns a string containing the version of the port."
            ],
            [
                "MIDIPort.stateRead only",
                "Returns a string containing the state of the port, one of: \"disconnected\" The device that this MIDIPort represents is disconnected from the system. \"connected\" The device that this MIDIPort represents is currently connected."
            ],
            [
                "\"disconnected\"",
                "The device that this MIDIPort represents is disconnected from the system."
            ],
            [
                "\"connected\"",
                "The device that this MIDIPort represents is currently connected."
            ],
            [
                "MIDIPort.connectionRead only",
                "Returns a string containing the connection state of the port, one of: \"open\" The device that this MIDIPort represents has been opened and is available. \"closed\" The device that this MIDIPort represents has not been opened, or has been closed. \"pending\" The device that this MIDIPort represents has been opened but has subsequently disconnected ."
            ],
            [
                "\"open\"",
                "The device that this MIDIPort represents has been opened and is available."
            ],
            [
                "\"closed\"",
                "The device that this MIDIPort represents has not been opened, or has been closed."
            ],
            [
                "\"pending\"",
                "The device that this MIDIPort represents has been opened but has subsequently disconnected ."
            ],
            [
                "MIDIPort.onstatechange",
                "Called when an existing port changes its state or connection."
            ],
            [
                "MIDIPort.open()",
                "Makes the MIDI device connected to this MIDIPort explicitly available, and returns a Promise which resolves once access to the port has been successful."
            ],
            [
                "MIDIPort.close()",
                "Makes the MIDI device connected to this MIDIPort unavailable, changing the state from \"open\" to \"closed\". This returns a Promise which resolves once the port has been closed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MimeType",
        "",
        "MimeType",
        "",
        [
            [
                "MimeType.type",
                "Returns the MIME type of the associated plugin."
            ],
            [
                "MimeType.description",
                "Returns a description of the associated plugin or an empty string if there is none."
            ],
            [
                "MimeType.suffixes",
                "A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list but support more file extensions than can be anticipated. It might therefore return an empty string."
            ],
            [
                "MimeType.enabledPlugin",
                "Returns an instance of Plugin containing information about the plugin itself."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MimeTypeArray",
        "",
        "MimeTypeArray",
        "",
        [
            [
                "MimeTypeArray.length",
                "The number of items in the array."
            ],
            [
                "MimeTypeArray.item()",
                "Returns the MimeType object with the specified index."
            ],
            [
                "MimeTypeArray.namedItem()",
                "Returns the MimeType object with the specified name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MouseEvent",
        "",
        "MouseEvent",
        "The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.",
        [
            [
                "MouseEvent()",
                "Creates a MouseEvent object."
            ],
            [
                "MouseEvent.altKey Read only",
                "Returns true if the alt key was down when the mouse event was fired."
            ],
            [
                "MouseEvent.button Read only",
                "The button number that was pressed (if applicable) when the mouse event was fired."
            ],
            [
                "MouseEvent.buttons Read only",
                "The buttons being depressed (if any) when the mouse event was fired."
            ],
            [
                "MouseEvent.clientX Read only",
                "The X coordinate of the mouse pointer in local (DOM content) coordinates."
            ],
            [
                "MouseEvent.clientY Read only",
                "The Y coordinate of the mouse pointer in local (DOM content) coordinates."
            ],
            [
                "MouseEvent.ctrlKey Read only",
                "Returns true if the control key was down when the mouse event was fired."
            ],
            [
                "MouseEvent.metaKey Read only",
                "Returns true if the meta key was down when the mouse event was fired."
            ],
            [
                "MouseEvent.movementX Read only",
                "The X coordinate of the mouse pointer relative to the position of the last mousemove event."
            ],
            [
                "MouseEvent.movementY Read only",
                "The Y coordinate of the mouse pointer relative to the position of the last mousemove event."
            ],
            [
                "MouseEvent.offsetX Read only",
                "The X coordinate of the mouse pointer relative to the position of the padding edge of the target node."
            ],
            [
                "MouseEvent.offsetY Read only",
                "The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node."
            ],
            [
                "MouseEvent.pageX Read only",
                "The X coordinate of the mouse pointer relative to the whole document."
            ],
            [
                "MouseEvent.pageY Read only",
                "The Y coordinate of the mouse pointer relative to the whole document."
            ],
            [
                "MouseEvent.region Read only",
                "Returns the id of the hit region affected by the event. If no hit region is affected, null is returned."
            ],
            [
                "MouseEvent.relatedTarget Read only",
                "The secondary target for the event, if there is one."
            ],
            [
                "MouseEvent.screenX Read only",
                "The X coordinate of the mouse pointer in global (screen) coordinates."
            ],
            [
                "MouseEvent.screenY Read only",
                "The Y coordinate of the mouse pointer in global (screen) coordinates."
            ],
            [
                "MouseEvent.shiftKey Read only",
                "Returns true if the shift key was down when the mouse event was fired."
            ],
            [
                "MouseEvent.which Read only",
                "The button being pressed when the mouse event was fired."
            ],
            [
                "MouseEvent.mozPressure Read only",
                "The amount of pressure applied to a touch or tablet device when generating the event; this value ranges between 0.0 (minimum pressure) and 1.0 (maximum pressure). Instead of using this deprecated (and non-standard) property, you should instead use PointerEvent and look at its pressure property."
            ],
            [
                "MouseEvent.mozInputSource Read only",
                "The type of device that generated the event (one of the MOZ_SOURCE_* constants listed below). This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event)."
            ],
            [
                "MouseEvent.webkitForce Read only",
                "The amount of pressure applied when clicking"
            ],
            [
                "MouseEvent.x Read only",
                "Alias for MouseEvent.clientX."
            ],
            [
                "MouseEvent.y Read only",
                "Alias for MouseEvent.clientY"
            ],
            [
                "MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN Read only",
                "Minimum force necessary for a normal click"
            ],
            [
                "MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN Read only",
                "Minimum force necessary for a force click"
            ],
            [
                "MouseEvent.getModifierState()",
                "Returns the current state of the specified modifier key. See KeyboardEvent.getModifierState() for details."
            ],
            [
                "MouseEvent.initMouseEvent()",
                "Initializes the value of a MouseEvent created. If the event has already being dispatched, this method does nothing."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MouseScrollEvent",
        "",
        "MouseScrollEvent",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "initMouseScrollEvent()",
                "See nsIDOMMouseScrollEvent::initMouseScrollEvent()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MouseWheelEvent",
        "",
        "MouseWheelEvent",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/msCaching",
        "",
        "msCaching",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/msCachingEnabled",
        "",
        "msCachingEnabled",
        "",
        [
            [
                "cacheState[out, retval]",
                "Type = boolean. If true, XMLHttpRequest is cached to disk. If false, it is not written to disk."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MSCandidateWindowHide",
        "",
        "MSCandidateWindowHide",
        "",
        [
            [
                "Synchronous",
                "No"
            ],
            [
                "Bubbles",
                "No"
            ],
            [
                "Cancelable",
                "No"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MSCandidateWindowShow",
        "",
        "MSCandidateWindowShow",
        "",
        [
            [
                "Synchronous",
                "No"
            ],
            [
                "Bubbles",
                "No"
            ],
            [
                "Cancelable",
                "No"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MSCandidateWindowUpdate",
        "",
        "MSCandidateWindowUpdate",
        "",
        [
            [
                "Synchronous",
                "No"
            ],
            [
                "Bubbles",
                "No"
            ],
            [
                "Cancelable",
                "No"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/msCapsLockWarningOff",
        "",
        "msCapsLockWarningOff",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsFirstPaint",
        "",
        "msFirstPaint",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MSGestureEvent",
        "",
        "MSGestureEvent",
        "",
        [
            [
                "MSGestureEvent()",
                "Creates an MSGestureEvent object."
            ],
            [
                "MSGestureEvent.expansion Read only",
                "The diameter of the gesture area. For example, the distance between fingers."
            ],
            [
                "MSGestureEvent.gestureObject Read only",
                "Returns the MSGesture object for this gesture event."
            ],
            [
                "MSGestureEvent.rotation Read only",
                "Amount of rotation (in radians) since the previous MSGestureEvent of the current gesture. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation."
            ],
            [
                "MSGestureEvent.scale Read only",
                "The difference in scale (for zoom gestures) from the previous MSGestureEvent of the current gesture."
            ],
            [
                "MSGestureEvent.translationX Read only",
                "Distance traversed along the X-axis since the previous MSGestureEvent of the current gesture"
            ],
            [
                "MSGestureEvent.translationY Read only",
                "Distance traversed along the Y-axis since the previous MSGestureEvent of the current gesture"
            ],
            [
                "MSGestureEvent.velocityAngular Read only",
                "Angular velocity. Expressed in radians."
            ],
            [
                "MSGestureEvent.velocityExpansion Read only",
                "The velocity of the expansion of the gesture area."
            ],
            [
                "MSGestureEvent.velocityX Read only",
                "Velocity along the direction of the X-axis."
            ],
            [
                "MSGestureEvent.velocityY Read only",
                "Velocity along the direction of the Y-axis."
            ],
            [
                "MSGestureEvent.initGestureEvent()",
                "Initializes the value of an MSGestureEvent. If the event has already being dispatched, this method does nothing. This method is deprecated as of Microsoft Edge."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/msGetPropertyEnabled",
        "",
        "msGetPropertyEnabled",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/msGetRegionContent",
        "",
        "msGetRegionContent",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MSGraphicsTrust",
        "",
        "MSGraphicsTrust",
        "",
        [
            [
                "constrictionActive",
                "A read-only property which returns true when protected media is forced to play in a lower resolution."
            ],
            [
                "status",
                "A read-only property which returns an enum with the driver status when playing protected content."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MsGraphicsTrustStatus",
        "",
        "msGraphicsTrustStatus",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsIsBoxed",
        "",
        "msIsBoxed",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MSManipulationEvent",
        "",
        "MSManipulationEvent",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsPlayToDisabled",
        "",
        "msPlayToDisabled",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsPlayToPreferredSourceUri",
        "",
        "msPlayToPreferredSourceUri",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsPlayToPrimary",
        "",
        "msPlayToPrimary",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsPlayToSource",
        "",
        "msPlayToSource",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/msPutPropertyEnabled",
        "",
        "msPutPropertyEnabled",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MSRangeCollection",
        "",
        "MSRangeCollection",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsRealTime",
        "",
        "msRealTime",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/msRegionOverflow",
        "",
        "msRegionOverflow",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MsSetMediaProtectionManager",
        "",
        "msSetMediaProtectionManager",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MSSiteModeEvent",
        "",
        "MSSiteModeEvent",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/msWriteProfilerMark",
        "",
        "msWriteProfilerMark",
        "",
        [
            [
                "bstrProfilerMarkName[in]",
                "An event name. Type = String. This parameter may be null."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MutationEvent",
        "",
        "MutationEvent",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/MutationObserver",
        "",
        "MutationObserver",
        "The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.",
        [
            [
                "MutationObserver()",
                "Creates and returns a new MutationObserver which will invoke a specified callback function when DOM changes occur."
            ],
            [
                "disconnect()",
                "Stops the MutationObserver instance from receiving further notifications until and unless observe() is called again."
            ],
            [
                "observe()",
                "Configures the MutationObserver to begin receiving notifications through its callback function when DOM changes matching the given options occur."
            ],
            [
                "takeRecords()",
                "Removes all pending notifications from the MutationObserver's notification queue and returns them in a new Array of MutationRecord objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MutationObserverInit",
        "",
        "MutationObserverInit",
        "The MutationObserverInit dictionary describes the configuration of a mutation observer. As such, it's primarily used as the type of the options parameter on the MutationObserver.observe() method.",
        [
            [
                "subtree Optional",
                "Set to true to extend monitoring to the entire subtree of nodes rooted at target. All of the other MutationObserverInit properties are then extended to all of the nodes in the subtree instead of applying solely to the target node. The default value is false."
            ],
            [
                "childList Optional",
                "Set to true to monitor the target node (and, if subtree is true, its descendants) for the addition of new child nodes or removal of existing child nodes. The default value is false."
            ],
            [
                "attributes Optional",
                "Set to true to watch for changes to the value of attributes on the node or nodes being monitored. The default value is true if either of attributeFilter or attributeOldValue is specified, otherwise the default value is false."
            ],
            [
                "attributeFilter Optional",
                "An array of specific attribute names to be monitored. If this property isn't included, changes to all attributes cause mutation notifications."
            ],
            [
                "attributeOldValue Optional",
                "Set to true to record the previous value of any attribute that changes when monitoring the node or nodes for attribute changes; see Monitoring attribute values in MutationObserver for details on watching for attribute changes and value recording. The default value is false."
            ],
            [
                "characterData Optional",
                "Set to true to monitor the specified target node (and, if subtree is true, its descendants) for changes to the character data contained within the node or nodes. The default value is true if characterDataOldValue is specified, otherwise the default value is false."
            ],
            [
                "characterDataOldValue Optional",
                "Set to true to record the previous value of a node's text whenever the text changes on nodes being monitored. The default value is false."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/MutationRecord",
        "",
        "MutationRecord",
        "A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/NamedNodeMap",
        "",
        "NamedNodeMap",
        "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
        [
            [
                "NamedNodeMap.length Read only",
                "Returns the amount of objects in the map."
            ],
            [
                "NamedNodeMap.getNamedItem()",
                "Returns a Attr, corresponding to the given name."
            ],
            [
                "NamedNodeMap.setNamedItem()",
                "Replaces, or adds, the Attr identified in the map by the given name."
            ],
            [
                "NamedNodeMap.removeNamedItem()",
                "Removes the Attr identified by the given map."
            ],
            [
                "NamedNodeMap.item()",
                "Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes."
            ],
            [
                "NamedNodeMap.getNamedItemNS()",
                "Returns a Attr identified by a namespace and related local name."
            ],
            [
                "NamedNodeMap.setNamedItemNS()",
                "Replaces, or adds, the Attr identified in the map by the given namespace and related local name."
            ],
            [
                "NamedNodeMap.removeNamedItemNS()",
                "Removes the Attr identified by the given namespace and related local name."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NavigationPreloadManager",
        "",
        "NavigationPreloadManager",
        "",
        [
            [
                "NavigationPreloadManager.enable()",
                "Enables navigation preloading and returns a Promise that resolves."
            ],
            [
                "NavigationPreloadManager.disable()",
                "Disables navigation preloading and returns a Promise that resolves."
            ],
            [
                "NavigationPreloadManager.setHeaderValue()",
                "Sets the value of the Service-Worker-Navigation-Preload header and returns an empty Promise."
            ],
            [
                "NavigationPreloadManager.getState()",
                "Returns a Promise that resolves to an object with properties indicating whether preload is enabled and the contents of the Service-Worker-Navigation-Preload."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Navigator",
        "",
        "Navigator",
        "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
        [
            [
                "Navigator.connection Read only",
                "Provides a NetworkInformation object containing information about the network connection of a device."
            ],
            [
                "Navigator.cookieEnabled Read only",
                "Returns false if setting a cookie will be ignored and true otherwise."
            ],
            [
                "Navigator.credentials Read only",
                "Returns the CredentialsContainer interface which exposes methods to request credentials and notify the user agent when interesting events occur such as successful sign in or sign out."
            ],
            [
                "Navigator.deviceMemory Read only",
                "Returns the amount of device memory in gigabytes. This value is an approximation given by rounding to the nearest power of 2 and dividing that number by 1024."
            ],
            [
                "Navigator.doNotTrack Read only",
                "Reports the value of the user's do-not-track preference. When this value is \"yes\", your web site or application should not track the user."
            ],
            [
                "Navigator.geolocation Read only",
                "Returns a Geolocation object allowing accessing the location of the device."
            ],
            [
                "Navigator.hid Read only",
                "Returns an HID object providing methods for connecting to HID devices, listing attached HID devices, and event handlers for connected HID devices."
            ],
            [
                "Navigator.hardwareConcurrency Read only",
                "Returns the number of logical processor cores available."
            ],
            [
                "Navigator.keyboard Read only",
                "Returns a Keyboard object which provides access to functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard."
            ],
            [
                "Navigator.language Read only",
                "Returns a DOMString representing the preferred language of the user, usually the language of the browser UI. The null value is returned when this is unknown."
            ],
            [
                "Navigator.languages Read only",
                "Returns an array of DOMString representing the languages known to the user, by order of preference."
            ],
            [
                "Navigator.locks Read only",
                "Returns a LockManager object which provides methods for requesting a new Lock object and querying for an existing Lock object"
            ],
            [
                "Navigator.maxTouchPoints Read only",
                "Returns the maximum number of simultaneous touch contact points are supported by the current device."
            ],
            [
                "Navigator.mediaCapabilities Read only",
                "Returns a MediaCapabilities object that can expose information about the decoding and encoding capabilities for a given format and output capabilities."
            ],
            [
                "Navigator.mediaDevices Read only",
                "Returns a reference to a MediaDevices object which can then be used to get information about available media devices (MediaDevices.enumerateDevices()), find out what constrainable properties are supported for media on the user's computer and user agent (MediaDevices.getSupportedConstraints()), and to request access to media using MediaDevices.getUserMedia()."
            ],
            [
                "Navigator.mediaSession Read only",
                "Returns MediaSession object which can be used to provide metadata that can be used by the browser to present information about the currently-playing media to the user, such as in a global media controls UI."
            ],
            [
                "Navigator.onLine Read only",
                "Returns a Boolean indicating whether the browser is working online."
            ],
            [
                "Navigator.permissions Read only",
                "Returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API."
            ],
            [
                "Navigator.presentation Read only",
                "Returns a reference to the Presentation API."
            ],
            [
                "Navigator.serial Read only",
                "Returns a Serial object, which represents the entry point into the Web Serial API to enable the control of serial ports."
            ],
            [
                "Navigator.serviceWorker Read only",
                "Returns a ServiceWorkerContainer object, which provides access to registration, removal, upgrade, and communication with the ServiceWorker objects for the associated document."
            ],
            [
                "Navigator.storage Read only",
                "Returns the singleton StorageManager object used for managing persistence permissions and estimating available storage on a site-by-site/app-by-app basis."
            ],
            [
                "Navigator.userAgent Read only",
                "Returns the user agent string for the current browser."
            ],
            [
                "Navigator.vendor Read only",
                "Returns the vendor name of the current browser (e.g., \"Netscape6\")."
            ],
            [
                "Navigator.webdriver Read only",
                "Indicates whether the user agent is controlled by automation."
            ],
            [
                "Navigator.xr Read only",
                "Returns XRSystem object, which represents the entry point into the WebXR API."
            ],
            [
                "Navigator.buildID",
                "Returns the build identifier of the browser. In modern browsers this property now returns a fixed timestamp as a privacy measure, e.g. 20181001000000 in Firefox 64 onwards."
            ],
            [
                "Navigator.contacts Read only",
                "Returns a ContactsManager interface which allows users to select entries from their contact list and share limited details of the selected entries with a website or application."
            ],
            [
                "Navigator.securitypolicy",
                "Returns an empty string. In Netscape 4.7x, returns \"US & CA domestic policy\" or \"Export policy\"."
            ],
            [
                "Navigator.standalone",
                "Returns a boolean indicating whether the browser is running in standalone mode. Available on Apple's iOS Safari only."
            ],
            [
                "Navigator.wakeLock Read only",
                "Returns a WakeLock interface you can use to request screen wake locks and prevent screen from dimming, turning off, or showing a screen saver."
            ],
            [
                "Navigator.appCodeName Read only",
                "Returns the internal \"code\" name of the current browser. Do not rely on this property to return the correct value."
            ],
            [
                "Navigator.appName Read only",
                "Returns a DOMString with the official name of the browser. Do not rely on this property to return the correct value."
            ],
            [
                "Navigator.appVersion Read only",
                "Returns the version of the browser as a DOMString. Do not rely on this property to return the correct value."
            ],
            [
                "Navigator.activeVRDisplays Read only",
                "Returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true)."
            ],
            [
                "Navigator.battery Read only",
                "Returns a BatteryManager object you can use to get information about the battery charging status."
            ],
            [
                "Navigator.mimeTypes Read only",
                "Returns an MimeTypeArray listing the MIME types supported by the browser."
            ],
            [
                "Navigator.oscpu Read only",
                "Returns a string that represents the current operating system."
            ],
            [
                "Navigator.platform Read only",
                "Returns a string representing the platform of the browser. Do not rely on this function to return a significant value."
            ],
            [
                "Navigator.plugins Read only",
                "Returns a PluginArray listing the plugins installed in the browser."
            ],
            [
                "Navigator.product Read only",
                "Always returns 'Gecko', on any browser. This property is kept only for compatibility purpose."
            ],
            [
                "Navigator.productSub Read only",
                "Returns the build number of the current browser (e.g., \"20060909\")."
            ],
            [
                "Navigator.vendorSub Read only",
                "Returns the vendor version number (e.g. \"6.1\")."
            ],
            [
                "Navigator.canShare()",
                "Returns true if a call to Navigator.share() would succeed."
            ],
            [
                "Navigator.clearAppBadge()",
                "Clears a badge on the current app's icon and returns a Promise that resolves with undefined."
            ],
            [
                "Navigator.getBattery()",
                "Returns a promise that resolves with a BatteryManager object that returns information about the battery charging status."
            ],
            [
                "Navigator.javaEnabled() Read only",
                "Returns false."
            ],
            [
                "Navigator.registerProtocolHandler()",
                "Allows web sites to register themselves as a possible handler for a given protocol."
            ],
            [
                "Navigator.requestMediaKeySystemAccess()",
                "Returns a Promise for a MediaKeySystemAccess object."
            ],
            [
                "Navigator.sendBeacon()",
                "Used to asynchronously transfer a small amount of data using HTTP from the User Agent to a web server."
            ],
            [
                "Navigator.setAppBadge()",
                "Sets a badge on the icon associated with this app and returns a Promise that resolves with undefined."
            ],
            [
                "Navigator.share()",
                "Invokes the native sharing mechanism of the current platform."
            ],
            [
                "Navigator.vibrate()",
                "Causes vibration on devices with support for it. Does nothing if vibration support isn't available."
            ],
            [
                "Navigator.getVRDisplays()",
                "Returns a promise that resolves to an array of VRDisplay objects representing any available VR devices connected to the computer."
            ],
            [
                "Navigator.getUserMedia()",
                "After having prompted the user for permission, returns the audio or video stream associated to a camera or microphone on the local computer."
            ],
            [
                "Navigator.taintEnabled()",
                "Returns false. JavaScript taint/untaint functions removed in JavaScript 1.2."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NDEFMessage",
        "",
        "NDEFMessage",
        "",
        [
            [
                "NDEFMessage.NDEFMessage()",
                "Returns a new NDEFMessage containing specified data."
            ],
            [
                "NDEFMessage.records Read only",
                "Represents a list of NDEF records defining the NDEF message."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NDEFReader",
        "",
        "NDEFReader",
        "",
        [
            [
                "NDEFReader.NDEFReader()",
                "Returns an NDEFReader with configuration specified in the parameters or default ones if no parameters are specified."
            ],
            [
                "NDEFReader.onreading",
                "An event handler for reading event, that notifies about availability of a new reading."
            ],
            [
                "NDEFReader.onreadingerror",
                "An event handler for the readingerror event, which is fired when an error occurs during reading."
            ],
            [
                "NDEFReader.scan()",
                "Called to activate the reader (after ensuring hardware and UA compatibility and obtaining permission from the user) or get an error explaining why feature is not available."
            ],
            [
                "NDEFReader.write()",
                "Called to write NDEF message to a tag (after ensuring hardware and UA compatibility and obtaining permission from the user) or get an error explaining why feature is not available."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NDEFReadingEvent",
        "",
        "NDEFReadingEvent",
        "",
        [
            [
                "NDEFReadingEvent.NDEFReadingEvent()",
                "Creates an NDEFReadingEvent event with the given parameters."
            ],
            [
                "NDEFReadingEvent.serialNumber Read only",
                "Represents the serial number of the device used for anti-collision and identification, or empty string in case none is available."
            ],
            [
                "NDEFReadingEvent.message Read only",
                "Represents the received message as an NDEFMessage object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NDEFRecord",
        "",
        "NDEFRecord",
        "",
        [
            [
                "NDEFRecord()",
                "Returns a new NDEFRecord with configuration specified in the parameters or default ones if no parameters are specified."
            ],
            [
                "NDEFRecord.recordType Read only",
                "Represents the NDEF record type."
            ],
            [
                "NDEFRecord.mediaType Read only",
                "Represents the MIME type of the NDEF record payload."
            ],
            [
                "NDEFRecord.id Read only",
                "Represents the identificator of the record. Note: the uniqueness of the identifier is enforced only by the generator of the record."
            ],
            [
                "NDEFRecord.data Read only",
                "Represents the payload of the record."
            ],
            [
                "NDEFRecord.encoding Read only",
                "Represents the encoding name used for encoding the payload in the case it is textual data."
            ],
            [
                "NDEFRecord.lang Read only",
                "Represents a language tag of the content, if it was encoded."
            ],
            [
                "NDEFRecord.toRecords()",
                "Coverts NDEFRecord.data to sequence of records."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NetworkInformation",
        "",
        "NetworkInformation",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "NetworkInformation.downlink Read only",
                "Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds."
            ],
            [
                "NetworkInformation.downlinkMax Read only",
                "Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology."
            ],
            [
                "NetworkInformation.effectiveType Read only",
                "Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'. This value is determined using a combination of recently observed round-trip time and downlink values."
            ],
            [
                "NetworkInformation.rtt Read only",
                "Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds."
            ],
            [
                "NetworkInformation.saveData Read only",
                "Returns true if the user has set a reduced data usage option on the user agent."
            ],
            [
                "NetworkInformation.type Read only",
                "Returns the type of connection a device is using to communicate with the network. It will be one of the following values: bluetooth cellular ethernet none wifi wimax other unknown"
            ],
            [
                "NetworkInformation.onchange",
                "The event that's fired when connection information changes and the change is fired on this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Node",
        "",
        "Node",
        "",
        [
            [
                "Node.baseURIRead only",
                "Returns a DOMString representing the base URL of the document containing the Node."
            ],
            [
                "Node.childNodesRead only",
                "Returns a live NodeList containing all the children of this node (including elements, text and comments). NodeList being live means that if the children of the Node change, the NodeList object is automatically updated."
            ],
            [
                "Node.firstChildRead only",
                "Returns a Node representing the first direct child node of the node, or null if the node has no child."
            ],
            [
                "Node.isConnectedRead only",
                "A boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the Document object in the case of the normal DOM, or the ShadowRoot in the case of a shadow DOM."
            ],
            [
                "Node.lastChildRead only",
                "Returns a Node representing the last direct child node of the node, or null if the node has no child."
            ],
            [
                "Node.nextSiblingRead only",
                "Returns a Node representing the next node in the tree, or null if there isn't such node."
            ],
            [
                "Node.nodeNameRead only",
                "Returns a DOMString containing the name of the Node. The structure of the name will differ with the node type. E.g. An HTMLElement will contain the name of the corresponding tag, like 'audio' for an HTMLAudioElement, a Text node will have the '#text' string, or a Document node will have the '#document' string."
            ],
            [
                "Node.nodeTypeRead only",
                "Returns an unsigned short representing the type of the node. Possible values are: Name Value ELEMENT_NODE 1 ATTRIBUTE_NODE 2 TEXT_NODE 3 CDATA_SECTION_NODE 4 ENTITY_REFERENCE_NODE 5 ENTITY_NODE 6 PROCESSING_INSTRUCTION_NODE 7 COMMENT_NODE 8 DOCUMENT_NODE 9 DOCUMENT_TYPE_NODE 10 DOCUMENT_FRAGMENT_NODE 11 NOTATION_NODE 12"
            ],
            [
                "Node.nodeValue",
                "Returns / Sets the value of the current node."
            ],
            [
                "Node.ownerDocumentRead only",
                "Returns the Document that this node belongs to. If the node is itself a document, returns null."
            ],
            [
                "Node.parentNodeRead only",
                "Returns a Node that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns null."
            ],
            [
                "Node.parentElementRead only",
                "Returns an Element that is the parent of this node. If the node has no parent, or if that parent is not an Element, this property returns null."
            ],
            [
                "Node.previousSiblingRead only",
                "Returns a Node representing the previous node in the tree, or null if there isn't such node."
            ],
            [
                "Node.textContent",
                "Returns / Sets the textual content of an element and all its descendants."
            ],
            [
                "Node.appendChild(childNode)",
                "Adds the specified childNode argument as the last child to the current node. If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position."
            ],
            [
                "Node.cloneNode()",
                "Clone a Node, and optionally, all of its contents. By default, it clones the content of the node."
            ],
            [
                "Node.compareDocumentPosition()",
                "Compares the position of the current node against another node in any other document."
            ],
            [
                "Node.contains()",
                "Returns true or false value indicating whether or not a node is a descendant of the calling node."
            ],
            [
                "Node.getBoxQuads()",
                "Returns a list of the node's CSS boxes relative to another node."
            ],
            [
                "Node.getRootNode()",
                "Returns the context object's root which optionally includes the shadow root if it is available."
            ],
            [
                "Node.hasChildNodes()",
                "Returns a Boolean indicating whether or not the element has any child nodes."
            ],
            [
                "Node.insertBefore()",
                "Inserts a Node before the reference node as a child of a specified parent node."
            ],
            [
                "Node.isDefaultNamespace()",
                "Accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not."
            ],
            [
                "Node.isEqualNode()",
                "Returns a Boolean which indicates whether or not two nodes are of the same type and all their defining data points match."
            ],
            [
                "Node.isSameNode()",
                "Returns a Boolean value indicating whether or not the two nodes are the same (that is, they reference the same object)."
            ],
            [
                "Node.lookupPrefix()",
                "Returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent."
            ],
            [
                "Node.lookupNamespaceURI()",
                "Accepts a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace."
            ],
            [
                "Node.normalize()",
                "Clean up all the text nodes under this element (merge adjacent, remove empty)."
            ],
            [
                "Node.removeChild()",
                "Removes a child node from the current element, which must be a child of the current node."
            ],
            [
                "Node.replaceChild()",
                "Replaces one child Node of the current one with the second one given in parameter."
            ],
            [
                "Node.hasAttributes()",
                "Returns true or false indicating if the element has any attributes, or not."
            ],
            [
                "Node.isSupported()",
                "Returns true or false containing the result of a test whether the DOM implementation implements a specific feature and this feature is supported by the specific node."
            ],
            [
                "rootNode",
                "The Node object whose descendants will be recursed through."
            ],
            [
                "callback Optional",
                "An optional callback function that receives a Node as its only argument. If omitted, eachNode returns an Array of every node contained within rootNode (including the root itself)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NodeFilter",
        "",
        "NodeFilter",
        "A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. A NodeFilter knows nothing about the document or traversing nodes; it only knows how to evaluate a single node against the provided filter.",
        [
            [
                "NodeFilter.acceptNode()",
                "Returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are: Constant Description FILTER_ACCEPT Value returned by the NodeFilter.acceptNode() method when a node should be accepted. FILTER_REJECT Value to be returned by the NodeFilter.acceptNode() method when a node should be rejected. For TreeWalker, child nodes are also rejected. For NodeIterator, this flag is synonymous with FILTER_SKIP. FILTER_SKIP Value to be returned by NodeFilter.acceptNode() for nodes to be skipped by the NodeIterator or TreeWalker object. The children of skipped nodes are still considered. This is treated as \"skip this node but not its children\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NodeIterator",
        "",
        "NodeIterator",
        "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
        [
            [
                "NodeIterator.root Read only",
                "Returns a Node representing the root node as specified when the NodeIterator was created."
            ],
            [
                "NodeIterator.whatToShow Read only",
                "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are: Constant Numerical value Description NodeFilter.SHOW_ALL -1 (that is the max value of unsigned long) Shows all nodes. NodeFilter.SHOW_ATTRIBUTE 2 Shows attribute Attr nodes. This is meaningful only when creating a NodeIterator with an Attr node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree. NodeFilter.SHOW_CDATA_SECTION 8 Shows CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes. NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes. NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes. NodeFilter.SHOW_ELEMENT 1 Shows Element nodes. NodeFilter.SHOW_ENTITY 32 Legacy, no more used. NodeFilter.SHOW_ENTITY_REFERENCE 16 Legacy, no more used. NodeFilter.SHOW_NOTATION 2048 Legacy, no more used. NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes. NodeFilter.SHOW_TEXT 4 Shows Text nodes."
            ],
            [
                "NodeIterator.filter Read only",
                "Returns a NodeFilter used to select the relevant nodes."
            ],
            [
                "NodeIterator.expandEntityReferences Read only",
                "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time."
            ],
            [
                "NodeIterator.referenceNode Read only",
                "Returns the Node to which the iterator is anchored."
            ],
            [
                "NodeIterator.pointerBeforeReferenceNode Read only",
                "Returns a Boolean flag that indicates whether the NodeIterator is anchored before, the flag being true, or after, the flag being false, the anchor node."
            ],
            [
                "NodeIterator.detach()",
                "This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the NodeIterator was no more used, but this is now useless."
            ],
            [
                "NodeIterator.previousNode()",
                "Returns the previous Node in the document, or null if there are none."
            ],
            [
                "NodeIterator.nextNode()",
                "Returns the next Node in the document, or null if there are none."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NodeList",
        "",
        "NodeList",
        "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().",
        [
            [
                "NodeList.length",
                "The number of nodes in the NodeList."
            ],
            [
                "NodeList.item()",
                "Returns an item in the list by its index, or null if the index is out-of-bounds."
            ],
            [
                "NodeList.entries()",
                "Returns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)"
            ],
            [
                "NodeList.forEach()",
                "Executes a provided function once per NodeList element, passing the element as an argument to the function."
            ],
            [
                "NodeList.keys()",
                "Returns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)"
            ],
            [
                "NodeList.values()",
                "Returns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Notification",
        "",
        "Notification",
        "",
        [
            [
                "Notification()",
                "Creates a new instance of the Notification object."
            ],
            [
                "Notification.permission Read only",
                "A string representing the current permission to display notifications. Possible values are: denied — The user refuses to have notifications displayed. granted — The user accepts having notifications displayed. default — The user choice is unknown and therefore the browser will act as if the value were denied."
            ],
            [
                "Notification.maxActions Read only",
                ""
            ],
            [
                "Notification.actions Read only",
                "The actions array of the notification as specified in the constructor's options parameter."
            ],
            [
                "Notification.badge Read only",
                "The URL of the image used to represent the notification when there is not enough space to display the notification itself."
            ],
            [
                "Notification.body Read only",
                "The body string of the notification as specified in the constructor's options parameter."
            ],
            [
                "Notification.data Read only",
                "Returns a structured clone of the notification’s data."
            ],
            [
                "Notification.dir Read only",
                "The text direction of the notification as specified in the constructor's options parameter."
            ],
            [
                "Notification.lang Read only",
                "The language code of the notification as specified in the constructor's options parameter."
            ],
            [
                "Notification.tag Read only",
                "The ID of the notification (if any) as specified in the constructor's options parameter."
            ],
            [
                "Notification.icon Read only",
                "The URL of the image used as an icon of the notification as specified in the constructor's options parameter."
            ],
            [
                "Notification.image Read only",
                "The URL of an image to be displayed as part of the notification, as specified in the constructor's options parameter."
            ],
            [
                "Notification.renotify Read only",
                "Specifies whether the user should be notified after a new notification replaces an old one."
            ],
            [
                "Notification.requireInteraction Read only",
                "A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically."
            ],
            [
                "Notification.silent Read only",
                "Specifies whether the notification should be silent — i.e., no sounds or vibrations should be issued, regardless of the device settings."
            ],
            [
                "Notification.timestamp Read only",
                "Specifies the time at which a notification is created or applicable (past, present, or future)."
            ],
            [
                "Notification.title Read only",
                "The title of the notification as specified in the first parameter of the constructor."
            ],
            [
                "Notification.vibrate Read only",
                "Specifies a vibration pattern for devices with vibration hardware to emit."
            ],
            [
                "Notification.onclick",
                "A handler for the click event. It is triggered each time the user clicks on the notification."
            ],
            [
                "Notification.onclose",
                "A handler for the close event. It is triggered when the user closes the notification."
            ],
            [
                "Notification.onerror",
                "A handler for the error event. It is triggered each time the notification encounters an error."
            ],
            [
                "Notification.onshow",
                "A handler for the show event. It is triggered when the notification is displayed."
            ],
            [
                "Notification.requestPermission()",
                "Requests permission from the user to display notifications."
            ],
            [
                "Notification.close()",
                "Programmatically closes a notification instance."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NotificationAction",
        "",
        "NotificationAction",
        "Note: This feature is available in Web Workers",
        [
            [
                "NotificationAction.action Read only",
                "The name of the action, which can be used to identify the clicked action similar to input names."
            ],
            [
                "NotificationAction.title Read only",
                "The string describing the action that is displayed to the user."
            ],
            [
                "NotificationAction.icon Read only",
                "The URL of the image used to represent the notification when there is not enough space to display the notification itself."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NotificationEvent",
        "",
        "NotificationEvent",
        "",
        [
            [
                "NotificationEvent()",
                "Creates a new NotificationEvent object."
            ],
            [
                "NotificationEvent.notification Read only",
                "Returns a Notification object representing the notification that was clicked to fire the event."
            ],
            [
                "NotificationEvent.action Read only",
                "Returns the string ID of the notification button the user clicked. This value returns an empty string if the user clicked the notification somewhere other than an action button, or the notification does not have a button."
            ],
            [
                "ExtendableEvent.waitUntil()",
                "Extends the lifetime of the event. Tells the browser that work is ongoing."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/NotifyAudioAvailableEvent",
        "",
        "NotifyAudioAvailableEvent",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "frameBuffer Read only",
                "A Float32Array containing the raw 32-bit floating-point audio data obtained from decoding the audio (e.g., the raw data being sent to the audio hardware vs. encoded audio). The data is a series of audio samples, each sample containing one 32-bit value per audio channel. All audio frames are normalized to contain 1024 samples by default, but could be any length between 512 and 16384 samples if the user has set a different length using the mozFrameBufferLength attribute."
            ],
            [
                "time",
                "A floating-point value indicating the time in seconds at which the first sample in the frameBuffer occurs, relative to the start of the audio track."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_element_index_uint",
        "",
        "OES_element_index_uint",
        "The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_fbo_render_mipmap",
        "",
        "OES_fbo_render_mipmap",
        "The OES_fbo_render_mipmap extension is part of the WebGL API and makes it possible to attach any level of a texture to a framebuffer object.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_standard_derivatives",
        "",
        "OES_standard_derivatives",
        "The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.",
        [
            [
                "ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
                "A WebGL_API.Types indicating the accuracy of the derivative calculation for the GLSL built-in functions: dFdx, dFdy, and fwidth."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_texture_float_linear",
        "",
        "OES_texture_float_linear",
        "The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_texture_float",
        "",
        "OES_texture_float",
        "The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_texture_half_float_linear",
        "",
        "OES_texture_half_float_linear",
        "The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_texture_half_float",
        "",
        "OES_texture_half_float",
        "The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.",
        [
            [
                "ext.HALF_FLOAT_OES",
                "Half floating-point type (16-bit)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OES_vertex_array_object",
        "",
        "OES_vertex_array_object",
        "The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.",
        [
            [
                "ext.VERTEX_ARRAY_BINDING_OES",
                "Returns a WebGLVertexArrayObject object when used in the gl.getParameter() method as the pname parameter."
            ],
            [
                "ext.createVertexArrayOES()",
                "Creates a new WebGLVertexArrayObject."
            ],
            [
                "ext.deleteVertexArrayOES()",
                "Deletes a given WebGLVertexArrayObject."
            ],
            [
                "ext.isVertexArrayOES()",
                "Returns true if a given object is a WebGLVertexArrayObject."
            ],
            [
                "ext.bindVertexArrayOES()",
                "Binds a given WebGLVertexArrayObject to the buffer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OfflineAudioCompletionEvent",
        "",
        "OfflineAudioCompletionEvent",
        "",
        [
            [
                "OfflineAudioCompletionEvent.OfflineAudioCompletionEvent",
                "Creates a new OfflineAudioCompletionEvent object instance."
            ],
            [
                "OfflineAudioCompletionEvent.renderedBuffer Read only",
                "An AudioBuffer containing the result of processing an OfflineAudioContext."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OfflineAudioContext",
        "",
        "OfflineAudioContext",
        "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
        [
            [
                "OfflineAudioContext.OfflineAudioContext()",
                "Creates a new OfflineAudioContext instance."
            ],
            [
                "OfflineAudioContext.length Read only",
                "An integer representing the size of the buffer in sample-frames."
            ],
            [
                "OfflineAudioContext.oncomplete",
                "Is an event handler called when processing is terminated, that is when the complete event (of type OfflineAudioCompletionEvent) is raised, after the event-based version of OfflineAudioContext.startRendering() is used."
            ],
            [
                "OfflineAudioContext.suspend()",
                "Schedules a suspension of the time progression in the audio context at the specified time and returns a promise."
            ],
            [
                "OfflineAudioContext.startRendering()",
                "Starts rendering the audio, taking into account the current connections and the current scheduled changes. This page covers both the event-based version and the promise-based version."
            ],
            [
                "OfflineAudioContext.resume()",
                "Resumes the progression of time in an audio context that has previously been suspended."
            ],
            [
                "complete",
                "Fired when the rendering of an offline audio context is complete. Also available using the oncomplete event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OffscreenCanvas",
        "",
        "OffscreenCanvas",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "OffscreenCanvas()",
                "OffscreenCanvas constructor. Creates a new OffscreenCanvas object."
            ],
            [
                "OffscreenCanvas.height",
                "The height of the offscreen canvas."
            ],
            [
                "OffscreenCanvas.width",
                "The width of the offscreen canvas."
            ],
            [
                "OffscreenCanvas.getContext()",
                "Returns a rendering context for the offscreen canvas."
            ],
            [
                "OffscreenCanvas.convertToBlob()",
                "Creates a Blob object representing the image contained in the canvas."
            ],
            [
                "OffscreenCanvas.transferToImageBitmap()",
                "Creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OrientationSensor",
        "",
        "OrientationSensor",
        "The OrientationSensor interface of the Sensor APIs is the base class for orientation sensors. This interface cannot be used directly. Instead it provides properties and methods accessed by interfaces that inherit from it.",
        [
            [
                "OrientationSensor.quaternion",
                "Returns a four element Array whose elements contain the components of the unit quaternion representing the device's orientation."
            ],
            [
                "OrientationSensor.populateMatrix()",
                "Populates the given object with the rotation matrix based on the latest sensor reading. The rotation maxtrix is shown below."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OscillatorNode",
        "",
        "OscillatorNode",
        "",
        [
            [
                "OscillatorNode()",
                "Creates a new instance of an OscillatorNode object, optionally providing an object specifying default values for the node's properties. If the default values are acceptable, you can call the BaseAudioContext.createOscillator() factory method."
            ],
            [
                "OscillatorNode.frequency",
                "An a-rate AudioParam representing the frequency of oscillation in hertz (though the AudioParam returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note)."
            ],
            [
                "OscillatorNode.detune",
                "An a-rate AudioParam representing detuning of oscillation in cents (though the AudioParam returned is read-only, the value it represents is not). The default value is 0."
            ],
            [
                "OscillatorNode.type",
                "A string which specifies the shape of waveform to play; this can be one of a number of standard values, or custom to use a PeriodicWave to describe a custom waveform. Different waves will produce different tones. Standard values are \"sine\", \"square\", \"sawtooth\", \"triangle\" and \"custom\". The default is \"sine\"."
            ],
            [
                "OscillatorNode.onended",
                "Sets the event handler for the ended event, which fires when the tone has stopped playing."
            ],
            [
                "OscillatorNode.setPeriodicWave()",
                "Sets a PeriodicWave which describes a periodic waveform to be used instead of one of the standard waveforms; calling this sets the type to custom."
            ],
            [
                "OscillatorNode.start()",
                "Specifies the exact time to start playing the tone."
            ],
            [
                "OscillatorNode.stop()",
                "Specifies the time to stop playing the tone."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OTPCredential",
        "",
        "OTPCredential",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "OTPCredential.code",
                "The one-time password."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OverconstrainedError",
        "",
        "OverconstrainedError",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "OverconstrainedError.OverconstrainedError()",
                "Creates a new OverconstrainedError object."
            ],
            [
                "OverconstrainedError.constraint Read only",
                "Returns the constraint that was supplied in the constructor, meaning the constraint that was not satisfied."
            ],
            [
                "DOMException.message Read only",
                "Returns the text supplied in the constructor."
            ],
            [
                "DOMException.name Read only",
                "Will always return OverconstrainedError."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/OVR_multiview2",
        "",
        "OVR_multiview2",
        "The OVR_multiview2 extension is part of the WebGL API and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.",
        [
            [
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR",
                "Number of views of the framebuffer object attachment."
            ],
            [
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR",
                "Base view index of the framebuffer object attachment."
            ],
            [
                "MAX_VIEWS_OVR",
                "The maximum number of views. Most VR headsets have two views, but there are prototypes of headset with ultra-wide FOV using 4 views which is currently the maximum number of views supported by multiview."
            ],
            [
                "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR",
                "If baseViewIndex is not the same for all framebuffer attachment points where the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is not NONE, the framebuffer is considered incomplete. Calling checkFramebufferStatus for a framebuffer in this state returns FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR."
            ],
            [
                "framebufferTextureMultiviewOVR()",
                "Simultaneously renders to multiple elements of a 2D texture array."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PageTransitionEvent",
        "",
        "PageTransitionEvent",
        "",
        [
            [
                "PageTransitionEvent.persisted Read only",
                "Indicates if the document is loading from a cache."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaintWorklet",
        "",
        "PaintWorklet",
        "",
        [
            [
                "PaintWorklet.devicePixelRatio",
                "Returns the current device's ratio of physical pixels to logical pixels."
            ],
            [
                "PaintWorklet.registerPaint()",
                "Registers a class programmatically generate an image where a CSS property expects a file."
            ],
            [
                "CSS.PaintWorklet.addModule()",
                "The addModule() method, inhertied from the Worklet interface loads the module in the given JavaScript file and adds it to the current PaintWorklet."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PannerNode",
        "",
        "PannerNode",
        "",
        [
            [
                "PannerNode.PannerNode",
                "Creates a new PannerNode object instance."
            ],
            [
                "PannerNode.coneInnerAngle",
                "Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction."
            ],
            [
                "PannerNode.coneOuterAngle",
                "A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain attribute."
            ],
            [
                "PannerNode.coneOuterGain",
                "A double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute. Its default value is 0, meaning that no sound can be heard."
            ],
            [
                "PannerNode.distanceModel",
                "An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener. Possible values are \"linear\", \"inverse\" and \"exponential\". The default value is \"inverse\"."
            ],
            [
                "PannerNode.maxDistance",
                "A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further."
            ],
            [
                "PannerNode.orientationX",
                "Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate system. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 1."
            ],
            [
                "PannerNode.orientationY",
                "Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
            ],
            [
                "PannerNode.orientationZ",
                "Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
            ],
            [
                "PannerNode.panningModel",
                "An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space."
            ],
            [
                "PannerNode.positionX",
                "Represents the horizontal position of the audio in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
            ],
            [
                "PannerNode.positionY",
                "Represents the vertical position of the audio in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
            ],
            [
                "PannerNode.positionZ",
                "Represents the longitudinal (back and forth) position of the audio in a right-hand cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0."
            ],
            [
                "PannerNode.refDistance",
                "A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on rolloffFactor and distanceModel."
            ],
            [
                "PannerNode.rolloffFactor",
                "A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models."
            ],
            [
                "PannerNode.setPosition()",
                "Defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the BaseAudioContext.listener attribute.)"
            ],
            [
                "PannerNode.setOrientation()",
                "Defines the direction the audio source is playing in."
            ],
            [
                "PannerNode.setVelocity()",
                "Defines the velocity vector of the audio source — how fast it is moving and in what direction. In a previous version of the specification, the PannerNode had a velocity that could pitch up or down AudioBufferSourceNodes connected downstream. This feature was not clearly specified and had a number of issues, so it was removed from the specification."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PasswordCredential",
        "",
        "PasswordCredential",
        "",
        [
            [
                "PasswordCredential()Secure context",
                "Creates a new PasswordCredential object."
            ],
            [
                "PasswordCredential.iconURL Read only Secure context",
                "A USVString containing a URL pointing to an image for an icon. This image is intended for display in a credential chooser. The URL must be accessible without authentication."
            ],
            [
                "PasswordCredential.name Read only Secure context",
                "A USVString containing a human-readable public name for display in a credential chooser."
            ],
            [
                "PasswordCredential.passwordRead only Secure context",
                "A USVString containing the password of the credential."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Path2D",
        "",
        "Path2D",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Path2D()",
                "Path2D constructor. Creates a new Path2D object."
            ],
            [
                "Path2D.addPath()",
                "Adds a path to the current path."
            ],
            [
                "Path2D.closePath()",
                "Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing."
            ],
            [
                "Path2D.moveTo()",
                "Moves the starting point of a new sub-path to the (x, y) coordinates."
            ],
            [
                "Path2D.lineTo()",
                "Connects the last point in the subpath to the (x, y) coordinates with a straight line."
            ],
            [
                "Path2D.bezierCurveTo()",
                "Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve."
            ],
            [
                "Path2D.quadraticCurveTo()",
                "Adds a quadratic Bézier curve to the current path."
            ],
            [
                "Path2D.arc()",
                "Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by counterclockwise (defaulting to clockwise)."
            ],
            [
                "Path2D.arcTo()",
                "Adds a circular arc to the path with the given control points and radius, connected to the previous point by a straight line."
            ],
            [
                "Path2D.ellipse()",
                "Adds an elliptical arc to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by counterclockwise (defaulting to clockwise)."
            ],
            [
                "Path2D.rect()",
                "Creates a path for a rectangle at position (x, y) with a size that is determined by width and height."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PayerErrors",
        "",
        "PayerErrors",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "email Optional",
                "If present, this DOMString is a string describing the validation error from which the payer's email address—as given by PaymentResponse.payerEmail—currently suffers. If this property is absent from the PayerErrors object, the email address passed validation."
            ],
            [
                "name Optional",
                "If this DOMString is present in the object, the PaymentResponse.payerName property failed validation, and this string explains what needs to be corrected. If this property is absent, the paer name is fine"
            ],
            [
                "phone Optional",
                "If present, this string is an error message explaining why the payer's phone number (PaymentResponse.payerPhone) failed validation. This property is absent if the phone number passed validation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentAddress",
        "",
        "PaymentAddress",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PaymentAddress.addressLine Read only",
                "An array of DOMString objects providing each line of the address not included among the other properties. The exact size and content varies by country or location and can include, for example, a street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box number."
            ],
            [
                "PaymentAddress.country Read only",
                "A DOMString specifying the country in which the address is located, using the ISO-3166-1 alpha-2 standard. The string is always given in its canonical upper-case form. Some examples of valid country values: \"US\", \"GB\", \"CN\", or \"JP\"."
            ],
            [
                "PaymentAddress.city Read only",
                "A DOMString which contains the city or town portion of the address."
            ],
            [
                "PaymentAddress.dependentLocality Read only",
                "A DOMString giving the dependent locality or sublocality within a city, for example, a neighborhood, borough, district, or UK dependent locality."
            ],
            [
                "PaymentAddress.organization Read only",
                "A DOMString specifying the name of the organization, firm, company, or institution at the payment address."
            ],
            [
                "PaymentAddress.phone Read only",
                "A DOMString specifying the telephone number of the recipient or contact person."
            ],
            [
                "PaymentAddress.postalCode Read only",
                "A DOMString specifying a code used by a jurisdiction for mail routing, for example, the ZIP code in the United States or the PIN code in India."
            ],
            [
                "PaymentAddress.recipient Read only",
                "A DOMString giving the name of the recipient, purchaser, or contact person at the payment address."
            ],
            [
                "PaymentAddress.region Read only",
                "A DOMString containing the top level administrative subdivision of the country, for example a state, province, oblast, or prefecture."
            ],
            [
                "PaymentAddress.sortingCode Read only",
                "A DOMString providing a postal sorting code such as is used in France."
            ],
            [
                "PaymentAddress.languageCode Read only",
                "A DOMString indicating the language code of the address. This identifies the language in which the address is given, and is intended to aid in localization of the display of the address."
            ],
            [
                "PaymentAddress.toJSON()",
                "A standard serializer that returns a JSON representation of the PaymentAddress object's properties."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentCurrencyAmount",
        "",
        "PaymentCurrencyAmount",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "currency",
                "A string containing a valid 3-letter ISO 4217 currency identifier (ISO 4217) indicating the currency used for the payment value."
            ],
            [
                "value",
                "A string containing a valid decimal value representing the mount of currency constituting the payment amount. This string must only contain an optional leading \"-\" to indicate a negative value, then one or more digits from 0 to 9, and an optional decimal point (\".\", regardless of locale) followed by at least one more digit. No whitespace is permitted."
            ],
            [
                "currencySystem Optional",
                "A string describing the standard or specification as well as the currency system identifier within that system which was used to provide the value. This has been removed; instead of allowing sites to choose the standard to use, ISO 4217 is always used for the currency identifier now."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentDetailsUpdate",
        "",
        "PaymentDetailsUpdate",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "displayItems Optional",
                "An array of PaymentItem objects, each describing one line item for the payment request. These represent the line items on a receipt or invoice."
            ],
            [
                "error Optional",
                "A DOMString specifying an error message to present to the user. When calling updateWith(), including error in the updated data causes the user agent to display the text as a general error message. For address field specific errors, use shippingAddressErrors."
            ],
            [
                "modifiers Optional",
                "An array of PaymentDetailsModifier objects, each describing a modifier for particular payment method identifiers. For example, you can use one to adjust the total payment amount based on the selected payment method (\"5% cash discount!\")."
            ],
            [
                "shippingAddressErrors Optional",
                "An AddressErrors object which includes an error message for each property of the shipping address that could not be validated."
            ],
            [
                "shippingOptions Optional",
                "An array of PaymentShippingOption objects, each describing one available shipping option from which the user may choose."
            ],
            [
                "total Optional",
                "A PaymentItem providing an updated total for the payment. Make sure this equals the sum of all of the items in displayItems. This is not calculated automatically. You must update this value yourself anytime the total amount due changes. This lets you have flexibility for how to handle things like tax, discounts, and other adjustments to the total price charged."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentItem",
        "",
        "PaymentItem",
        "",
        [
            [
                "amount Secure context",
                "A PaymentCurrencyAmount object describing the monetary value of the item."
            ],
            [
                "label Secure context",
                "A string specifying a human-readable name or description of the item or service being charged for. This may be displayed to the user by the user agent, depending on the design of the interface."
            ],
            [
                "pending Secure context",
                "A Boolean value which is true if the specified amount has not yet been finalized. This can be used to show items such as shipping or tax amounts that depend upon the selection of shipping address, shipping option, or so forth. The user agent may show this information but is not required to do so."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentMethodChangeEvent",
        "",
        "PaymentMethodChangeEvent",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PaymentMethodChangeEvent()",
                "Creates and returns a new PaymentMethodChangeEvent object, optionally initialized with values taken from a given PaymentMethodChangeEventInit dictionary."
            ],
            [
                "methodDetails Read only Secure context",
                "An object containing payment method-specific data useful when handling a payment method change. If no such information is available, this value is null."
            ],
            [
                "methodName Read only Secure context",
                "A DOMString containing the payment method identifier, a string which uniquely identifies a particular payment method. This identifier is usually a URL used during the payment process, but may be a standardized non-URL string as well, such as basic-card. The default value is the empty string, \"\"."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentRequest",
        "",
        "PaymentRequest",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PaymentRequest() Secure context",
                "Creates a new PaymentRequest object."
            ],
            [
                "PaymentRequest.id Read only Secure context",
                "An unique identifier for a particular PaymentRequest, which can be set via details.id. When none is set, it defaults to a UUID."
            ],
            [
                "PaymentRequest.shippingAddress Read only Secure context",
                "If requested via payment options, returns the shipping address chosen by the user for the purposes of calculating shipping. This property is only populated if the constructor is called with the requestShipping flag set to true. Additionally, in some browsers, the parts of the address will be redacted for privacy until the user indicates they are ready to complete the transaction (i.e., they hit \"Pay\")."
            ],
            [
                "PaymentRequest.shippingOption Read only Secure context",
                "Returns the identifier of the selected shipping option. This property is only populated if the constructor is called with the requestShipping flag set to true."
            ],
            [
                "PaymentRequest.shippingType Read only Secure context",
                "Returns the type of shipping used to fulfill the transaction. This will be one of shipping, delivery, pickup, or null if a value was not provided in the constructor."
            ],
            [
                "PaymentRequest.canMakePayment() Secure context",
                "Indicates whether the PaymentRequest object can make a payment before calling show()."
            ],
            [
                "PaymentRequest.show() Secure context",
                "Causes the user agent to begin the user interaction for the payment request."
            ],
            [
                "PaymentRequest.abort() Secure context",
                "Causes the user agent to end the payment request and to remove any user interface that might be shown."
            ],
            [
                "merchantvalidation Secure context",
                "With some payment handlers (e.g., Apple Pay), this event handler is called to handle the merchantvalidation event, which is dispatched when the user agent requires that the merchant validate that the merchant or vendor requesting payment is legitimate. Also available using the onmerchantvalidation event handler property."
            ],
            [
                "paymentmethodchange Secure context",
                "With some payment handlers (e.g., Apple Pay), dispatched whenever the user changes payment instrument, like switching from a credit card to a debit card. Also available using the onpaymentmethodchange event handler property."
            ],
            [
                "shippingaddresschange Secure context",
                "Dispatched whenever the user changes their shipping address. Also available using the onshippingaddresschange event handler property."
            ],
            [
                "shippingoptionchange Secure context",
                "Dispatched whenever the user changes a shipping option. Also available using the onshippingoptionchange event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentRequestEvent",
        "",
        "PaymentRequestEvent",
        "",
        [
            [
                "PaymentRequestEvent()",
                "Creates a new PaymentRequestEvent object."
            ],
            [
                "instrumentKeyRead only",
                "Returns a PaymentInstrument object reflecting the payment instrument selected by the user or an empty string if the user has not registered or chosen a payment instrument."
            ],
            [
                "methodDataRead only",
                "Returns an array of PaymentMethodData objects containing payment method identifiers for the payment methods that the web site accepts and any associated payment method specific data."
            ],
            [
                "modifiersRead only",
                "Returns an array of objects containing changes to payment details."
            ],
            [
                "paymentRequestIdRead only",
                "Returns the ID of the PaymentRequest object."
            ],
            [
                "paymentRequestOriginRead only",
                "Returns the origin where the PaymentRequest object was initialized."
            ],
            [
                "topOriginRead only",
                "Returns the top-level origin where the PaymentRequest object was initialized."
            ],
            [
                "totalRead only",
                "Returns the total amount being requested for payment."
            ],
            [
                "openWindow()",
                "Opens the specified URL in a new window, if and only if the given URL is on the same origin as the calling page. It returns a Promise that resolves with a reference to a WindowClient."
            ],
            [
                "respondWith()",
                "Prevents the default event handling and allows you to provide a Promise for a PaymentResponse object yourself."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentRequestUpdateEvent",
        "",
        "PaymentRequestUpdateEvent",
        "",
        [
            [
                "shippingaddresschange Secure context",
                "Dispatched whenever the user changes their shipping address. Also available using the onshippingaddresschange event handler property."
            ],
            [
                "shippingoptionchange Secure context",
                "Dispatched whenever the user changes a shipping option. Also available using the onshippingoptionchange event handler property."
            ],
            [
                "PaymentRequestUpdateEvent() Secure context",
                "Creates a new PaymentRequestUpdateEvent object."
            ],
            [
                "PaymentRequestUpdateEvent.updateWith() Secure context",
                "If the event handler determines that information included in the payment request needs to be changed, or that new information needs to be added, it calls updateWith() with the information that needs to be replaced or added."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentResponse",
        "",
        "PaymentResponse",
        "",
        [
            [
                "PaymentResponse.details Read only Secure context",
                "Returns a JSON-serializable object that provides a payment method specific message used by the merchant to process the transaction and determine successful fund transfer. The contents of the object depend on the payment method being used; for example, if the Basic Card payment method is used, this object must conform to the structure defined in the BasicCardResponse dictionary."
            ],
            [
                "PaymentResponse.methodName Read only Secure context",
                "Returns the payment method identifier for the payment method that the user selected, for example, Visa, Mastercard, Paypal, etc.."
            ],
            [
                "PaymentResponse.payerEmail Read only Secure context",
                "Returns the email address supplied by the user. This option is only present when the requestPayerEmail option is set to true in the options parameter of the PaymentRequest() constructor."
            ],
            [
                "PaymentResponse.payerName Read only Secure context",
                "Returns the name supplied by the user. This option is only present when the requestPayerName option is set to true in the options parameter of the PaymentRequest() constructor."
            ],
            [
                "PaymentResponse.payerPhone Read only Secure context",
                "Returns the phone number supplied by the user. This option is only present when the requestPayerPhone option is set to true in the options parameter of the PaymentRequest() constructor."
            ],
            [
                "PaymentResponse.requestId Read only Secure context",
                "Returns the identifier of the PaymentRequest that produced the current response. This is the same value supplied in the PaymentRequest() constructor by details.id."
            ],
            [
                "PaymentResponse.shippingAddress Read only Secure context",
                "Returns the shipping Address supplied by the user. This option is only present when the requestShipping option is set to true in the options parameter of the PaymentRequest() constructor."
            ],
            [
                "PaymentResponse.shippingOption Read only Secure context",
                "Returns the ID attribute of the shipping option selected by the user. This option is only present when the requestShipping option is set to true in the options parameter of the PaymentRequest() constructor."
            ],
            [
                "PaymentResponse.retry() Secure context",
                "If something is wrong with the payment response's data (and there is a recoverable error), this method allows a merchant to request that the user retry the payment. The method takes an object as argument, which is used to signal to the user exactly what is wrong with the payment response so they can try to correct any issues."
            ],
            [
                "PaymentResponse.complete() Secure context",
                "Notifies the user agent that the user interaction is over. This causes any remaining user interface to be closed. This method should only be called after the Promise returned by the PaymentRequest.show() method."
            ],
            [
                "payerdetailchangeSecure context",
                "Fired during a retry when the user makes changes to their personal information while filling out a payment request form. Allows the developer to revalidate any requested user data (e.g., the phone number or the email address) if it changes. Also available via the onpayerdetailchange property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PaymentValidationErrors",
        "",
        "PaymentValidationErrors",
        "",
        [
            [
                "error Optional",
                "A general description of a payment error from which the user may attempt to recover by retrying the payment, possibly after correcting mistakes in the payment information. error can be provided all by itself to provide only a generic error message, or in concert with the other properties to serve as an overview while other properties' values gude the user to errors in specific fields in the payment form."
            ],
            [
                "payer Optional",
                "A PayerErrors compliant object which provides appropriate error messages for any of the fields describing the payer which failed validation."
            ],
            [
                "paymentMethod Optional",
                "Any payment method specific errors which may have occurred. This object's contents will vary depending on the payment used. For example, if the user chose to pay by credit card using the basic-card payment method, this is a BasicCardErrors object."
            ],
            [
                "shippingAddress Optional",
                "An AddressErrors object which contains error messages for any of the fields in the shipping address that failed validation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Pbkdf2Params",
        "",
        "Pbkdf2Params",
        "The Pbkdf2Params dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the PBKDF2 algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to PBKDF2."
            ],
            [
                "hash",
                "A DOMString representing the digest algorithm to use. This may be one of: SHA-1 SHA-256 SHA-384 SHA-512 Warning: SHA-1 is considered vulnerable in most cryptographic applications, but is still considered safe in PBKDF2. However, it's advisable to transition away from it everywhere, so unless you need to use SHA-1, don't. Use a different digest algorithm instead."
            ],
            [
                "salt",
                "A BufferSource. This should be a random or pseudo-random value of at least 16 bytes. Unlike the input key material passed into deriveKey(), salt does not need to be kept secret."
            ],
            [
                "iterations",
                "A Number representing the number of times the hash function will be executed in deriveKey(). This determines how computationally expensive (that is, slow) the deriveKey() operation will be. In this context, slow is good, since it makes it more expensive for an attacker to run a dictionary attack against the keys. The general guidance here is to use as many iterations as possible, subject to keeping an acceptable level of performance for your application."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Performance",
        "",
        "Performance",
        "The Performance interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.",
        [
            [
                "Performance.navigation Read only",
                "A legacy PerformanceNavigation object that provides useful context about the operations included in the times listed in timing, including whether the page was a load or a refresh, how many redirections occurred, and so forth. Not available in workers."
            ],
            [
                "Performance.timing Read only",
                "A legacy PerformanceTiming object containing latency-related performance information. Not available in workers."
            ],
            [
                "Performance.memory Read only",
                "A non-standard extension added in Chrome, this property provides an object with basic memory usage information. You should not use this non-standard API."
            ],
            [
                "Performance.timeOrigin Read only",
                "Returns the high resolution timestamp of the start time of the performance measurement."
            ],
            [
                "Performance.clearMarks()",
                "Removes the given mark from the browser's performance entry buffer."
            ],
            [
                "Performance.clearMeasures()",
                "Removes the given measure from the browser's performance entry buffer."
            ],
            [
                "Performance.clearResourceTimings()",
                "Removes all performance entries with a entryType of \"resource\" from the browser's performance data buffer."
            ],
            [
                "Performance.getEntries()",
                "Returns a list of PerformanceEntry objects based on the given filter."
            ],
            [
                "Performance.getEntriesByName()",
                "Returns a list of PerformanceEntry objects based on the given name and entry type."
            ],
            [
                "Performance.getEntriesByType()",
                "Returns a list of PerformanceEntry objects of the given entry type."
            ],
            [
                "Performance.mark()",
                "Creates a timestamp in the browser's performance entry buffer with the given name."
            ],
            [
                "Performance.measure()",
                "Creates a named timestamp in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively)."
            ],
            [
                "Performance.now()",
                "Returns a DOMHighResTimeStamp representing the number of milliseconds elapsed since a reference instant."
            ],
            [
                "Performance.setResourceTimingBufferSize()",
                "Sets the browser's resource timing buffer size to the specified number of \"resource\" type performance entry objects."
            ],
            [
                "Performance.toJSON()",
                "Is a jsonizer returning a json object representing the Performance object."
            ],
            [
                "resourcetimingbufferfull",
                "Fired when the browser's resource timing buffer is full. Also available via the onresourcetimingbufferfull property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceElementTiming",
        "",
        "PerformanceElementTiming",
        "The PerformanceElementTiming interface of the Element Timing API reports timing information on a specific element identified by the page author. For example it could report timing information about the main image in an article.",
        [
            [
                "PerformanceElementTiming.elementRead only",
                "An Element representing the element we are returning information about."
            ],
            [
                "PerformanceElementTiming.idRead only",
                "A DOMString which is the id of the element."
            ],
            [
                "PerformanceElementTiming.identifierRead only",
                "A DOMString which is the value of the elementtiming attribute on the element."
            ],
            [
                "PerformanceElementTiming.intersectionRectRead only",
                "A DOMRectReadOnly which is the rectangle of the element within the viewport."
            ],
            [
                "PerformanceElementTiming.loadTimeRead only",
                "A DOMHighResTimeStamp with the loadTime of the element."
            ],
            [
                "PerformanceElementTiming.naturalHeightRead only",
                "An unsigned 32-bit integer (unsigned long) which is the intrinsic height of the image if this is applied to an image, 0 for text."
            ],
            [
                "PerformanceElementTiming.naturalWidthRead only",
                "An unsigned 32-bit integer (unsigned long) which is the intrinsic width of the image if this is applied to an image, 0 for text."
            ],
            [
                "PerformanceElementTiming.renderTimeRead only",
                "A DOMHighResTimeStamp with the renderTime of the element."
            ],
            [
                "PerformanceElementTiming.urlRead only",
                "A DOMString which is the initial URL of the resources request for images, 0 for text."
            ],
            [
                "PerformanceElementTiming.toJSON()",
                "Generates a JSON description of the object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceEntry",
        "",
        "PerformanceEntry",
        "The PerformanceEntry object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).",
        [
            [
                "PerformanceEntry.name Read only",
                "A value that further specifies the value returned by the PerformanceEntry.entryType property. The value of both depends on the subtype. See property page for valid values."
            ],
            [
                "PerformanceEntry.entryType Read only",
                "A DOMString representing the type of performance metric such as, for example, \"mark\". See property page for valid values."
            ],
            [
                "PerformanceEntry.startTime Read only",
                "A DOMHighResTimeStamp representing the starting time for the performance metric."
            ],
            [
                "PerformanceEntry.duration Read only",
                "A DOMHighResTimeStamp representing the time value of the duration of the performance event."
            ],
            [
                "PerformanceEntry.toJSON()",
                "Returns a JSON representation of the PerformanceEntry object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceEventTiming",
        "",
        "PerformanceEventTiming",
        "The PerformanceEventTiming interface of the Event Timing API provides timing information for the event types listed below.",
        [
            [
                "PerformanceEventTiming.processingStart",
                "Returns the time at which event dispatch started."
            ],
            [
                "PerformanceEventTiming.processingEnd",
                "Returns the time at which the event dispatch ended."
            ],
            [
                "PerformanceEventTiming.cancelable",
                "Returns the associated event's cancelable attribute."
            ],
            [
                "PerformanceEventTiming.target",
                "Returns the associated event's last target, if it is not removed."
            ],
            [
                "PerformanceEventTiming.toJSON()",
                "Converts the PerformanceEventTiming object to JSON."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceFrameTiming",
        "",
        "PerformanceFrameTiming",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "PerformanceEntry.entryType",
                "Returns \"frame\"."
            ],
            [
                "PerformanceEntry.name",
                "Returns the document's address."
            ],
            [
                "PerformanceEntry.startTime",
                "Returns the timestamp when the frame was started."
            ],
            [
                "PerformanceEntry.duration",
                "Returns a timestamp indicating the difference between the startTimes of two successive frames."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceLongTaskTiming",
        "",
        "PerformanceLongTaskTiming",
        "",
        [
            [
                "PerformanceLongTaskTiming.attribution Read only",
                "Returns a sequence of TaskAttributionTiming instances."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceMark",
        "",
        "PerformanceMark",
        "PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \"mark\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.",
        [
            [
                "PerformanceEntry.entryType",
                "Returns \"mark\"."
            ],
            [
                "PerformanceEntry.name",
                "Returns the name given to the mark when it was created via a call to performance.mark()."
            ],
            [
                "PerformanceEntry.startTime",
                "Returns the DOMHighResTimeStamp when performance.mark() was called."
            ],
            [
                "PerformanceEntry.duration",
                "Returns \"0\". (A mark has no duration.)"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceMeasure",
        "",
        "PerformanceMeasure",
        "PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \"measure\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.",
        [
            [
                "PerformanceEntry.entryType",
                "Returns \"measure\"."
            ],
            [
                "PerformanceEntry.name",
                "Returns the name given to the measure when it was created via a call to performance.measure()."
            ],
            [
                "PerformanceEntry.startTime",
                "Returns a timestamp given to the measure when performance.measure() was called."
            ],
            [
                "PerformanceEntry.duration",
                "Returns a DOMHighResTimeStamp that is the duration of the measure (typically, the measure's end mark timestamp minus its start mark timestamp)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceNavigation",
        "",
        "PerformanceNavigation",
        "",
        [
            [
                "PerformanceNavigation.type Read only",
                "An unsigned short which indicates how the navigation to this page was done. Possible values are: TYPE_NAVIGATE (0) The page was accessed by following a link, a bookmark, a form submission, or a script, or by typing the URL in the address bar. TYPE_RELOAD (1) The page was accessed by clicking the Reload button or via the Location.reload() method. TYPE_BACK_FORWARD (2) The page was accessed by navigating into the history. TYPE_RESERVED (255) Any other way."
            ],
            [
                "TYPE_NAVIGATE (0)",
                "The page was accessed by following a link, a bookmark, a form submission, or a script, or by typing the URL in the address bar."
            ],
            [
                "TYPE_RELOAD (1)",
                "The page was accessed by clicking the Reload button or via the Location.reload() method."
            ],
            [
                "TYPE_BACK_FORWARD (2)",
                "The page was accessed by navigating into the history."
            ],
            [
                "TYPE_RESERVED (255)",
                "Any other way."
            ],
            [
                "PerformanceNavigation.redirectCount Read only",
                "An unsigned short representing the number of REDIRECTs done before reaching the page."
            ],
            [
                "PerformanceNavigation.toJSON()",
                "Is a jsonizer returning a json object representing the PerformanceNavigation object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceNavigationTiming",
        "",
        "PerformanceNavigationTiming",
        "",
        [
            [
                "PerformanceEntry.entryType Read only",
                "Returns \"navigation\"."
            ],
            [
                "PerformanceEntry.name Read only",
                "Returns the document's address."
            ],
            [
                "PerformanceEntry.startTime Read only",
                "Returns a DOMHighResTimeStamp with a value of \"0\"."
            ],
            [
                "PerformanceEntry.duration Read only",
                "Returns a timestamp that is the difference between the PerformanceNavigationTiming.loadEventEnd and PerformanceEntry.startTime properties."
            ],
            [
                "PerformanceResourceTiming.initiatorTypeRead only",
                "Returns \"navigation\"."
            ],
            [
                "PerformanceNavigationTiming.domComplete Read only",
                "A DOMHighResTimeStamp representing a time value equal to the time immediately before the browser sets the current document readiness of the current document to complete."
            ],
            [
                "PerformanceNavigationTiming.domContentLoadedEventEnd Read only",
                "A DOMHighResTimeStamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes."
            ],
            [
                "PerformanceNavigationTiming.domContentLoadedEventStart Read only",
                "A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document."
            ],
            [
                "PerformanceNavigationTiming.domInteractive Read only",
                "A DOMHighResTimeStamp representing a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive."
            ],
            [
                "PerformanceNavigationTiming.loadEventEnd Read only",
                "A DOMHighResTimeStamp representing the time when the load event of the current document is completed."
            ],
            [
                "PerformanceNavigationTiming.loadEventStart Read only",
                "A DOMHighResTimeStamp representing the time value equal to the time immediately before the load event of the current document is fired."
            ],
            [
                "PerformanceNavigationTiming.redirectCount Read only",
                "A number representing the number of redirects since the last non-redirect navigation under the current browsing context."
            ],
            [
                "PerformanceNavigationTiming.requestStart Read only",
                "A DOMHighResTimeStamp representing the time immediately before the user agent starts requesting the resource from the server, or from relevant application caches or from local resources."
            ],
            [
                "PerformanceNavigationTiming.responseStart Read only",
                "A DOMHighResTimeStamp representing the time immediately after the user agent's HTTP parser receives the first byte of the response from relevant application caches, or from local resources or from the server."
            ],
            [
                "PerformanceNavigationTiming.type Read only",
                "A string representing the navigation type. Must be: \"navigate\", \"reload\", \"back_forward\" or \"prerender\"."
            ],
            [
                "PerformanceNavigationTiming.unloadEventEnd Read only",
                "A DOMHighResTimeStamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document."
            ],
            [
                "PerformanceNavigationTiming.unloadEventStart Read only",
                "A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document."
            ],
            [
                "PerformanceNavigationTiming.toJSON()",
                "Returns a DOMString that is the JSON representation of the PerformanceNavigationTiming object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceObserver",
        "",
        "PerformanceObserver",
        "The PerformanceObserver interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.",
        [
            [
                "PerformanceObserver()",
                "Creates and returns a new PerformanceObserver object."
            ],
            [
                "PerformanceObserver.supportedEntryTypesRead only",
                "Returns an array of the entryType values supported by the user agent."
            ],
            [
                "PerformanceObserver.observe()",
                "Specifies the set of entry types to observe. The performance observer's callback function will be invoked when a performance entry is recorded for one of the specified entryTypes"
            ],
            [
                "PerformanceObserver.disconnect()",
                "Stops the performance observer callback from receiving performance entries."
            ],
            [
                "PerformanceObserver.takeRecords()",
                "Returns the current list of performance entries stored in the performance observer, emptying it out."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceObserverEntryList",
        "",
        "PerformanceObserverEntryList",
        "The PerformanceObserverEntryList interface is a list of peformance events that were explicitly observed via the observe() method.",
        [
            [
                "PerformanceObserverEntryList.getEntries()",
                "Returns a list of explicitly observed PerformanceEntry objects based on the given filter."
            ],
            [
                "PerformanceObserverEntryList.getEntriesByType()",
                "Returns a list of explicitly observed PerformanceEntry objects of the given entry type."
            ],
            [
                "PerformanceObserverEntryList.getEntriesByName()",
                "Returns a list of explicitly observed PerformanceEntry objects based on the given name and entry type."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformancePaintTiming",
        "",
        "PerformancePaintTiming",
        "",
        [
            [
                "PerformanceEntry.entryType",
                "Returns \"paint\"."
            ],
            [
                "PerformanceEntry.name",
                "Returns either \"first-paint\" or \"first-contentful-paint\"."
            ],
            [
                "PerformanceEntry.startTime",
                "Returns the timestamp when the paint occurred."
            ],
            [
                "PerformanceEntry.duration",
                "Returns 0."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceResourceTiming",
        "",
        "PerformanceResourceTiming",
        "The PerformanceResourceTiming interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.",
        [
            [
                "PerformanceEntry.entryTypeRead only",
                "Returns \"resource\"."
            ],
            [
                "PerformanceEntry.nameRead only",
                "Returns the resources URL."
            ],
            [
                "PerformanceEntry.startTimeRead only",
                "Returns the timestamp for the time a resource fetch started. This value is equivalent to PerformanceResourceTiming.fetchStart."
            ],
            [
                "PerformanceEntry.durationRead only",
                "Returns a timestamp that is the difference between the responseEnd and the startTime properties."
            ],
            [
                "PerformanceResourceTiming.initiatorTypeRead only",
                "A string representing the type of resource that initiated the performance entry, as specified in PerformanceResourceTiming.initiatorType."
            ],
            [
                "PerformanceResourceTiming.nextHopProtocolRead only",
                "A string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301)."
            ],
            [
                "PerformanceResourceTiming.workerStartRead only",
                "Returns a DOMHighResTimeStamp immediately before dispatching the FetchEvent if a Service Worker thread is already running, or immediately before starting the Service Worker thread if it is not already running. If the resource is not intercepted by a Service Worker the property will always return 0."
            ],
            [
                "PerformanceResourceTiming.redirectStartRead only",
                "A DOMHighResTimeStamp that represents the start time of the fetch which initiates the redirect."
            ],
            [
                "PerformanceResourceTiming.redirectEndRead only",
                "A DOMHighResTimeStamp immediately after receiving the last byte of the response of the last redirect."
            ],
            [
                "PerformanceResourceTiming.fetchStartRead only",
                "A DOMHighResTimeStamp immediately before the browser starts to fetch the resource."
            ],
            [
                "PerformanceResourceTiming.domainLookupStartRead only",
                "A DOMHighResTimeStamp immediately before the browser starts the domain name lookup for the resource."
            ],
            [
                "PerformanceResourceTiming.domainLookupEndRead only",
                "A DOMHighResTimeStamp representing the time immediately after the browser finishes the domain name lookup for the resource."
            ],
            [
                "PerformanceResourceTiming.connectStartRead only",
                "A DOMHighResTimeStamp immediately before the browser starts to establish the connection to the server to retrieve the resource."
            ],
            [
                "PerformanceResourceTiming.connectEndRead only",
                "A DOMHighResTimeStamp immediately after the browser finishes establishing the connection to the server to retrieve the resource."
            ],
            [
                "PerformanceResourceTiming.secureConnectionStartRead only",
                "A DOMHighResTimeStamp immediately before the browser starts the handshake process to secure the current connection."
            ],
            [
                "PerformanceResourceTiming.requestStartRead only",
                "A DOMHighResTimeStamp immediately before the browser starts requesting the resource from the server."
            ],
            [
                "PerformanceResourceTiming.responseStartRead only",
                "A DOMHighResTimeStamp immediately after the browser receives the first byte of the response from the server."
            ],
            [
                "PerformanceResourceTiming.responseEndRead only",
                "A DOMHighResTimeStamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first."
            ],
            [
                "PerformanceResourceTiming.transferSizeRead only",
                "A number representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body."
            ],
            [
                "PerformanceResourceTiming.encodedBodySizeRead only",
                "A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings."
            ],
            [
                "PerformanceResourceTiming.decodedBodySizeRead only",
                "A number that is the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings."
            ],
            [
                "PerformanceResourceTiming.serverTimingRead only",
                "An array of PerformanceServerTiming entries containing server timing metrics."
            ],
            [
                "PerformanceResourceTiming.toJSON()",
                "Returns a DOMString that is the JSON representation of the PerformanceResourceTiming object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceServerTiming",
        "",
        "PerformanceServerTiming",
        "Note: This feature is available in Web Workers",
        [
            [
                "PerformanceServerTiming.descriptionRead only",
                "A DOMString value of the server-specified metric description, or an empty string."
            ],
            [
                "PerformanceServerTiming.durationRead only",
                "A double that contains the server-specified metric duration, or value 0.0."
            ],
            [
                "PerformanceServerTiming.nameRead only",
                "A DOMString value of the server-specified metric name."
            ],
            [
                "PerformanceServerTiming.toJSON()",
                "Returns a DOMString that is the JSON representation of the PerformanceServerTiming object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PerformanceTiming",
        "",
        "PerformanceTiming",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "PerformanceTiming.navigationStart Read only",
                "When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as PerformanceTiming.fetchStart."
            ],
            [
                "PerformanceTiming.unloadEventStart Read only",
                "When the unload event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is 0."
            ],
            [
                "PerformanceTiming.unloadEventEnd Read only",
                "When the unload event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0."
            ],
            [
                "PerformanceTiming.redirectStart Read only",
                "When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is 0."
            ],
            [
                "PerformanceTiming.redirectEnd Read only",
                "When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is 0."
            ],
            [
                "PerformanceTiming.fetchStart Read only",
                "When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache."
            ],
            [
                "PerformanceTiming.domainLookupStart Read only",
                "When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart."
            ],
            [
                "PerformanceTiming.domainLookupEnd Read only",
                "When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart."
            ],
            [
                "PerformanceTiming.connectStart Read only",
                "When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart."
            ],
            [
                "PerformanceTiming.connectEnd Read only",
                "When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated."
            ],
            [
                "PerformanceTiming.secureConnectionStart Read only",
                "When the secure connection handshake starts. If no such connection is requested, it returns 0."
            ],
            [
                "PerformanceTiming.requestStart Read only",
                "When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request."
            ],
            [
                "PerformanceTiming.responseStart Read only",
                "When the browser received the first byte of the response, from the server from a cache, or from a local resource."
            ],
            [
                "PerformanceTiming.responseEnd Read only",
                "When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource."
            ],
            [
                "PerformanceTiming.domLoading Read only",
                "When the parser started its work, that is when its Document.readyState changes to 'loading' and the corresponding readystatechange event is thrown."
            ],
            [
                "PerformanceTiming.domInteractive Read only",
                "When the parser finished its work on the main document, that is when its Document.readyState changes to 'interactive' and the corresponding readystatechange event is thrown."
            ],
            [
                "PerformanceTiming.domContentLoadedEventStart Read only",
                "Right before the parser sent the DOMContentLoaded event, that is right after all the scripts that need to be executed right after parsing have been executed."
            ],
            [
                "PerformanceTiming.domContentLoadedEventEnd Read only",
                "Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed."
            ],
            [
                "PerformanceTiming.domComplete Read only",
                "When the parser finished its work on the main document, that is when its Document.readyState changes to 'complete' and the corresponding readystatechange event is thrown."
            ],
            [
                "PerformanceTiming.loadEventStart Read only",
                "When the load event was sent for the current document. If this event has not yet been sent, it returns 0."
            ],
            [
                "PerformanceTiming.loadEventEnd Read only",
                "When the load event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns 0."
            ],
            [
                "PerformanceTiming.toJSON()",
                "Returns a JSON object representing this PerformanceTiming object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PeriodicSyncEvent",
        "",
        "PeriodicSyncEvent",
        "This page is not complete.",
        [
            [
                "PeriodicSyncEvent.PeriodicSyncEvent()",
                "Creates a new PeriodicSyncEvent object. This constructor is not typically used. The browser creates these objects itself and provides them to ServiceWorkerGlobalScope.onperiodicsync callback."
            ],
            [
                "PeriodicSyncEvent.tag Read only",
                "Returns the developer-defined identifier for this PeriodicSyncEvent. Multiple tags can be used by the web app to run different periodic tasks at different frequencies."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PeriodicSyncManager",
        "",
        "PeriodicSyncManager",
        "This page is not complete.",
        [
            [
                "PeriodicSyncManager.register",
                "Registers a periodic sync request with the browser with the specified tag and options. Returns a Promise that resolves when the registration completes."
            ],
            [
                "PeriodicSyncManager.getTags",
                "Returns a Promise that resolves with a list of strings representing the tags that are currently registered for periodic syncing."
            ],
            [
                "PeriodicSyncManager.unregister",
                "Unregisters the periodic sync request corresponding to the specified tag and returns a Promise that resolves when unregistration completes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PeriodicWave",
        "",
        "PeriodicWave",
        "",
        [
            [
                "PeriodicWave.PeriodicWave()",
                "Creates a new PeriodicWave object instance using the default values for all properties. If you wish to establish custom property values at the outset, use the BaseAudioContext.createPeriodicWave factory method instead."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Permissions",
        "",
        "Permissions",
        "",
        [
            [
                "Permissions.query()",
                "Returns the user permission status for a given API."
            ],
            [
                "Permissions.request()",
                "Requests permission to use a given API. This is not currently supported in any browser."
            ],
            [
                "Permissions.requestAll()",
                "Requests permission to use a given set of APIs. This is not currently supported in any browser."
            ],
            [
                "Permissions.revoke()",
                "Revokes the permission currently set on a given API."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PermissionStatus",
        "",
        "PermissionStatus",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "PermissionStatus.state Read only",
                "Returns the state of a requested permission; one of 'granted', 'denied', or 'prompt'."
            ],
            [
                "PermissionStatus.statusRead only",
                "Returns the state of a requested permission; one of 'granted', 'denied', or 'prompt'. Later versions of the specification replace this with PermissionStatus.state."
            ],
            [
                "PermissionStatus.onchange",
                "An event called whenever PermissionStatus.status changes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PhotoCapabilities",
        "",
        "PhotoCapabilities",
        "The PhotoCapabilities interface of the MediaStream Image Capture API provides available configuration options for an attached photographic device. A PhotoCapabilities object is retrieved by calling ImageCapture.getPhotoCapabilities().",
        [
            [
                "PhotoCapabilities.redEyeReduction Read only",
                "Returns one of \"never\", \"always\", or \"controllable\". The \"controllable\" value means the device's red-eye reduction is controllable by the user."
            ],
            [
                "PhotoCapabilities.imageHeight Read only",
                "Returns a MediaSettingsRange object indicating the image height range supported by the user agent."
            ],
            [
                "PhotoCapabilities.imageWidth Read only",
                "Returns a MediaSettingsRange object indicating the image width range supported by the user agent."
            ],
            [
                "PhotoCapabilities.fillLightMode Read only",
                "Returns an array of available fill light options. Options may include auto, off, or flash."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PictureInPictureEvent",
        "",
        "PictureInPictureEvent",
        "",
        [
            [
                "PictureInPictureEvent()",
                "Creates a PictureInPictureEvent event with the given parameters."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PictureInPictureWindow",
        "",
        "PictureInPictureWindow",
        "The PictureInPictureWindow interface represents an object able to programmatically obtain the width and height and resize event of the floating video window.",
        [
            [
                "PictureInPictureWindow.width Read only",
                "Determines the width of the floating video window."
            ],
            [
                "PictureInPictureWindow.height Read only",
                "Determines the height of the floating video window."
            ],
            [
                "PictureInPictureWindow.resize",
                "Sent to a PictureInPictureWindow when the floating video window is resized. The associated event handler is PictureInPictureWindow.onresize."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Plugin",
        "",
        "Plugin",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "Plugin.description Read only",
                "A human readable description of the plugin."
            ],
            [
                "Plugin.filename Read only",
                "The filename of the plugin file."
            ],
            [
                "Plugin.name Read only",
                "The name of the plugin."
            ],
            [
                "Plugin.version Read only",
                "The plugin's version number string."
            ],
            [
                "Plugin.item",
                "Returns the MIME type of a supported content type, given the index number into a list of supported types."
            ],
            [
                "Plugin.namedItem",
                "Returns the MIME type of a supported item."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PluginArray",
        "",
        "PluginArray",
        "",
        [
            [
                "PluginArray.lengthRead only",
                "The number of plugins in the array."
            ],
            [
                "PluginArray.item",
                "Returns the Plugin at the specified index into the array."
            ],
            [
                "PluginArray.namedItem",
                "Returns the Plugin with the specified name."
            ],
            [
                "PluginArray.refresh",
                "Refreshes all plugins on the current page, optionally reloading documents."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PointerEvent",
        "",
        "PointerEvent",
        "",
        [
            [
                "PointerEvent()",
                "Creates a synthetic—and untrusted—PointerEvent."
            ],
            [
                "PointerEvent.pointerId Read only",
                "A unique identifier for the pointer causing the event."
            ],
            [
                "PointerEvent.width Read only",
                "The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer."
            ],
            [
                "PointerEvent.height Read only",
                "The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer."
            ],
            [
                "PointerEvent.pressure Read only",
                "The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively."
            ],
            [
                "PointerEvent.tangentialPressure Read only",
                "The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control."
            ],
            [
                "PointerEvent.tiltX Read only",
                "The plane angle (in degrees, in the range of -90 to 90) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis."
            ],
            [
                "PointerEvent.tiltY Read only",
                "The plane angle (in degrees, in the range of -90 to 90) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis."
            ],
            [
                "PointerEvent.twist Read only",
                "The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359."
            ],
            [
                "PointerEvent.pointerType Read only",
                "Indicates the device type that caused the event (mouse, pen, touch, etc.)"
            ],
            [
                "PointerEvent.isPrimary Read only",
                "Indicates if the pointer represents the primary pointer of this pointer type."
            ],
            [
                "PointerEvent.getCoalescedEvents()",
                "Returns a sequence of all PointerEvent instances that were coalesced into the dispatched pointermove event."
            ],
            [
                "PointerEvent.getPredictedEvents()",
                "Returns a sequence of PointerEvent instances that the browser predicts will follow the dispatched pointermove event's coalesced events."
            ],
            [
                "pointerover",
                "This event is fired when a pointing device is moved into an element's hit test boundaries."
            ],
            [
                "pointerenter",
                "This event is fired when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown). This event type is similar to pointerover, but differs in that it does not bubble."
            ],
            [
                "pointerdown",
                "The event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer."
            ],
            [
                "pointermove",
                "This event is fired when a pointer changes coordinates."
            ],
            [
                "pointerrawupdate",
                "This event is fired when any of a pointer's properties change."
            ],
            [
                "pointerup",
                "This event is fired when a pointer is no longer active."
            ],
            [
                "pointercancel",
                "A browser fires this event if it concludes the pointer will no longer be able to generate events (for example the related device is deactivated)."
            ],
            [
                "pointerout",
                "This event is fired for several reasons including: pointing device is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer."
            ],
            [
                "pointerleave",
                "This event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer."
            ],
            [
                "gotpointercapture",
                "This event is fired when an element receives pointer capture."
            ],
            [
                "lostpointercapture",
                "This event is fired after pointer capture is released for a pointer."
            ],
            [
                "GlobalEventHandlers.onpointerover",
                "A global event handler for the pointerover event."
            ],
            [
                "GlobalEventHandlers.onpointerenter",
                "A global event handler for the pointerenter event."
            ],
            [
                "GlobalEventHandlers.onpointerdown",
                "A global event handler for the pointerdown event."
            ],
            [
                "GlobalEventHandlers.onpointermove",
                "A global event handler for the pointermove event."
            ],
            [
                "GlobalEventHandlers.onpointerup",
                "A global event handler for the pointerup event."
            ],
            [
                "GlobalEventHandlers.onpointercancel",
                "A global event handler for the pointercancel event."
            ],
            [
                "GlobalEventHandlers.onpointerout",
                "A global event handler for the pointerout event."
            ],
            [
                "GlobalEventHandlers.onpointerleave",
                "A global event handler for the pointerleave event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PopStateEvent",
        "",
        "PopStateEvent",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/PositionOptions",
        "",
        "PositionOptions",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PositionOptions.enableHighAccuracy Secure context",
                "Is a Boolean that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: false."
            ],
            [
                "PositionOptions.timeout Secure context",
                "Is a positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available."
            ],
            [
                "PositionOptions.maximumAge Secure context",
                "Is a positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age. Default: 0."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PositionSensorVRDevice",
        "",
        "PositionSensorVRDevice",
        "",
        [
            [
                "PositionSensorVRDevice.getState()",
                "Returns the current state of the position sensor for the current frame (e.g. within the current window.requestAnimationFrame callback) or for the previous frame, contained with a VRPose object. This is the method you'd normally want to use, versus getImmediateState()."
            ],
            [
                "PositionSensorVRDevice.getImmediateState()",
                "Returns the current instantaneous position sensor state. This is intended to only be used rarely, for certain special uses, for example sampling the immediate position of a hand orientation sensor — or at least it will be, in the future."
            ],
            [
                "PositionSensorVRDevice.resetSensor()",
                "Can be used to reset the sensor if desired, returning the position and orientation values to zero."
            ],
            [
                "VRDisplay.hardwareUnitId Read only",
                "Returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. All devices that are part of the same physical piece of hardware will have the same hardwareUnitId."
            ],
            [
                "VRDisplay.displayId Read only",
                "Returns the ID for this specific VRDevice. The ID shouldn’t change across browser restarts, allowing configuration data to be saved based on it."
            ],
            [
                "VRDisplay.displayName Read only",
                "A human-readable name to identify the VRDevice."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Presentation",
        "",
        "Presentation",
        "",
        [
            [
                "Presentation.defaultRequest",
                "In a controlling user agent, the defaultRequest attribute MUST return the default presentation request if any, null otherwise. In a receiving browsing context, it MUST return null."
            ],
            [
                "Presentation.receiver",
                "In a receiving user agent, the receiver attribute MUST return the PresentationReceiver instance associated with the receiving browsing context and created by the receiving user agent when the receiving browsing context is created."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationAvailability",
        "",
        "PresentationAvailability",
        "",
        [
            [
                "PresentationAvailability.value Read only",
                "A boolean value indicating whether the given presentation display is available. The value attribute MUST return the last value it was set to."
            ],
            [
                "PresentationAvailability.onchange",
                "Indicates that the availability of the presentation display has changed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationConnection",
        "",
        "PresentationConnection",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "PresentationConnection.binaryType",
                "Returns either blob or arrayBuffer. When a PresentationConnection object is created, its binaryType IDL attribute MUST be set to the string \" arraybuffer\"."
            ],
            [
                "PresentationConnection.id Read only",
                "Provides the presentation connection identifier."
            ],
            [
                "PresentationConnection.state Read only",
                "Returns the presentation connection's current state."
            ],
            [
                "PresentationConnection.url Read only",
                "Returns the URL used to create or reconnect to the presentation."
            ],
            [
                "PresentationConnection.onclose",
                "Fired when there is a call to PresentationConnection.close()."
            ],
            [
                "PresentationConnection.onconnect",
                "Fired when a presentation connection is established."
            ],
            [
                "PresentationConnection.onmessage",
                "Fired when there is a call to PresentationConnection.send()."
            ],
            [
                "PresentationConnection.onterminated",
                "Fired when there is a call to PresentationConnection.terminate()."
            ],
            [
                "PresentationConnection.close()",
                "Closes the current connection and sends a PresentationConnectionCloseEvent to PresentationConnection.onclosed."
            ],
            [
                "PresentationConnection.send()",
                "Sends either binary or text data between a controlling browsing context and a presenting browsing context."
            ],
            [
                "PresentationConnection.terminate()",
                "Terminates the current connection and fires PresentationConnection.onterminated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationConnectionAvailableEvent",
        "",
        "PresentationConnectionAvailableEvent",
        "",
        [
            [
                "PresentationConnectionAvailableEvent()",
                "Creates a new PresentationConnectionAvailableEvent."
            ],
            [
                "PresentationConnectionAvailableEvent.connection Read only",
                "Returns a references to the PresentationConnection object that fired the event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationConnectionCloseEvent",
        "",
        "PresentationConnectionCloseEvent",
        "",
        [
            [
                "PresentationConnectionCloseEvent.PresentationConnectionCloseEvent()",
                "Creates a new PresentationConnectionCloseEvent."
            ],
            [
                "PresentationConnectionCloseEvent.message Read only",
                "A human-readable message that provides more information about why the connection was closed."
            ],
            [
                "PresentationConnectionCloseEvent.reason Read only",
                "Indicates why the connection was closed. This property takes one of the following values: error, closed, or wentaway."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationConnectionList",
        "",
        "PresentationConnectionList",
        "",
        [
            [
                "PresentationConnectionList.connections Read only",
                "Returns the non-terminated set of PresentationConnections in the set of presentation controllers."
            ],
            [
                "PresentationConnectionList.onconnectionavailable",
                "Fired whenever a new presentation connection becomes available."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationReceiver",
        "",
        "PresentationReceiver",
        "",
        [
            [
                "PresentationReceiver.connectionList Read only",
                "Returns a Promise that resolves with a PresentationConnectionList object containing a list of incoming presentation connections."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PresentationRequest",
        "",
        "PresentationRequest",
        "",
        [
            [
                "PresentationRequest()",
                "Creates a PresentationRequest."
            ],
            [
                "PresentationRequest.onconnectionavailable",
                "Fires on a successful call to PresentationRequest.start() or PresentationRequest.join(). This method provides a object with a reference to the created or joined object."
            ],
            [
                "PresentationRequest.start()",
                "Returns a Promise that resolves with a PresentationConnection after the user agent prompts the user to select a display and grant permission to use that display."
            ],
            [
                "PresentationRequest.reconnect()",
                "When the reconnect(presentationId) method is called on a PresentationRequest presentationRequest, the user agent MUST run the following steps to reconnect to a presentation."
            ],
            [
                "PresentationRequest.getAvailability()",
                "When the getAvailability() method is called, the user agent MUST run the steps as the link."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ProcessingInstruction",
        "",
        "ProcessingInstruction",
        "The ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.",
        [
            [
                "target (DOMString) Read only",
                "A name identifying the application to which the instruction is targeted."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ProgressEvent",
        "",
        "ProgressEvent",
        "The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).",
        [
            [
                "ProgressEvent()",
                "Creates a ProgressEvent event with the given parameters."
            ],
            [
                "ProgressEvent.lengthComputable Read only",
                "A Boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not."
            ],
            [
                "ProgressEvent.loaded Read only",
                "A 64-bit unsigned integer value indicating the amount of work already performed by the underlying process. The ratio of work done can be calculated by dividing total by the value of this property. When downloading a resource using HTTP, this only counts the body of the HTTP message, and doesn't include headers and other overhead."
            ],
            [
                "ProgressEvent.total Read only",
                "A 64-bit unsigned integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this is the Content-Length (the size of the body of the message), and doesn't include the headers and other overhead."
            ],
            [
                "ProgressEvent.initProgressEvent()",
                "Initializes a ProgressEvent created using the deprecated Document.createEvent(\"ProgressEvent\") method."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PromiseRejectionEvent",
        "",
        "PromiseRejectionEvent",
        "The PromiseRejectionEvent interface represents events which are sent to the global script context when JavaScript Promises are rejected. These events are particularly useful for telemetry and debugging purposes.",
        [
            [
                "PromiseRejectionEvent()",
                "Creates a PromiseRejectionEvent event, given the type of event (unhandledrejection or rejectionhandled) and other details."
            ],
            [
                "PromiseRejectionEvent.promise Read only",
                "The JavaScript Promise that was rejected."
            ],
            [
                "PromiseRejectionEvent.reason Read only",
                "A value or Object indicating why the promise was rejected, as passed to Promise.reject()."
            ],
            [
                "rejectionhandled",
                "Fired when a JavaScript Promise is rejected, and after the rejection is handled by the promise's rejection handling code."
            ],
            [
                "unhandledrejection",
                "Fired when a JavaScript Promise is rejected but there is no rejection handler to deal with the rejection."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PublicKeyCredential",
        "",
        "PublicKeyCredential",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PublicKeyCredential.type Read only Secure context",
                "Inherited from Credential. Always set to public-key for PublicKeyCredential instances."
            ],
            [
                "PublicKeyCredential.id Read only Secure context",
                "Inherited from Credential and overridden to be the base64url encoding of PublicKeyCredential.rawId."
            ],
            [
                "PublicKeyCredential.rawId Read only Secure context",
                "An ArrayBuffer that holds the globally unique identifier for this PublicKeyCredential. This identifier can be used to look up credentials for future calls to CredentialsContainer.get."
            ],
            [
                "PublicKeyCredential.response Read only Secure context",
                "An instance of an AuthenticatorResponse object. It is either of type AuthenticatorAttestationResponse if the PublicKeyCredential was the results of a navigator.credentials.create() call, or of type AuthenticatorAssertionResponse if the PublicKeyCredential was the result of a navigator.credentials.get() call."
            ],
            [
                "PublicKeyCredential.getClientExtensionResults()Secure context",
                "If any extensions were requested, this method will return the results of processing those extensions."
            ],
            [
                "PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()Secure context",
                "A static method returning a Promise which resolves to true if an authenticator bound to the platform is capable of verifying the user."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PublicKeyCredentialCreationOptions",
        "",
        "PublicKeyCredentialCreationOptions",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PublicKeyCredentialCreationOptions.rp",
                "An object describing the relying party which requested the credential creation."
            ],
            [
                "PublicKeyCredentialCreationOptions.user",
                "An object describing the user account for which the credential is generated."
            ],
            [
                "PublicKeyCredentialCreationOptions.challenge",
                "A BufferSource, emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of AuthenticatorAttestationResponse.attestationObject."
            ],
            [
                "PublicKeyCredentialCreationOptions.pubKeyCredParams",
                "An Array of element which specify the desired features of the credential, including its type and the algorithm used for the cryptographic signature operations. This array is sorted by descending order of preference."
            ],
            [
                "PublicKeyCredentialCreationOptions.timeout Optional",
                "A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the creation operation to complete. This hint may be overridden by the browser."
            ],
            [
                "PublicKeyCredentialCreationOptions.excludeCredentials Optional",
                "An Array of descriptors for existing credentials. This is provided by the relying party to avoid creating new public key credentials for an existing user who already have some."
            ],
            [
                "PublicKeyCredentialCreationOptions.authenticatorSelection Optional",
                "An object whose properties are criteria used to filter out the potential authenticators for the creation operation."
            ],
            [
                "PublicKeyCredentialCreationOptions.attestation Optional",
                "A String which indicates how the attestation (for the authenticator's origin) should be transported."
            ],
            [
                "PublicKeyCredentialCreationOptions.extensions Optional",
                "An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PublicKeyCredentialRequestOptions",
        "",
        "PublicKeyCredentialRequestOptions",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "PublicKeyCredentialRequestOptions.challenge",
                "A BufferSource, emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of AuthenticatorAssertionResponse.signature."
            ],
            [
                "PublicKeyCredentialRequestOptions.timeout Optional",
                "A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the retrieval operation to complete. This hint may be overridden by the browser."
            ],
            [
                "PublicKeyCredentialRequestOptions.rpId Optional",
                "A USVString which indicates the relying party's identifier (ex. \"login.example.org\"). If this option is not provided, the client will use the current origin's domain."
            ],
            [
                "PublicKeyCredentialRequestOptions.allowCredentials Optional",
                "An Array of credentials descriptor which restricts the acceptable existing credentials for retrieval."
            ],
            [
                "PublicKeyCredentialRequestOptions.userVerification Optional",
                "A string qualifying how the user verification should be part of the authentication process."
            ],
            [
                "PublicKeyCredentialRequestOptions.extensions Optional",
                "An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PushEvent",
        "",
        "PushEvent",
        "",
        [
            [
                "PushEvent.PushEvent()",
                "Creates a new PushEvent object."
            ],
            [
                "PushEvent.data Read only",
                "Returns a reference to a PushMessageData object containing data sent to the PushSubscription."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PushManager",
        "",
        "PushManager",
        "",
        [
            [
                "PushManager.supportedContentEncodings",
                "Returns an array of supported content codings that can be used to encrypt the payload of a push message."
            ],
            [
                "PushManager.getSubscription()",
                "Retrieves an existing push subscription. It returns a Promise that resolves to a PushSubscription object containing details of an existing subscription. If no existing subscription exists, this resolves to a null value."
            ],
            [
                "PushManager.permissionState()",
                "Returns a Promise that resolves to the permission state of the current PushManager, which will be one of 'granted', 'denied', or 'prompt'."
            ],
            [
                "PushManager.subscribe()",
                "Subscribes to a push service. It returns a Promise that resolves to a PushSubscription object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription."
            ],
            [
                "PushManager.hasPermission()",
                "Returns a Promise that resolves to the PushPermissionStatus of the requesting webapp, which will be one of granted, denied, or default. Replaced by PushManager.permissionState()."
            ],
            [
                "PushManager.register()",
                "Subscribes to a push subscription. Replaced by PushManager.subscribe()."
            ],
            [
                "PushManager.registrations()",
                "Retrieves existing push subscriptions. Replaced by PushManager.getSubscription()."
            ],
            [
                "PushManager.unregister()",
                "Unregisters and deletes a specified subscription endpoint. In the updated API, a subscription is unregistered by calling the PushSubscription.unsubscribe() method."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PushMessageData",
        "",
        "PushMessageData",
        "",
        [
            [
                "PushMessageData.arrayBuffer()",
                "Extracts the data as an ArrayBuffer object."
            ],
            [
                "PushMessageData.blob()",
                "Extracts the data as a Blob object."
            ],
            [
                "PushMessageData.json()",
                "Extracts the data as a JSON object."
            ],
            [
                "PushMessageData.text()",
                "Extracts the data as a plain text string."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PushSubscription",
        "",
        "PushSubscription",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "PushSubscription.endpoint Read only",
                "A USVString containing the endpoint associated with the push subscription."
            ],
            [
                "PushSubscription.expirationTime Read only",
                "A DOMHighResTimeStamp of the subscription expiration time associated with the push subscription, if there is one, or null otherwise."
            ],
            [
                "PushSubscription.options Read only",
                "An object containing the options used to create the subscription."
            ],
            [
                "PushSubscription.subscriptionId Read only",
                "A DOMString containing the subscription ID associated with the push subscription."
            ],
            [
                "PushSubscription.getKey()",
                "Returns an ArrayBuffer which contains the client's public key, which can then be sent to a server and used in encrypting push message data."
            ],
            [
                "PushSubscription.toJSON()",
                "Standard serializer — returns a JSON representation of the subscription properties."
            ],
            [
                "PushSubscription.unsubscribe()",
                "Starts the asynchronous process of unsubscribing from the push service, returning a Promise that resolves to a Boolean when the current subscription is successfully unregistered."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/PushSubscriptionOptions",
        "",
        "PushSubscriptionOptions",
        "The PushSubscriptionOptions interface of the Push API represents the options associated with a push subscription.",
        [
            [
                "PushSubscriptionOptions.userVisibleOnlyRead only",
                "A Boolean indicating that the returned push subscription will only be used for messages whose effect is made visible to the user."
            ],
            [
                "PushSubscriptionOptions.applicationServerKeyRead only",
                "A public key your push server will use to send messages to client apps via a push server."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RadioNodeList",
        "",
        "RadioNodeList",
        "The RadioNodeList interface represents a collection of radio elements in a <form> or a <fieldset> element.",
        [
            [
                "RadioNodeList.value",
                "If the underlying element collection contains radio buttons, the value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Range",
        "",
        "Range",
        "",
        [
            [
                "Range.collapsed Read only",
                "Returns a Boolean indicating whether the range's start and end points are at the same position."
            ],
            [
                "Range.commonAncestorContainer Read only",
                "Returns the deepest Node that contains the startContainer and endContainer nodes."
            ],
            [
                "Range.endContainer Read only",
                "Returns the Node within which the Range ends."
            ],
            [
                "Range.endOffset Read only",
                "Returns a number representing where in the endContainer the Range ends."
            ],
            [
                "Range.startContainer Read only",
                "Returns the Node within which the Range starts."
            ],
            [
                "Range.startOffset Read only",
                "Returns a number representing where in the startContainer the Range starts."
            ],
            [
                "Range()",
                "Returns a Range object with the global Document as its start and end."
            ],
            [
                "Range.setStart()",
                "Sets the start position of a Range."
            ],
            [
                "Range.setEnd()",
                "Sets the end position of a Range."
            ],
            [
                "Range.setStartBefore()",
                "Sets the start position of a Range relative to another Node."
            ],
            [
                "Range.setStartAfter()",
                "Sets the start position of a Range relative to another Node."
            ],
            [
                "Range.setEndBefore()",
                "Sets the end position of a Range relative to another Node."
            ],
            [
                "Range.setEndAfter()",
                "Sets the end position of a Range relative to another Node."
            ],
            [
                "Range.selectNode()",
                "Sets the Range to contain the Node and its contents."
            ],
            [
                "Range.selectNodeContents()",
                "Sets the Range to contain the contents of a Node."
            ],
            [
                "Range.collapse()",
                "Collapses the Range to one of its boundary points."
            ],
            [
                "Range.cloneContents()",
                "Returns a DocumentFragment copying the nodes of a Range."
            ],
            [
                "Range.deleteContents()",
                "Removes the contents of a Range from the Document."
            ],
            [
                "Range.extractContents()",
                "Moves contents of a Range from the document tree into a DocumentFragment."
            ],
            [
                "Range.insertNode()",
                "Insert a Node at the start of a Range."
            ],
            [
                "Range.surroundContents()",
                "Moves content of a Range into a new Node."
            ],
            [
                "Range.compareBoundaryPoints()",
                "Compares the boundary points of the Range with another Range."
            ],
            [
                "Range.cloneRange()",
                "Returns a Range object with boundary points identical to the cloned Range."
            ],
            [
                "Range.detach()",
                "Releases the Range from use to improve performance."
            ],
            [
                "Range.toString()",
                "Returns the text of the Range."
            ],
            [
                "Range.compareNode()",
                "Returns a constant representing whether the Node is before, after, inside, or surrounding the range."
            ],
            [
                "Range.comparePoint()",
                "Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the Range."
            ],
            [
                "Range.createContextualFragment()",
                "Returns a DocumentFragment created from a given string of code."
            ],
            [
                "Range.getBoundingClientRect()",
                "Returns a DOMRect object which bounds the entire contents of the Range; this would be the union of all the rectangles returned by range.getClientRects()."
            ],
            [
                "Range.getClientRects()",
                "Returns a list of DOMRect objects that aggregates the results of Element.getClientRects() for all the elements in the Range."
            ],
            [
                "Range.intersectsNode()",
                "Returns a boolean indicating whether the given node intersects the Range."
            ],
            [
                "Range.isPointInRange()",
                "Returns a boolean indicating whether the given point is in the Range."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReadableByteStreamController",
        "",
        "ReadableByteStreamController",
        "",
        [
            [
                "ReadableByteStreamController.byobRequest Read only",
                "Returns the current BYOB pull request."
            ],
            [
                "ReadableByteStreamController.desiredSize Read only",
                "Returns the desired size required to fill the stream's internal queue."
            ],
            [
                "ReadableByteStreamController.close()",
                "Closes the associated stream."
            ],
            [
                "ReadableByteStreamController.enqueue()",
                "Enqueues a given chunk in the associated stream."
            ],
            [
                "ReadableByteStreamController.error()",
                "Causes any future interactions with the associated stream to error."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReadableStream",
        "",
        "ReadableStream",
        "",
        [
            [
                "ReadableStream()",
                "Creates and returns a readable stream object from the given handlers."
            ],
            [
                "ReadableStream.locked Read only",
                "The locked getter returns whether or not the readable stream is locked to a reader."
            ],
            [
                "ReadableStream.cancel()",
                "Returns a Promise that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it."
            ],
            [
                "ReadableStream.getReader()",
                "Creates a reader and locks the stream to it. While the stream is locked, no other reader can be acquired until this one is released."
            ],
            [
                "ReadableStream.pipeThrough()",
                "Provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair."
            ],
            [
                "ReadableStream.pipeTo()",
                "Pipes the current ReadableStream to a given WritableStream and returns a Promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered."
            ],
            [
                "ReadableStream.tee()",
                "The tee method tees this readable stream, returning a two-element array containing the two resulting branches as new ReadableStream instances. Each of those streams receives the same incoming data."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReadableStreamBYOBReader",
        "",
        "ReadableStreamBYOBReader",
        "",
        [
            [
                "ReadableStreamBYOBReader()",
                "Creates and returns a ReadableStreamBYOBReader object instance."
            ],
            [
                "ReadableStreamBYOBReader.closed Read only",
                "Returns a Promise that fulfills when the stream closes or the reader's lock is released, or rejects if the stream throws an error. This property enables you to write code that responds to an end to the streaming process."
            ],
            [
                "ReadableStreamBYOBReader.cancel()",
                "Returns a Promise that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it."
            ],
            [
                "ReadableStreamBYOBReader.read()",
                "Returns a Promise that resolves with an object indicating the state of the stream: either the next chunk in the stream or an indication that the stream is closed."
            ],
            [
                "ReadableStreamBYOBReader.releaseLock()",
                "Releases the reader's lock on the stream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReadableStreamBYOBRequest",
        "",
        "ReadableStreamBYOBRequest",
        "",
        [
            [
                "ReadableStreamBYOBRequest.view Read only",
                "Returns the current view."
            ],
            [
                "ReadableStreamBYOBRequest.respond()",
                "xxx"
            ],
            [
                "ReadableStreamBYOBRequest.respondWithNewView()",
                "xxx"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReadableStreamDefaultController",
        "",
        "ReadableStreamDefaultController",
        "",
        [
            [
                "ReadableStreamDefaultController.desiredSize Read only",
                "Returns the desired size required to fill the stream's internal queue."
            ],
            [
                "ReadableStreamDefaultController.close()",
                "Closes the associated stream."
            ],
            [
                "ReadableStreamDefaultController.enqueue()",
                "Enqueues a given chunk in the associated stream."
            ],
            [
                "ReadableStreamDefaultController.error()",
                "Causes any future interactions with the associated stream to error."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReadableStreamDefaultReader",
        "",
        "ReadableStreamDefaultReader",
        "",
        [
            [
                "ReadableStreamDefaultReader()",
                "Creates and returns a ReadableStreamDefaultReader object instance."
            ],
            [
                "ReadableStreamDefaultReader.closed Read only",
                "Returns a Promise that fulfills when the stream closes or the reader's lock is released, or rejects if the stream throws an error. This property enables you to write code that responds to an end to the streaming process."
            ],
            [
                "ReadableStreamDefaultReader.cancel()",
                "Returns a Promise that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it."
            ],
            [
                "ReadableStreamDefaultReader.read()",
                "Returns a promise providing access to the next chunk in the stream's internal queue."
            ],
            [
                "ReadableStreamDefaultReader.releaseLock()",
                "Releases the reader's lock on the stream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RelativeOrientationSensor",
        "",
        "RelativeOrientationSensor",
        "The RelativeOrientationSensor interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.",
        [
            [
                "RelativeOrientationSensor()",
                "Creates a new RelativeOrientationSensor object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RemotePlayback",
        "",
        "RemotePlayback",
        "The RemotePlayback interface of the Remote Playback API allows the page to detect availability of remote playback devices, then connect to and control playing on these devices.",
        [
            [
                "RemotePlayback.stateRead only",
                "Represents the RemotePlayback connection's state. One of: \"connecting\" The user agent is attempting to initiate remote playback with the selected device. \"connected\" The transition from local to remote playback has happened, all commands will now take place on the remote device. \"disconnected\" The remote playback has not been initiated, has failed to initiate, or has been stopped."
            ],
            [
                "\"connecting\"",
                "The user agent is attempting to initiate remote playback with the selected device."
            ],
            [
                "\"connected\"",
                "The transition from local to remote playback has happened, all commands will now take place on the remote device."
            ],
            [
                "\"disconnected\"",
                "The remote playback has not been initiated, has failed to initiate, or has been stopped."
            ],
            [
                "RemotePlayback.onconnecting",
                "Fired when the user agent initiates remote playback."
            ],
            [
                "RemotePlayback.onconnect",
                "Fired when the user agent successfully connects to the remote device."
            ],
            [
                "RemotePlayback.ondisconnect",
                "Fired when the user agent disconnects from the remote device."
            ],
            [
                "RemotePlayback.watchAvailability()",
                "A Promise that resolves with a callbackId of an available remote playback device."
            ],
            [
                "RemotePlayback.cancelWatchAvailability()",
                "Cancels the request to monitor the availability of remote playback devices."
            ],
            [
                "RemotePlayback.prompt()",
                "Prompts the user to select and give permission to connect to a remote playbabk device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Report",
        "",
        "Report",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Report.body Read only",
                "The body of the report, which is a ReportBody object containing the detailed report information."
            ],
            [
                "Report.type Read only",
                "The type of report generated, e.g. deprecation or intervention."
            ],
            [
                "Report.url Read only",
                "The URL of the document that generated the report."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReportBody",
        "",
        "ReportBody",
        "The ReportBody interface of the Reporting API represents the body of a report. Individual report types inherit from this interface, adding specific attributes relevant to the particular report.",
        [
            [
                "ReportBody.toJSON()",
                "A serializer which returns a JSON representation of the ReportBody object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReportingObserver",
        "",
        "ReportingObserver",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "ReportingObserver()",
                "Creates a new ReportingObserver object instance, which can be used to collect and access reports."
            ],
            [
                "ReportingObserver.disconnect()",
                "Stops a reporting observer that had previously started observing from collecting reports."
            ],
            [
                "ReportingObserver.observe()",
                "Instructs a reporting observer to start collecting reports in its report queue."
            ],
            [
                "ReportingObserver.takeRecords()",
                "Returns the current list of reports contained in the observer's report queue, and empties the queue."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ReportingObserverOptions",
        "",
        "ReportingObserverOptions",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "types",
                "An array of strings representing the types of report to be collected by this observer. Available types include deprecation, intervention, and crash."
            ],
            [
                "buffered",
                "A boolean that defines whether the reports that were generated before the observer was able to be created should be observable (true) or not (false)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Request",
        "",
        "Request",
        "The Request interface of the Fetch API represents a resource request.",
        [
            [
                "Request()",
                "Creates a new Request object."
            ],
            [
                "Request.body Read only",
                "A ReadableStream of the body contents."
            ],
            [
                "Request.bodyUsed Read only",
                "Stores true or false to indicate whether or not the body has been used in a request yet."
            ],
            [
                "Request.cache Read only",
                "Contains the cache mode of the request (e.g., default, reload, no-cache)."
            ],
            [
                "Request.credentials Read only",
                "Contains the credentials of the request (e.g., omit, same-origin, include). The default is same-origin."
            ],
            [
                "Request.destination Read only",
                "Returns a string describing the request's destination. This is a string indicating the type of content being requested."
            ],
            [
                "Request.headers Read only",
                "Contains the associated Headers object of the request."
            ],
            [
                "Request.integrity Read only",
                "Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=)."
            ],
            [
                "Request.method Read only",
                "Contains the request's method (GET, POST, etc.)"
            ],
            [
                "Request.mode Read only",
                "Contains the mode of the request (e.g., cors, no-cors, same-origin, navigate.)"
            ],
            [
                "Request.redirect Read only",
                "Contains the mode for how redirects are handled. It may be one of follow, error, or manual."
            ],
            [
                "Request.referrer Read only",
                "Contains the referrer of the request (e.g., client)."
            ],
            [
                "Request.referrerPolicy Read only",
                "Contains the referrer policy of the request (e.g., no-referrer)."
            ],
            [
                "Request.url Read only",
                "Contains the URL of the request."
            ],
            [
                "Request.arrayBuffer()",
                "Returns a promise that resolves with an ArrayBuffer representation of the request body."
            ],
            [
                "Request.blob()",
                "Returns a promise that resolves with a Blob representation of the request body."
            ],
            [
                "Request.clone()",
                "Creates a copy of the current Request object."
            ],
            [
                "Request.formData()",
                "Returns a promise that resolves with a FormData representation of the request body."
            ],
            [
                "Request.json()",
                "Returns a promise that resolves with the result of parsing the request body as JSON."
            ],
            [
                "Request.text()",
                "Returns a promise that resolves with a text representation of the request body."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ResizeObserver",
        "",
        "ResizeObserver",
        "The ResizeObserver interface reports changes to the dimensions of an Element's content or border box, or the bounding box of an SVGElement.",
        [
            [
                "ResizeObserver()",
                "Creates and returns a new ResizeObserver object."
            ],
            [
                "ResizeObserver.disconnect()",
                "Unobserves all observed Element targets of a particular observer."
            ],
            [
                "ResizeObserver.observe()",
                "Initiates the observing of a specified Element."
            ],
            [
                "ResizeObserver.unobserve()",
                "Ends the observing of a specified Element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ResizeObserverEntry",
        "",
        "ResizeObserverEntry",
        "The ResizeObserverEntry interface represents the object passed to the ResizeObserver() constructor's callback function, which allows you to access the new dimensions of the Element or SVGElement being observed.",
        [
            [
                "ResizeObserverEntry.borderBoxSize Read only",
                "An object containing the new border box size of the observed element when the callback is run."
            ],
            [
                "ResizeObserverEntry.contentBoxSize Read only",
                "An object containing the new content box size of the observed element when the callback is run."
            ],
            [
                "ResizeObserverEntry.devicePixelContentBoxSize Read only",
                "An object containing the new content box size in device pixels of the observed element when the callback is run."
            ],
            [
                "ResizeObserverEntry.contentRect Read only",
                "A DOMRectReadOnly object containing the new size of the observed element when the callback is run. Note that this is better supported than the above two properties, but it is left over from an earlier implementation of the Resize Observer API, is still included in the spec for web compat reasons, and may be deprecated in future versions."
            ],
            [
                "ResizeObserverEntry.target Read only",
                "A reference to the Element or SVGElement being observed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ResizeObserverSize",
        "",
        "ResizeObserverSize",
        "The ResizeObserverSize interface of the Resize Observer API is used by the ResizeObserverEntry interface to access the box sizing properties of the element being observed.",
        [
            [
                "ResizeObserverSize.blockSizeRead only",
                "The length of the observed element's border box in the block dimension. For boxes with a horizontal writing-mode, this is the vertical dimension, or height; if the writing-mode is vertical, this is the horizontal dimension, or width."
            ],
            [
                "ResizeObserverSize.inlineSizeRead only",
                "The length of the observed element's border box in the inline dimension. For boxes with a horizontal writing-mode, this is the horizontal dimension, or width; if the writing-mode is vertical, this is the vertical dimension, or height."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Response",
        "",
        "Response",
        "The Response interface of the Fetch API represents the response to a request.",
        [
            [
                "Response()",
                "Creates a new Response object."
            ],
            [
                "Response.body Read only",
                "A ReadableStream of the body contents."
            ],
            [
                "Response.bodyUsed Read only",
                "Stores a Boolean that declares whether the body has been used in a response yet."
            ],
            [
                "Response.headers Read only",
                "The Headers object associated with the response."
            ],
            [
                "Response.ok Read only",
                "A boolean indicating whether the response was successful (status in the range 200–299) or not."
            ],
            [
                "Response.redirected Read only",
                "Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry)."
            ],
            [
                "Response.status Read only",
                "The status code of the response. (This will be 200 for a success)."
            ],
            [
                "Response.statusText Read only",
                "The status message corresponding to the status code. (e.g., OK for 200)."
            ],
            [
                "Response.trailers",
                "A Promise resolving to a Headers object, associated with the response with Response.headers for values of the HTTP Trailer header."
            ],
            [
                "Response.type Read only",
                "The type of the response (e.g., basic, cors)."
            ],
            [
                "Response.url Read only",
                "The URL of the response."
            ],
            [
                "Response.arrayBuffer()",
                "Returns a promise that resolves with an ArrayBuffer representation of the response body."
            ],
            [
                "Response.blob()",
                "Returns a promise that resolves with a Blob representation of the response body."
            ],
            [
                "Response.clone()",
                "Creates a clone of a Response object."
            ],
            [
                "Response.error()",
                "Returns a new Response object associated with a network error."
            ],
            [
                "Response.formData()",
                "Returns a promise that resolves with a FormData representation of the response body."
            ],
            [
                "Response.json()",
                "Returns a promise that resolves with the result of parsing the response body text as JSON."
            ],
            [
                "Response.redirect()",
                "Creates a new response with a different URL."
            ],
            [
                "Response.text()",
                "Returns a promise that resolves with a text representation of the response body."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RsaHashedImportParams",
        "",
        "RsaHashedImportParams",
        "The RsaHashedImportParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when importing any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.",
        [
            [
                "name",
                "A DOMString. This should be set to RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP, depending on the algorithm you want to use."
            ],
            [
                "hash",
                "A DOMString representing the name of the digest function to use. This can be one of SHA-256, SHA-384, or SHA-512. Warning: Although you can technically pass SHA-1 here, this is strongly discouraged as it is considered vulnerable."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RsaHashedKeyGenParams",
        "",
        "RsaHashedKeyGenParams",
        "The RsaHashedKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.",
        [
            [
                "name",
                "A DOMString. This should be set to RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP, depending on the algorithm you want to use."
            ],
            [
                "modulusLength",
                "A Number. The length in bits of the RSA modulus. This should be at least 2048: see for example see NIST SP 800-131A Rev. 1. Some organizations are now recommending that it should be 4096."
            ],
            [
                "publicExponent",
                "A Uint8Array. The public exponent. Unless you have a good reason to use something else, specify 65537 here ([0x01, 0x00, 0x01])."
            ],
            [
                "hash",
                "A DOMString representing the name of the digest function to use. You can pass any of SHA-256, SHA-384, or SHA-512 here. Warning: Although you can technically pass SHA-1 as a value here, this is strongly discouraged as SHA-1 is considered vulnerable."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RsaOaepParams",
        "",
        "RsaOaepParams",
        "The RsaOaepParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the RSA_OAEP algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to RSA-OAEP."
            ],
            [
                "label Optional",
                "A BufferSource — an array of bytes that does not itself need to be encrypted but which should be bound to the ciphertext. A digest of the label is part of the input to the encryption operation. Unless your application calls for a label, you can just omit this argument and it will not affect the security of the encryption operation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RsaPssParams",
        "",
        "RsaPssParams",
        "The RsaPssParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify(), when using the RSA-PSS algorithm.",
        [
            [
                "name",
                "A DOMString. This should be set to RSA-PSS."
            ],
            [
                "saltLength",
                "A long integer representing the length of the random salt to use, in bytes. RFC 3447 says that \"Typical salt lengths\" are either 0 or the length of the output of the digest algorithm that was selected when this key was generated. For example, if you use SHA-256 as the digest algorithm, this could be 32. The maximum size of saltLength is given by: Math.ceil((keySizeInBits - 1)/8) - digestSizeInBytes - 2 So for a key length of 2048 bits and a digest output size of 32 bytes, the maximum size would be 222."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCAnswerOptions",
        "",
        "RTCAnswerOptions",
        "The RTCAnswerOptions dictionary is used to provide optional settings when creating an SDP answer using RTCPeerConnection.createOffer() after receiving an offer from a remote peer. The createOffer() method's options parameter is of this type.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCCertificate",
        "",
        "RTCCertificate",
        "",
        [
            [
                "RTCCertificate.expires Read only",
                "Returns the expiration date of the certificate."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCConfiguration",
        "",
        "RTCConfiguration",
        "",
        [
            [
                "bundlePolicy Optional",
                "Specifies how to handle negotiation of candidates when the remote peer is not compatible with the SDP BUNDLE standard. If the remote endpoint is BUNDLE-aware, all media tracks and data channels are bundled onto a single transport at the completion of negotiation, regardless of policy used, and any superfluous transports that were created initially are closed at that point. In technical terms, a BUNDLE lets all media flow between two peers flow across a single 5-tuple; that is, from a single IP and port on one peer to a single IP and port on the other peer, using the same transport protocol. This must be one of the following string values, if not balanced is assumed: balanced The ICE agent initially creates one RTCDtlsTransport for each type of content added: audio, video, and data channels. If the remote endpoint is not BUNDLE-aware, then each of these DTLS transports handles all the communication for one type of data. max-compat The ICE agent initially creates one RTCDtlsTransport per media track and a separate one for data channels. If the remote endpoint is not BUNDLE-aware, everything is negotiated on these separate DTLS transports. max-bundle The ICE agent initially creates only a single RTCDtlsTransport to carry all of the RTCPeerConnection's data. If the remote endpoint is not BUNDLE-aware, then only a single track will be negotiated and the rest ignored."
            ],
            [
                "balanced",
                "The ICE agent initially creates one RTCDtlsTransport for each type of content added: audio, video, and data channels. If the remote endpoint is not BUNDLE-aware, then each of these DTLS transports handles all the communication for one type of data."
            ],
            [
                "max-compat",
                "The ICE agent initially creates one RTCDtlsTransport per media track and a separate one for data channels. If the remote endpoint is not BUNDLE-aware, everything is negotiated on these separate DTLS transports."
            ],
            [
                "max-bundle",
                "The ICE agent initially creates only a single RTCDtlsTransport to carry all of the RTCPeerConnection's data. If the remote endpoint is not BUNDLE-aware, then only a single track will be negotiated and the rest ignored."
            ],
            [
                "certificates Optional",
                "An Array of objects of type RTCCertificate which are used by the connection for authentication. If this property isn't specified, a set of certificates is generated automatically for each RTCPeerConnection instance. Although only one certificate is used by a given connection, providing certificates for multiple algorithms may improve the odds of successfully connecting in some circumstances. See Using certificates for further information. This configuration option cannot be changed after it is first specified; once the certificates have been set, this property is ignored in future calls to RTCPeerConnection.setConfiguration()."
            ],
            [
                "iceCandidatePoolSize Optional",
                "An unsigned 16-bit integer value which specifies the size of the prefetched ICE candidate pool. The default value is 0 (meaning no candidate prefetching will occur). You may find in some cases that connections can be established more quickly by allowing the ICE agent to start fetching ICE candidates before you start trying to connect, so that they're already available for inspection when RTCPeerConnection.setLocalDescription() is called. Changing the size of the ICE candidate pool may trigger the beginning of ICE gathering."
            ],
            [
                "iceServers Optional",
                "An array of RTCIceServer objects, each describing one server which may be used by the ICE agent; these are typically STUN and/or TURN servers. If this isn't specified, the connection attempt will be made with no STUN or TURN server available, which limits the connection to local peers."
            ],
            [
                "iceTransportPolicy Optional",
                "The current ICE transport policy; if the policy isn't specified, all is assumed by default, allowing all candidates to be considered. Possible values are: \"all\" All ICE candidates will be considered. \"public\" Only ICE candidates with public IP addresses will be considered. Removed from the specification's May 13, 2016 working draft. \"relay\" Only ICE candidates whose IP addresses are being relayed, such as those being passed through a STUN or TURN server, will be considered."
            ],
            [
                "peerIdentity Optional",
                "A DOMString which specifies the target peer identity for the RTCPeerConnection. If this value is set (it defaults to null), the RTCPeerConnection will not connect to a remote peer unless it can successfully authenticate with the given name."
            ],
            [
                "rtcpMuxPolicy Optional",
                "The RTCP mux policy to use when gathering ICE candidates, in order to support non-multiplexed RTCP. Possible values are: negotiate Instructs the ICE agent to gather both RTP and RTCP candidates. If the remote peer can multiplex RTCP, then RTCP candidates are multiplexed atop the corresponding RTP candidates. Otherwise, both the RTP and RTCP candidates are returned, separately. require Tells the ICE agent to gather ICE candidates for only RTP, and to multiplex RTCP atop them. If the remote peer doesn't support RTCP multiplexing, then session negotiation fails. This is the default value."
            ],
            [
                "negotiate",
                "Instructs the ICE agent to gather both RTP and RTCP candidates. If the remote peer can multiplex RTCP, then RTCP candidates are multiplexed atop the corresponding RTP candidates. Otherwise, both the RTP and RTCP candidates are returned, separately."
            ],
            [
                "require",
                "Tells the ICE agent to gather ICE candidates for only RTP, and to multiplex RTCP atop them. If the remote peer doesn't support RTCP multiplexing, then session negotiation fails. This is the default value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCDataChannel",
        "",
        "RTCDataChannel",
        "",
        [
            [
                "binaryType",
                "Is a string specifying the type of object that should be used to represent binary data received on the RTCDataChannel. Values are the same as allowed on the WebSocket.binaryType property: blob if Blob objects are being used, or arraybuffer if ArrayBuffer objects are being used. The default is blob."
            ],
            [
                "bufferedAmount Read only",
                "Returns the number of bytes of data currently queued to be sent over the data channel."
            ],
            [
                "bufferedAmountLowThreshold",
                "Specifies the number of bytes of buffered outgoing data that is considered \"low\". The default value is 0."
            ],
            [
                "id Read only",
                "Returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel."
            ],
            [
                "label Read only",
                "Returns a string that contains a name describing the data channel. These labels are not required to be unique."
            ],
            [
                "maxPacketLifeTime Read only",
                "Returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or null."
            ],
            [
                "maxRetransmits Read only",
                "Returns the maximum number of times the browser should try to retransmit a message before giving up, as set when the data channel was created, or null, which indicates that there is no maximum."
            ],
            [
                "negotiated Read only",
                "Indicates whether the RTCDataChannel's connection was negotiated by the Web app (true) or by the WebRTC layer (false). The default is false."
            ],
            [
                "ordered Read only",
                "Indicates whether or not the data channel guarantees in-order delivery of messages; the default is true, which indicates that the data channel is indeed ordered."
            ],
            [
                "protocol Read only",
                "Returns a string containing the name of the subprotocol in use. If no protocol was specified when the data channel was created, then this property's value is the empty string (\"\")."
            ],
            [
                "readyState Read only",
                "Returns a string which indicates the state of the data channel's underlying data connection. It can have on of the following values: connecting, open, closing, or closed."
            ],
            [
                "onbufferedamountlow",
                "Is an event handler which specifies a function the browser calls when thebufferedamountlow event is sent to the data channel."
            ],
            [
                "onclose",
                "Is an event handler which specifies a function to be called by the browser when the close event is received by the data channel."
            ],
            [
                "onclose",
                "Is an event handler which specifies a function to be called by the browser when the closing event is received by the data channel."
            ],
            [
                "onerror",
                "Is an event handler which specifies a function to be called when the error event is received."
            ],
            [
                "onmessage",
                "Is an event handler which specifies a function to be called when the message event is fired on the channel."
            ],
            [
                "onopen",
                "Is an event handler which specifies a function to be called when the open event is fired on the"
            ],
            [
                "reliable Read only This is an obsolete API and is no longer guaranteed to work.",
                "Indicates whether or not the data channel is reliable."
            ],
            [
                "stream Read only This is an obsolete API and is no longer guaranteed to work.",
                "Returns an ID number (between 0 and 65,535) which uniquely identifies the data channel."
            ],
            [
                "close()",
                "Closes theRTCDataChannel. Either peer is permitted to call this method to initiate closure of the channel."
            ],
            [
                "send()",
                "Sends data across the data channel to the remote peer."
            ],
            [
                "bufferedamountlow",
                "Sent when the number of bytes of data in the outgoing data buffer falls below the value specified by bufferedAmountLowThreshold. Also available as the onbufferedamountlow event handler property."
            ],
            [
                "close",
                "Sent when the underlying data transport closes. Also available as the onclose event handler property."
            ],
            [
                "closing",
                "Sent when the underlying data transport is about to start closing. Also available as the onclosing event handler property."
            ],
            [
                "error",
                "Sent when an error occurs on the data channel. Also available as the onerror event handler property."
            ],
            [
                "message",
                "Sent when a message has been received from the remote peer. The message contents can be found in the event's data property. Also available as the onmessage event handler property."
            ],
            [
                "open",
                "Sent when the data channel is first opened, or when an existing data channel's underlying connection re-opens. Also available as the onopen event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCDataChannelEvent",
        "",
        "RTCDataChannelEvent",
        "",
        [
            [
                "RTCDataChannelEvent()",
                "The RTCDataChannelEvent() constructor creates a new RTCDataChannelEvent."
            ],
            [
                "channel Read only",
                "The read-only property RTCDataChannelEvent.channel returns the RTCDataChannel associated with the event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCDtlsTransport",
        "",
        "RTCDtlsTransport",
        "",
        [
            [
                "iceTransport Read only",
                "The read-only RTCDtlsTransport property iceTransport contains a reference to the underlying RTCIceTransport."
            ],
            [
                "state Read only",
                "WebRTC"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCDTMFSender",
        "",
        "RTCDTMFSender",
        "The RTCDTMFSender interface provides a mechanism for transmitting DTMF codes on a WebRTC RTCPeerConnection. You gain access to the connection's RTCDTMFSender through the RTCRtpSender.dtmf property on the audio track you wish to send DTMF with.",
        [
            [
                "RTCDTMFSender.toneBuffer Read only",
                "A DOMString which contains the list of DTMF tones currently in the queue to be transmitted (tones which have already been played are no longer included in the string). See toneBuffer for details on the format of the tone buffer."
            ],
            [
                "RTCDTMFSender.insertDTMF()",
                "Given a string describing a set of DTMF codes and, optionally, the duration of and inter-tone gap between the tones, insertDTMF() starts sending the specified tones. Calling insertDTMF() replaces any already-pending tones from the toneBuffer. You can abort sending queued tones by specifying an empty string (\"\") as the set of tones to play."
            ],
            [
                "tonechange",
                "The tonechange event is sent to the RTCDTMFSender instance's event handler to indicate that a tone has either started or stopped playing. Also available using the ontonechange event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCDTMFToneChangeEvent",
        "",
        "RTCDTMFToneChangeEvent",
        "The RTCDTMFToneChangeEvent interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.",
        [
            [
                "RTCDTMFToneChangeEvent.tone Read only",
                "A DOMString specifying the tone which has begun playing, or an empty string (\"\") if the previous tone has finished playing."
            ],
            [
                "RTCDTMFToneChangeEvent()",
                "Returns a new RTCDTMFToneChangeEvent. It takes two parameters, the first being a DOMString representing the type of the event (always \"tonechange\"); the second a dictionary containing the initial state of the properties of the event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCError",
        "",
        "RTCError",
        "",
        [
            [
                "RTCError()",
                "Creates and returns a new RTCError object initialized with the properties of the provided RTCErrorInit dictionary and, optionally, a string to use as the value of the error's message property."
            ],
            [
                "errorDetail Read only",
                "A DOMString specifying the WebRTC-specific error code identifying the type of error that occurred."
            ],
            [
                "receivedAlert Read only",
                "An unsigned long integer value indicating the fatal DTLS error which was received from the network. Only valid if the errorDetail string is dtls-failure. If null, no DTLS error was received."
            ],
            [
                "sctpCauseCode Read only",
                "If errorDetail is sctp-failure, this property is a long integer specifying the SCTP cause code indicating the cause of the failed SCTP negotiation. null if the error isn't an SCTP error."
            ],
            [
                "sdpLineNumber Read only",
                "If errorDetail is sdp-syntax-error, this property is a long integer identifying the line number of the SDP on which the syntax error occurred. null if the error isn't an SDP syntax error."
            ],
            [
                "sentAlert Read only",
                "If errorDetail is dtls-failure, this property is an unsigned long integer indicating the fatal DTLS error that was sent out by this device. If null, no DTLS error was transmitted."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCErrorEvent",
        "",
        "RTCErrorEvent",
        "",
        [
            [
                "RTCErrorEvent()",
                "Creates and returns a new RTCErrorEvent object."
            ],
            [
                "error Read only",
                "An RTCError object specifying the error which occurred; this object includes the type of error that occurred, information about where the error occurred (such as which line number in the SDP or what SCTP cause code was at issue)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceCandidate",
        "",
        "RTCIceCandidate",
        "The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.",
        [
            [
                "RTCIceCandidate()",
                "Creates an RTCIceCandidate object to represent a single ICE candidate, optionally configured based on an object based on the RTCIceCandidateInit dictionary. Note: For backward compatibility, the constructor also accepts as input a string containing the value of the candidate property instead of a RTCIceCandidateInit object, since the candidate includes all of the information that RTCIceCandidateInit does and more."
            ],
            [
                "candidate Read only",
                "A DOMString representing the transport address for the candidate that can be used for connectivity checks. The format of this address is a candidate-attribute as defined in RFC 5245. This string is empty (\"\") if the RTCIceCandidate is an \"end of candidates\" indicator."
            ],
            [
                "component Read only",
                "A DOMString which indicates whether the candidate is an RTP or an RTCP candidate; its value is either \"rtp\" or \"rtcp\", and is derived from the \"component-id\" field in the candidate a-line string. The permitted values are listed in RTCIceCandidate.component."
            ],
            [
                "foundation Read only",
                "Returns a DOMString containing a unique identifier that is the same for any candidates of the same type, share the same base (the address from which the ICE agent sent the candidate), and come from the same STUN server. This is used to help optimize ICE performance while prioritizing and correlating candidates that appear on multiple RTCIceTransport objects."
            ],
            [
                "ip Read only",
                "A DOMString containing the IP address of the candidate."
            ],
            [
                "port Read only",
                "An integer value indicating the candidate's port number."
            ],
            [
                "priority Read only",
                "A long integer value indicating the candidate's priority."
            ],
            [
                "address Read only",
                "The address of the candidate."
            ],
            [
                "protocol Read only",
                "A string indicating whether the candidate's protocol is \"tcp\" or \"udp\". The string is one of those in the enumerated type RTCIceProtocol."
            ],
            [
                "relatedAddress Read only",
                "If the candidate is derived from another candidate, relatedAddress is a DOMString containing that host candidate's IP address. For host candidates, this value is null."
            ],
            [
                "relatedPort Read only",
                "For a candidate that is derived from another, such as a relay or reflexive candidate, the relatedPort is a number indicating the port number of the candidate from which this candidate is derived. For host candidates, the relatedPort property is null."
            ],
            [
                "sdpMid Read only",
                "A DOMString specifying the candidate's media stream identification tag which uniquely identifies the media stream within the component with which the candidate is associated, or null if no such association exists."
            ],
            [
                "sdpMLineIndex Read only",
                "If not null, sdpMLineIndex indicates the zero-based index number of the media description (as defined in RFC 4566) in the SDP with which the candidate is associated."
            ],
            [
                "tcpType Read only",
                "If protocol is \"tcp\", tcpType represents the type of TCP candidate. Otherwise, tcpType is null."
            ],
            [
                "type Read only",
                "A DOMString indicating the type of candidate as one of the strings listed on RTCIceCandidate.type."
            ],
            [
                "usernameFragment Read only",
                "A DOMString containing a randomly-generated username fragment (\"ice-ufrag\") which ICE uses for message integrity along with a randomly-generated password (\"ice-pwd\"). You can use this string to verify generations of ICE generation; each generation of the same ICE process will use the same usernameFragment, even across ICE restarts."
            ],
            [
                "toJSON()",
                "Given the RTCIceCandidate's current configuration, toJSON() returns a DOMString containing a JSON representation of that configuration in the form of a RTCIceCandidateInit object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceCandidateInit",
        "",
        "RTCIceCandidateInit",
        "The WebRTC API's RTCIceCandidateInit dictionary, which contains the information needed to fundamentally describe an RTCIceCandidate. RTCIceCandidateInit is used when using new RTCIceCandidate() to create a new ICE candidate object. It's also used as the return value from the RTCIceCandidate.toJSON() method, and can be passed directly into RTCPeerConnection.addIceCandidate() to add a candidate to the peer connection.",
        [
            [
                "candidate Optional",
                "The ICE candidate-attribute. If the candidate is an indicator that there are no further candidates (rather than representing a new candidate), this is the empty string (\"\"). The default is the empty string."
            ],
            [
                "sdpMid Optional",
                "The identification tag of the media stream with which the candidate is associated, or null if there is no associated media stream. The default is null."
            ],
            [
                "sdpMLineIndex Optional",
                "The zero-based index of the m-line within the SDP of the media description with which the candidate is associated, or null if no such associated exists. The default is null."
            ],
            [
                "usernameFragment Optional",
                "A DOMString containing a string which uniquely identifies the remote peer. This string is generated by WebRTC at the beginning of the session, and at least 24 bits worth of the string contain random data. The string may be up to 256 characters long. This property has no default value and is not present unless set explicitly."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceCandidatePair",
        "",
        "RTCIceCandidatePair",
        "The RTCIceCandidatePair dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints. It is used as the return value from RTCIceTransport.getSelectedCandidatePair() to identify the currently-selected candidate pair identified by the ICE agent.",
        [
            [
                "local",
                "An RTCIceCandidate describing the configuration of the local end of the connection."
            ],
            [
                "remote",
                "The RTCIceCandidate describing the configuration of the remote end of the connection."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceCandidatePairStats",
        "",
        "RTCIceCandidatePairStats",
        "",
        [
            [
                "availableIncomingBitrate Optional",
                "Provides an informative value representing the available inbound capacity of the network by reporting the total number of bits per second available for all of the candidate pair's incoming RTP streams. This does not take into account the size of the IP overhead, nor any other transport layers such as TCP or UDP."
            ],
            [
                "availableOutgoingBitrate Optional",
                "Provides an informative value representing the available outbound capacity of the network by reporting the total number of bits per second available for all of the candidate pair's outoing RTP streams. This does not take into account the size of the IP overhead, nor any other transport layers such as TCP or UDP."
            ],
            [
                "bytesReceieved Optional",
                "The total number of payload bytes received (that is, the total number of bytes received minus any headers, padding, or other administrative overhead) on this candidate pair so far."
            ],
            [
                "bytesSent Optional",
                "The total number of payload bytes sent (that is, the total number of bytes sent minus any headers, padding, or other administrative overhead) so far on this candidate pair."
            ],
            [
                "circuitBreakerTriggerCount Optional",
                "An integer value indicating the number of times the circuit-breaker has been triggered for this particular 5-tuple (the set of five values comprising a TCP connection: source IP address, source port number, destination IP address, destination port number, and protocol). The circuit breaker is triggered whenever a connection times out or otherwise needs to be automatically aborted."
            ],
            [
                "consentExpiredTimestamp Optional",
                "A DOMHighResTimeStamp value indicating the time at which the most recent STUN binding response expired. This value is undefined if no valid STUN binding responses have been sent on the candidate pair; this can only happen if responsesReceived is 0."
            ],
            [
                "consentRequestsSent Optional",
                "The total number of consent requests that have been sent on this candidate pair."
            ],
            [
                "currentRoundTripTime Optional",
                "A floating-point value indicating the total time, in seconds, that elapsed between the most recently-sent STUN request and the response being received. This may be based upon requests that were involved in confirming permission to open the connection."
            ],
            [
                "firstRequestTimestamp Optional",
                "A DOMHighResTimeStamp value which specifies the time at which the first STUN request was sent from the local peer to the remote peer for this candidate pair."
            ],
            [
                "lastPacketReceivedTimestamp Optional",
                "A DOMHighResTimeStamp value indicating the time at which the last packet was received by the local peer from the remote peer for this candidate pair. Timestamps are not recorded for STUN packets."
            ],
            [
                "lastPacketSentTimestamp Optional",
                "A DOMHighResTimeStamp value indicating the time at which the last packet was sent from the local peer to the remote peer for this candidate pair. Timestamps are not recorded for STUN packets."
            ],
            [
                "lastRequestTimestamp Optional",
                "A DOMHighResTimeStamp value which specifies the time at which the last (most recent) STUN request was sent from the local peer to the remote peer for this candidate pair."
            ],
            [
                "lastResponseTimestamp Optional",
                "A DOMHighResTimeStamp value that specifies the time at which the last (most recent) STUN response was received by the local candidate from the remote candidate in this pair."
            ],
            [
                "localCandidateId Optional",
                "The unique ID string corresponding to the RTCIceCandidate from the data included in the RTCIceCandidateStats object providing statistics for the candidate pair's local candidate."
            ],
            [
                "nominated Optional",
                "A Boolean value which, if true, indicates that the candidate pair described by this object is one which has been proposed for use, and will be (or was) used if its priority is the highest among the nominated candidate pairs. See RFC 5245, section 7.1.3.2.4 for details."
            ],
            [
                "packetsReceived Optional",
                "The total number of packets received on this candidate pair."
            ],
            [
                "packetsSent Optional",
                "The total number of packets sent on this candidate pair."
            ],
            [
                "remoteCandidateId Optional",
                "The unique ID string corresponding to the remote candidate from which data was taken to construct the RTCIceCandidateStats object describing the remote end of the connection."
            ],
            [
                "requestsReceived Optional",
                "The total number of connectivity check requests that have been received, including retransmissions. This value includes both connectivity checks and STUN consent checks."
            ],
            [
                "requestsSent Optional",
                "The total number of connectivity check requests that have been sent, not including retransmissions."
            ],
            [
                "responsesReceived Optional",
                "The total number of connectivity check responses that have been received."
            ],
            [
                "responsesSent Optional",
                "The total number of connectivity check responses that have been sent. This includes both connectivity check requests and STUN consent requests."
            ],
            [
                "retransmissionsReceived Optional",
                "The total number of times connectivity check request retransmissions were received. A retransmission is a connectivity check request whose TRANSACTION_TRANSMIT_COUNTER attribute's req field is greater than 1."
            ],
            [
                "retransmissionsSent Optional",
                "The total number of times connectivity check request retransmissions were sent."
            ],
            [
                "state Optional",
                "A RTCStatsIceCandidatePairState object which indicates the state of the connection between the two candidates."
            ],
            [
                "totalRoundTripTime Optional",
                "A floating-point value indicating the total time, in seconds, that has elapsed between sending STUN requests and receiving responses to them, for all such requests made to date on this candidate pair. This includes botyh connectivity check and consent check requests. You can compute the average round trip time (RTT) by dividing this value by responsesReceived."
            ],
            [
                "transportId Optional",
                "A DOMString that uniquely identifies the RTCIceTransport that was inspected to obtain the transport-related statistics (as found in RTCTransportStats) used in generating this object."
            ],
            [
                "priority Optional",
                "An integer value indicating the candidate pair's priority."
            ],
            [
                "readable Optional",
                "A Boolean value indicating whether or not data can be sent over the connection described by the candidate pair."
            ],
            [
                "writable Optional",
                "A Boolean value indicating whether or not data can be received on the connection described by the candidate pair."
            ],
            [
                "selected Optional",
                "A Firefox-specific Boolean value which is true if the candidate pair described by this object is the one currently in use. The spec-compliant way to determine the selected candidate pair is to look for a stats object of type transport, which is an RTCTransportStats object. That object's selectedCandidatePairId property indicates whether or not the specified transport is the one being used."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceCandidateStats",
        "",
        "RTCIceCandidateStats",
        "The WebRTC API's RTCIceCandidateStats dictionary provides statistics related to an RTCIceCandidate.",
        [
            [
                "address Optional",
                "A string containing the address of the candidate. This value may be an IPv4 address, an IPv6 address, or a fully-qualified domain name. This property was previously named ip and only accepted IP addresses."
            ],
            [
                "candidateType Optional",
                "A string matching one of the values in RTCIceCandidate.type, indicating what kind of candidate the object provides statistics for."
            ],
            [
                "deleted Optional",
                "A Boolean value indicating whether or not the candidate has been released or deleted; the default value is false. For local candidates, it's value is true if the candidate has been deleted or released. For host candidates, true means that any network resources (usually a network socket) associated with the candidate have already been released. For TURN candidates, the TURN allocation is no longer active for deleted candidates. This property is not present for remote candidates."
            ],
            [
                "networkType Optional",
                "A string from the RTCNetworkType enumerated type which indicates the type of interface used for a local candidate. This property is only present for local candidates."
            ],
            [
                "port Optional",
                "The network port number used by the candidate."
            ],
            [
                "priority Optional",
                "The candidate's priority, corresponding to RTCIceCandidate.priority."
            ],
            [
                "protocol Optional",
                "A string specifying the protocol (tcp or udp) used to transmit data on the port."
            ],
            [
                "relayProtocol Optional",
                "A string identifying the protocol used by the endpoint for communicating with the TURN server; valid values are tcp, udp, and tls. Only present for local candidates."
            ],
            [
                "transportId Optional",
                "A string uniquely identifiying the transport object that was inspected in order to obtain the RTCTransportStats associated with the candidate correspondin to these statistics."
            ],
            [
                "url Optional",
                "For local candidates, the url property is the URL of the ICE server from which the candidate was received. This URL matches the one included in the RTCPeerConnectionIceEvent object representing the icecandidate event that delivered the candidate to the local peer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceCredentialType",
        "",
        "RTCIceCredentialType",
        "",
        [
            [
                "oauth",
                "The RTCIceServer requires the use of OAuth 2.0 to authenticate in order to use the ICE server described. This process is detailed in RFC 7635. This property was formerly called token."
            ],
            [
                "password",
                "The RTCIceServer requires a username and password to authenticate prior to using the described ICE server."
            ],
            [
                "token",
                "Authenticating with the ICE server requires the use of an OAuth 2.0 token as defined in RFC 7635. This value has been renamed to oauth."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceGathererState",
        "",
        "RTCIceGathererState",
        "The RTCIceGathererState enumerated type provides the string values which can be returned by an RTCIceTransport object's gatheringState.",
        [
            [
                "\"new\"",
                "The RTCIceTransport is newly created and has not yet started to gather ICE candidates."
            ],
            [
                "\"gathering\"",
                "The transport is in the process of gathering candidates."
            ],
            [
                "\"complete\"",
                "The transport has finished gathering ICE candidates and has sent the end-of-candidates indicator to the remote device. The transport won't gather any further candidates unless an ICE restart occurs, at which point the gathering process starts over from scratch."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceParameters",
        "",
        "RTCIceParameters",
        "The RTCIceParameters dictionary specifies the username fragment and password assigned to an ICE session. During ICE negotiation, each peer's username fragment and password are recorded in an RTCIceParameters object, which can be obtained from the RTCIceTransport by calling its getLocalParameters() or getRemoteParameters() method, depending on which end interests you.",
        [
            [
                "usernameFragment",
                "A DOMString specifying the value of the ICE session's username fragment field, ufrag."
            ],
            [
                "password",
                "A DOMString specifying the session's password string."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceProtocol",
        "",
        "RTCIceProtocol",
        "The WebRTC API's RTCIceProtocol enumerated type provides a set of DOMString values representing the names of the transport protocols ICE candidates can use. These strings are taken directly from the candidate a-line in SDP.",
        [
            [
                "tcp",
                "The candidate, if selected, would use TCP as the transport protocol for its data. The tcpType property provides additional information about the kind of TCP candidate represented by the object."
            ],
            [
                "udp",
                "The candidate will use the UDP transport protocol for its data. This is the preferred protocol for media interactions because of its better performance profile."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceRole",
        "",
        "RTCIceRole",
        "The RTCIceRole enumerated type lists the string values that identify whether a connection's ICE agent is serving as the controlling agent or the controlled agent, as indicated by RTCIceTransport.role.",
        [
            [
                "\"controlling\"",
                "The RTCIceTransport object is serving as the controlling agent."
            ],
            [
                "\"controlled\"",
                "The transport is the controlled agent."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceServer",
        "",
        "RTCIceServer",
        "",
        [
            [
                "credential Optional",
                "The credential to use when logging into the server. This is only used if the RTCIceServer represents a TURN server."
            ],
            [
                "credentialType Optional",
                "If the RTCIceServer represents a TURN server, this attribute specifies what kind of credential is to be used when connecting. This must be one of the values defined by the RTCIceCredentialType enum. The default is password."
            ],
            [
                "urls",
                "This required property is either a single DOMString or an array of DOMStrings, each specifying a URL which can be used to connect to the server."
            ],
            [
                "username Optional",
                "If the RTCIceServer is a TURN server, then this is the username to use during the authentication process."
            ],
            [
                "url",
                "This obsolete property is a string specifies a single ICE server's URL. Do not use this property; use urls instead. Because many older books and examples still use this, we include it to help developers update their code or make sense of older examples."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceTcpCandidateType",
        "",
        "RTCIceTcpCandidateType",
        "The WebRTC API's RTCIceTcpCandidateType enumerated type provides a set of DOMString values representing the types of TCP candidates.",
        [
            [
                "\"active\"",
                "The transport will try to open an outbound connection but won't receive inoming connection requests."
            ],
            [
                "\"passive\"",
                "The transport will receive incoming connection requests but won't try to open an outbound connection."
            ],
            [
                "\"so\"",
                "The transport will try to open a connection simultaneously with its peer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceTransport",
        "",
        "RTCIceTransport",
        "The RTCIceTransport interface provides access to information about the ICE transport layer over which the data is being sent and received. This is particularly useful if you need to access state information about the connection.",
        [
            [
                "component Read only",
                "The ICE component being used by the transport. The value is one of the strings from the RTCIceTransport enumerated type: \"RTP\" or \"RTSP\"."
            ],
            [
                "gatheringState Read only",
                "A DOMString indicating which gathering state the ICE agent is currently in. The value is one of those included in the RTCIceGathererState enumerated type: \"new\", \"gathering\", or \"complete\"."
            ],
            [
                "role Read only",
                "Returns a DOMString whose value is one of the members of the RTCIceRole enumerated type: \"controlling\" or \"controlled\"; this indicates whether the ICE agent is the one that makes the final decision as to the candidate pair to use or not."
            ],
            [
                "state Read only",
                "A DOMString indicating what the current state of the ICE agent is. The value of state can be used to determine whether the ICE agent has made an initial connection using a viable candidate pair (\"connected\"), made its final selection of candidate pairs (\"completed\"), or in an error state (\"failed\"), among other states. See the RTCIceTransportState enumerated type for a complete list of states."
            ],
            [
                "getLocalCandidates()",
                "Returns an array of RTCIceCandidate objects, each describing one of the ICE candidates that have been gathered so far for the local device. These are the same candidates which have already been sent to the remote peer by sending an icecandidate event to the RTCPeerConnection for transmission."
            ],
            [
                "getLocalParameters()",
                "Returns a RTCIceParameters object describing the ICE parameters established by a call to the RTCPeerConnection.setLocalDescription() method. Returns null if parameters have not yet been received."
            ],
            [
                "getRemoteCandidates()",
                "Returns an array of RTCIceCandidate objects, one for each of the remote device's ICE candidates that have been received by the local end of the RTCPeerConnection and delivered to ICE by calling addIceCandidate()."
            ],
            [
                "getRemoteParameters()",
                "Returns a RTCIceParameters object containing the ICE parameters for the remote device, as set by a call to RTCPeerConnection.setRemoteDescription(). If setRemoteDescription() hasn't been called yet, the return value is null."
            ],
            [
                "getSelectedCandidatePair()",
                "Returns a RTCIceCandidatePair object that identifies the two candidates—one for each end of the connection—that have been selected so far. It's possible that a better pair will be found and selected later; if you need to keep up with this, watch for the selectedcandidatepairchange event. If no candidate pair has been selected yet, the return value is null."
            ],
            [
                "gatheringstatechange",
                "Sent to the RTCIceTransport object to indicate that the value of the gatheringState property has changed, indicating a change in this transport's ICE candidate negotiation process. Also available through the ongatheringstatechange event handler property."
            ],
            [
                "selectedcandidatepairchange",
                "Sent to the RTCIceTransport when a new, better pair of candidates has been selected to describe the connectivity between the two peers. This occurs during negotiation or renegotiation, including after an ICE restart, which reuses the existing RTCIceTransport objects. The current candidate pair can be obtained using getSelectedCandidatePair(). Also available using the onselectedcandidatepairchange event handler property."
            ],
            [
                "statechange",
                "Sent to the RTCIceTransport instance when the value of the state property has changed, indicating that the ICE gathering process has changed state. Also available through the onstatechange event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIceTransportState",
        "",
        "RTCIceTransportState",
        "The RTCIceTransportState enumerated type defines the string values which may be returned by the state property on RTCIceTransport objects. The transport state indicates which stage of the candidate gathering process is currently underway.",
        [
            [
                "\"new\"",
                "The RTCIceTransport is currently gathering local candidates, or is waiting for the remote device to begin to transmit the remote candidates, or both. In this state, checking of candidates to look for those which might be acceptable has not yet begun."
            ],
            [
                "\"checking\"",
                "At least one remote candidate has been received, and the RTCIceTransport has begun examining pairings of remote and local candidates in order to attempt to identify viable pairs that could be used to establish a connection. Keep in mind that gathering of local candidates may still be underway, and, similarly, the remote device also may still be gathering candidates of its own."
            ],
            [
                "\"connected\"",
                "A viable candidate pair has been found and selected, and the RTCIceTransport has connected the two peers together using that pair. However, there are still candidates pairings to consider, and there may still be gathering underway on one or both of the two devices. The transport may revert from the \"connected\" state to the \"checking\" state if either peer decides to cancel consent to use the selected candidate pair, and may revert to \"disconnected\" if there are no candidates left to check but one or both clients are still gathering candidates."
            ],
            [
                "\"completed\"",
                "The transport has finished gathering local candidates and has received a notification from the remote peer that no more candidates will be sent. In addition, all candidate pairs have been considered and a pair has been selected for use. If consent checks fail on all successful candidate pairs, the transport state will change to \"failed\"."
            ],
            [
                "\"disconnected\"",
                "The ICE agent has determined that connectivity has been lost for this RTCIceTransport. This is not a failure state (that's \"failed\"). A value of \"disconnected\" means that a transient issue has occurred that has broken the connection, but that should resolve itself automatically without your code having to take any action. See The disconnected state for additional details."
            ],
            [
                "\"failed\"",
                "The RTCIceTransport has finished the gathering process, has received the \"no more candidates\" notification from the remote peer, and has finished checking pairs of candidates, without successfully finding a pair that is both valid and for which consent can be obtained. This is a terminal state, indicating that the connection cannot be achieved or maintained."
            ],
            [
                "\"closed\"",
                "The transport has shut down and is no longer responding to STUN requests."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCIdentityAssertion",
        "",
        "RTCIdentityAssertion",
        "",
        [
            [
                "RTCIdentityAssertion.idp",
                "Indicates the provider of the identity assertion."
            ],
            [
                "RTCIdentityAssertion.name",
                "Indicates the name of the identity assertion provider."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCInboundRtpStreamStats",
        "",
        "RTCInboundRtpStreamStats",
        "The WebRTC API's RTCInboundRtpStreamStats dictionary, based upon RTCReceivedRtpStreamStats and RTCStats, contains statistics related to the receiving end of an RTP stream on the local end of the RTCPeerConnection.",
        [
            [
                "averageRtcpInterval",
                "A floating-point value indicating the average RTCP interval between two consecutive compound RTCP packets."
            ],
            [
                "bytesReceived",
                "A 64-bit integer which indicates the total number of bytes that have been received so far for this media source."
            ],
            [
                "fecPacketsDiscarded",
                "An integer value indicating the number of RTP Forward Error Correction (FEC) packets which have been received for this source, for which the error correction payload was discarded."
            ],
            [
                "fecPacketsReceived",
                "An integer value indicating the total number of RTP FEC packets received for this source. This counter may also be incremented when FEC packets arrive in-band along with media content; this can happen with Opus, for example."
            ],
            [
                "firCount",
                "An integer value which indicates the total number of Full Intra Request (FIR) packets which this receiver has sent to the sender. This is an indicator of how often the stream has lagged, requiring frames to be skipped in order to catch up. This value is only available for video streams."
            ],
            [
                "framesDecoded",
                "A long integer value indicating the total number of frames of video which have been correctly decoded so far for this media source. This is the number of frames that would have been rendered if none were dropped. Only valid for video streams."
            ],
            [
                "lastPacketReceivedTimestamp",
                "A DOMHighResTimeStamp indicating the time at which the last packet was received for this source. The timestamp property, on the other hand, indicates the time at which the statistics object was generated."
            ],
            [
                "nackCount",
                "An integer value indicating the total number of Negative ACKnolwedgement (NACK) packets this receiver has sent."
            ],
            [
                "packetsDuplicated",
                "An integer value indicating the total number of packets that have been discarded because they were duplicates. These packets are not counted by packetsDiscarded."
            ],
            [
                "packetsFailedDecryption",
                "An integer totaling the number of RTP packets that could not be decrypted. These packets are not counted by packetsDiscarded."
            ],
            [
                "perDscpPacketsReceived",
                "A record of key-value pairs with strings as the keys mapped to 32-bit integer values, each indicating the total number of packets this receiver has received on this RTP stream from this source for each Differentiated Services Code Point (DSCP)."
            ],
            [
                "pliCount",
                "An integer specifying the number of times the receiver has notified the sender that some amount of encoded video data for one or more frames has been lost, using Picture Loss Indication (PLI) packets. This is only available for video streams."
            ],
            [
                "qpSum",
                "A 64-bit value containing the sum of the QP values for every frame decoded by this RTP receiver. You can determine the average QP per frame by dividing this value by framesDecoded. Valid only for video streams."
            ],
            [
                "receiverId",
                "A string indicating which identifies the RTCAudioReceiverStats or RTCVideoReceiverStats object associated with the stream's receiver. This ID is stable across multiple calls to getStats()."
            ],
            [
                "remoteId",
                "A string which identifies the RTCRemoteOutboundRtpStreamStats object that provides statistics for the remote peer for this same SSRC. This ID is stable across multiple calls to getStats()."
            ],
            [
                "sliCount",
                "An integer indicating the number of times the receiver sent a Slice Loss Indication (SLI) frame to the sender to tell it that one or more consecutive (in terms of scan order) video macroblocks have been lost or corrupted. Available only for video streams."
            ],
            [
                "trackId",
                "A string which identifies the statistics object representing the receiving track; this object is one of two types: RTCReceiverAudioTrackAttachmentStats or RTCReceiverVideoTrackAttachmentStats. This ID is stable across multiple calls to getStats()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCNetworkType",
        "",
        "RTCNetworkType",
        "",
        [
            [
                "bluetooth",
                "A Bluetooth connection is used by the described connection."
            ],
            [
                "cellular",
                "The connection uses a cellular data service to connect. This includes all cellular data services including EDGE (2G), HSPA (3G), LTE (4G), and NR (5G)."
            ],
            [
                "ethernet",
                "The described connection uses an Ethernet network."
            ],
            [
                "wifi",
                "The described connection uses WiFi."
            ],
            [
                "wimax",
                "The described connection uses a WiMAX network."
            ],
            [
                "vpn",
                "The connection uses a Virtual Private Network (VPN). The VPN obscures the underlying network type, which is not discernible."
            ],
            [
                "unknown",
                "The user's browser is unable or unwilling to identify the underlying connection technology used by the described connection. This may be because the browser isn't able to determine the network type for some reason or it may be intentionally getting obscured for security reasons, such as to avoid device fingerprinting."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCOfferAnswerOptions",
        "",
        "RTCOfferAnswerOptions",
        "The WebRTC API's RTCOfferAnswerOptions dictionary is used to specify options that configure and control the process of creating WebRTC offers or answers. It's used as the base type for the options parameter when calling createOffer() or createAnswer() on an RTCPeerConnection.",
        [
            [
                "voiceActivityDetection Optional",
                "For configurations of systems and codecs that are able to detect when the user is speaking and toggle muting on and off automatically, this option enables and disables that behavior. The default value is true, enabling this functionality"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCOfferOptions",
        "",
        "RTCOfferOptions",
        "The RTCOfferOptions dictionary is used to provide optional settings when creating an RTCPeerConnection offer with the createOffer() method.",
        [
            [
                "iceRestart Optional",
                "A Boolean which, when set to true, tells createOffer() to generate and use new values for the identifying properties of the SDP it creates, resulting in a request that triggers renegotiation of the ICE connection. This is useful if network conditions have changed in a way that make the current configuration untenable or impractical, for instance."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCOutboundRtpStreamStats",
        "",
        "RTCOutboundRtpStreamStats",
        "",
        [
            [
                "averageRtcpInterval",
                "A floating-point value indicating the average RTCP interval between two consecutive compound RTCP packets."
            ],
            [
                "firCount",
                "An integer value which indicates the total number of Full Intra Request (FIR) packets which this RTCRtpSender has sent to the remote RTCRtpReceiver. This is an indicator of how often the stream has lagged, requiring frames to be skipped in order to catch up. Valid only for video streams."
            ],
            [
                "framesEncoded",
                "The number of frames that have been successfully encoded so far for sending on this RTP stream. Only valid for video streams."
            ],
            [
                "lastPacketSentTimestamp",
                "A DOMHighResTimeStamp indicating the time at which the last packet was sent for this SSRC. The timestamp property, on the other hand, indicates the time at which the RTCOutboundRtpStreamStats object was generated."
            ],
            [
                "nackCount",
                "An integer value indicating the total number of Negative ACKnolwedgement (NACK) packets this RTCRtpSender has received from the remote RTCRtpReceiver."
            ],
            [
                "perDscpPacketsSent",
                "A record of key-value pairs with strings as the keys mapped to 32-bit integer values, each indicating the total number of packets this RTCRtpSender has transmitted for this source for each Differentiated Services Code Point (DSCP)."
            ],
            [
                "pliCount",
                "An integer specifying the number of times the remote receiver has notified this RTCRtpSender that some amount of encoded video data for one or more frames has been lost, using Picture Loss Indication (PLI) packets. Only available for video streams."
            ],
            [
                "qpSum",
                "A 64-bit value containing the sum of the QP values for every frame encoded by this RTCRtpSender. Valid only for video streams."
            ],
            [
                "qualityLimitationDurations",
                "A record mapping each of the quality limitation reasons in the RTCRemoteInboundRtpStreamStats enumeration to a floating-point value indicating the number of seconds the stream has spent with its quality limited for that reason."
            ],
            [
                "qualityLimitationReason",
                "A value from the RTCQualityLimitationReason enumerated type explaining why the resolution and/or frame rate is being limited for this RTP stream. Valid only for video streams."
            ],
            [
                "remoteId",
                "A string which identifies the RTCRemoteInboundRtpStreamStats object that provides statistics for the remote peer for this same SSRC. This ID is stable across multiple calls to getStats()."
            ],
            [
                "retransmittedBytesSent",
                "The total number of bytes that have been retransmitted for this source as of the time the statistics were sampled. These retransmitted bytes comprise the packets included in the value returned by retransmittedPacketsSent."
            ],
            [
                "retransmittedPacketsSent",
                "The total number of packets that have needed to be retransmitted for this source as of the time the statistics were sampled. These retransmitted packets are included in the value returned by packetsSent."
            ],
            [
                "senderId",
                "The id of the RTCAudioSenderStats or RTCVideoSenderStats object containing statistics about this stream's RTCRtpSender."
            ],
            [
                "sliCount",
                "An integer indicating the number of times this sender received a Slice Loss Indication (SLI) frame from the remote peer, indicating that one or more consecutive video macroblocks have been lost or corrupted. Available only for video streams."
            ],
            [
                "targetBitrate",
                "A value indicating the bit rate the RTCRtpSender's codec is configured to attempt to achieve in its output media."
            ],
            [
                "totalEncodedBytesTarget",
                "A cumulative sum of the target frame sizes (the targeted maximum size of the frame in bytes when the codec is asked to compress it) for all of the frames encoded so far. This will likely differ from the total of the actual frame sizes."
            ],
            [
                "totalEncodeTime",
                "A floating-point value indicating the total number of seconds that have been spent encoding the frames encoded so far by this RTCRtpSender."
            ],
            [
                "trackId",
                "The id of the RTCSenderAudioTrackAttachmentStats or RTCSenderVideoTrackAttachmentStats object containing the current track attachment to the RTCRtpSender responsible for this stream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCPeerConnection",
        "",
        "RTCPeerConnection",
        "",
        [
            [
                "RTCPeerConnection()",
                "Returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer."
            ],
            [
                "generateCertificate()",
                "Creates an X.509 certificate and its corresponding private key, returning a Promise that resolves with the new RTCCertificate once it is generated."
            ],
            [
                "canTrickleIceCandidates Read only",
                "Returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates."
            ],
            [
                "connectionState Read only",
                "Indicates the current state of the peer connection by returning one of the strings new, connecting, connected, disconnected, failed, or closed."
            ],
            [
                "currentLocalDescription Read only",
                "Returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time this RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated."
            ],
            [
                "currentRemoteDescription Read only",
                "Returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time this RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated."
            ],
            [
                "iceConnectionState Read only",
                "Returns a string which state of the ICE agent associated with this RTCPeerConnection. It can be one of the following values: new, checking, connected, completed, failed, disconnected, or closed."
            ],
            [
                "iceGatheringState Read only",
                "Returns a string that describes connection's ICE gathering state. This lets you detect, for example, when collection of ICE candidates has finished. Possible values are: new, gathering, or complete."
            ],
            [
                "localDescription Read only",
                "Returns an RTCSessionDescription describing the session for the local end of the connection. If it has not yet been set, returns null."
            ],
            [
                "peerIdentity Read only",
                "Returns a Promise that resolves to an RTCIdentityAssertion which contains a string identifying the remote peer. Once this promise resolves successfully, the resulting identity is the target peer identity and will not change for the duration of the connection."
            ],
            [
                "pendingLocalDescription Read only",
                "Returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future."
            ],
            [
                "pendingRemoteDescription Read only",
                "Returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future."
            ],
            [
                "remoteDescription Read only",
                "Returns an RTCSessionDescription object describing the session, including configuration and media information, for the remote end of the connection. If this hasn't been set yet, this returns null."
            ],
            [
                "sctp Read only",
                "Returns an RTCSctpTransport object describing the SCTP transport layer over which SCTP data is being sent and received. If SCTP hasn't been negotiated, this value is null."
            ],
            [
                "signalingState Read only",
                "Returns a string describing the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. It is one of the following values: stable, have-local-offer, have-remote-offer, have-local-pranswer, or have-remote-pranswer."
            ],
            [
                "onconnectionstatechange",
                "Is an event handler which is called to handle the connectionstatechange event. This happens whenever the aggregate state of the connection changes. The aggregate state is a combination of the states of all of the individual network transports being used by the connection."
            ],
            [
                "ondatachannel",
                "Is an event handler which specifies a function which is called to handle the datachannel event. This event, of type RTCDataChannelEvent, is sent when an RTCDataChannel is added to the connection by the remote peer calling createDataChannel()."
            ],
            [
                "onicecandidate",
                "Is an event handler which specifies a function which is called to handle the icecandidate event. This happens whenever the local ICE agent needs to deliver a message to the other peer through the signaling server."
            ],
            [
                "onicecandidateerror",
                "Is an event handler which specifies a function which is called to handle the icecandidateerror event. This event is fired when an error occurs during the ICE candidate gathering process."
            ],
            [
                "oniceconnectionstatechange",
                "Is an event handler which specifies a function which is called to handle the iceconnectionstatechange event. This happens whenever the local ICE agent needs to deliver a message to the other peer through the signaling server."
            ],
            [
                "onicegatheringstatechange",
                "Is an event handler which specifies a function which is called to handle the icegatheringstatechange event. This happens when the ICE gathering state changes."
            ],
            [
                "onnegotiationneeded",
                "Is an event handler which specifies a function which is called to handle the negotiationneeded event. This event is fired when a change has occurred which requires session negotiation. This negotiation should be carried out as the offerer, because some session changes cannot be negotiated as the answerer."
            ],
            [
                "onsignalingstatechange",
                "Is an event handler which specifies a function which is called to handle the signalingstatechange event. The function receives as input the event object of type Event; this event is sent when the peer connection's signalingState changes, which may happen either because of a call to setLocalDescription() or to setRemoteDescription()."
            ],
            [
                "ontrack",
                "Is an event handler which specifies a function which is called to handle the track event. The function receives as input the event object, of type RTCTrackEvent; this event is sent when a new incoming MediaStreamTrack has been created and associated with an RTCRtpReceiver object which has been added to the set of receivers on the connection."
            ],
            [
                "onaddstream This is an obsolete API and is no longer guaranteed to work.",
                "Is an event handler which specifies a function which is called to handle the obsolete addstream event."
            ],
            [
                "onremovestream This is an obsolete API and is no longer guaranteed to work.",
                "Is an event handler which specifies a function which is called to handle the obsolete removestream event."
            ],
            [
                "addIceCandidate()",
                "Adds a new remote candidate to the RTCPeerConnection's remote description, which describes the state of the remote end of the connection."
            ],
            [
                "addTrack()",
                "Adds a new MediaStreamTrack to the set of tracks which will be transmitted to the other peer."
            ],
            [
                "addTransceiver()",
                "Creates a new RTCRtpTransceiver and adds it to the set of transceivers associated with the connection. Each transceiver represents a bidirectional stream, with both an RTCRtpSender and an RTCRtpReceiver associated with it."
            ],
            [
                "close()",
                "Closes the current peer connection."
            ],
            [
                "createAnswer()",
                "Initiates the creation an SDP answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. The answer contains information about any media already attached to the session, codecs and options supported by the browser, and any ICE candidates already gathered."
            ],
            [
                "createDataChannel()",
                "Initiates the creation a new channel linked with the remote peer, over which any kind of data may be transmitted. This can be useful for back-channel content, such as images, file transfer, text chat, game update packets, and so forth."
            ],
            [
                "createOffer()",
                "Initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a remote peer. The SDP offer includes information about any MediaStreamTrack objects already attached to the WebRTC session, codec, and options supported by the browser, as well as any candidates already gathered by the ICE agent, for the purpose of being sent over the signaling channel to a potential peer to request a connection or to update the configuration of an existing connection."
            ],
            [
                "getConfiguration()",
                "Returns an RTCConfiguration object which indicates the current configuration of the connection."
            ],
            [
                "getIdentityAssertion()",
                "Initiates the gathering of an identity assertion and returns a Promise which resolves to an identity assertion encoded as a string. This has an effect only if signalingState is not closed."
            ],
            [
                "getReceivers()",
                "Returns an array of RTCRtpReceiver objects, each of which represents one RTP receiver."
            ],
            [
                "getSenders()",
                "Returns an array of RTCRtpSender objects, each of which represents the RTP sender responsible for transmitting one track's data."
            ],
            [
                "getStats()",
                "Returns a Promise which resolves with data providing statistics about either the overall connection or about the specified MediaStreamTrack."
            ],
            [
                "getTransceivers()",
                "Returns a list of all the RTCRtpTransceiver objects being used to send and receive data on the connection."
            ],
            [
                "removeTrack()",
                "Tells the local end of the connection to stop sending media from the specified track, without actually removing the corresponding RTCRtpSender from the list of senders as reported by getSenders(). If the track is already stopped, or is not in the connection's senders list, this method has no effect."
            ],
            [
                "restartIce()",
                "Allows to easily request that ICE candidate gathering be redone on both ends of the connection. This simplifies the process by allowing the same method to be used by either the caller or the receiver to trigger an ICE restart."
            ],
            [
                "setConfiguration()",
                "Sets the current configuration of the connection based on the values included in the specified RTCConfiguration object. This lets you change the ICE servers used by the connection and which transport policies to use."
            ],
            [
                "setIdentityProvider()",
                "Sets the Identity Provider (IdP) to the triplet given in parameter: its name, the protocol used to communicate with it and an username. The protocol and the username are optional."
            ],
            [
                "setLocalDescription()",
                "Changes the local description associated with the connection. This description specifies the properties of the local end of the connection, including the media format. It returns a Promise which is fulfilled once the description has been changed, asynchronously."
            ],
            [
                "setRemoteDescription()",
                "Sets the specified session description as the remote peer's current offer or answer. The description specifies the properties of the remote end of the connection, including the media format. It returns a Promise which is fulfilled once the description has been changed, asynchronously."
            ],
            [
                "addStream() This is an obsolete API and is no longer guaranteed to work.",
                "Adds a MediaStream as a local source of audio or video. Instead of using this obsolete method, you should instead use addTrack() once for each track you wish to send to the remote peer."
            ],
            [
                "createDTMFSender() This is an obsolete API and is no longer guaranteed to work.",
                "Creates a new RTCDTMFSender, associated to a specific MediaStreamTrack, that will be able to send DTMF phone signaling over the connection."
            ],
            [
                "getStreamById() This is an obsolete API and is no longer guaranteed to work.",
                "Returns the MediaStream with the given id that is associated with local or remote end of the connection. This property has been replaced with the getSenders() and getReceivers() methods."
            ],
            [
                "removeStream() This is an obsolete API and is no longer guaranteed to work.",
                "Removes a MediaStream as a local source of audio or video. Because this method is obsolete, you should instead use removeTrack()."
            ],
            [
                "connectionstatechange",
                "Sent when the overall connectivity status of the RTCPeerConnection changes. Also available through the onconnectionstatechange event handler property."
            ],
            [
                "datachannel",
                "Sent when the remote peer adds an RTCDataChannel to the connection. Also available through the ondatachannel event handler property."
            ],
            [
                "icecandidate",
                "Sent to request that the specified candidate be transmitted to the remote peer. Also available through the onicecandidate event handler property."
            ],
            [
                "icecandidateerror",
                "Sent to the connection if an error occurred during ICE candidate gathering. The event describes the error. Also available through the onicecandidateerror event handler property."
            ],
            [
                "iceconnectionstatechange",
                "Sent when the state of the ICE connection changes, such as when it disconnects. Also available using the oniceconnectionstatechange event handler property."
            ],
            [
                "icegatheringstatechange",
                "Sent when the ICE layer's gathering state, reflected by iceGatheringState, changes. This indicates whether ICE negotiation has not yet begun (new), has begun gathering candidates (gathering), or has completed (complete). Also available using the onicegatheringstatechange event handler property."
            ],
            [
                "negotiationneeded",
                "Sent when negotiation or renegotiation of the ICE connection needs to be performed; this can happen both when first opening a connection as well as when it is necessary to adapt to changing network conditions. The receiver should respond by creating an offer and sending it to the other peer. Also available as the onnegotiationneeded event handler property."
            ],
            [
                "signalingstatechange",
                "Sent when the connection's ICE signaling state changes. Also available through the onsignalingstatechange event handler property."
            ],
            [
                "track",
                "Sent after a new track has been added to one of the RTCRtpReceiver instances which comprise the connection. Also available as the ontrack event handler property."
            ],
            [
                "addstream This is an obsolete API and is no longer guaranteed to work.",
                "Sent when a new MediaStream has been added to the connection. Instead of listening for this obsolete event, you should listen for track events; one is sent for each MediaStreamTrack added to the connection. Also available as the onaddstream event handler property."
            ],
            [
                "removestream This is an obsolete API and is no longer guaranteed to work.",
                "Sent when a MediaStream is removed from the connection. Instead of listening for this obsolete event, you should listen for removetrack events on each stream. Also available as the onremovestream event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent",
        "",
        "RTCPeerConnectionIceErrorEvent",
        "",
        [
            [
                "RTCPeerConnectionIceErrorEvent()",
                "Creates and returns a new RTCPeerConnectionIceErrorEvent object, with its type and other properties initialized as specified in the parameters. You will not normally create an object of this type yourself."
            ],
            [
                "address Read only",
                "A DOMString providing the local IP address used to communicate with the STUN or TURN server being used to negotiate the connection, or null if the local IP address has not yet been exposed as part of a local ICE candidate."
            ],
            [
                "errorCode Read only",
                "An unsigned integer value stating the numeric STUN error code returned by the STUN or TURN server. If no host candidate can reach the server, this property is set to the number 701, which is outside the range of valid STUN error codes. The 701 error is fired only once per server URL, and only while the is icegatheringstate is gathering."
            ],
            [
                "errorText Read only",
                "A DOMString containing the STUN reason text returned by the STUN or TURN server. If communication with the STUN or TURN server couldn't be established at all, this string will be a browser-specific string explaining the error."
            ],
            [
                "port Read only",
                "An unsigned integer value giving the port number over which communication with the STUN or TURN server is taking place, using the IP address given in address. null if the connection hasn't been established (that is, if address is null)."
            ],
            [
                "url Read only",
                "A DOMString indicating the URL of the STUN or TURN server with which the error occurred."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCPeerConnectionIceEvent",
        "",
        "RTCPeerConnectionIceEvent",
        "",
        [
            [
                "RTCPeerConnectionIceEvent.candidate Read only",
                "Contains the RTCIceCandidate containing the candidate associated with the event, or null if this event indicates that there are no further candidates to come."
            ],
            [
                "RTCPeerConnectionIceEvent()",
                "Returns a new RTCPeerConnectionIceEvent. It takes two parameters, the first being a DOMString representing the type of the event; the second a dictionary containing the RTCIceCandidate it refers to."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats",
        "",
        "RTCRemoteOutboundRtpStreamStats",
        "",
        [
            [
                "localId",
                "A DOMString which is used to find the local RTCInboundRtpStreamStats object which shares the same Synchronization Source (SSRC)."
            ],
            [
                "remoteTimestamp",
                "A DOMHighResTimeStamp specifying the timestamp (on the remote device) at which the statistics in the RTCRemoteOutboundRtpStreamStats object were sent by the remote endpoint. This is different from the timestamp found in the base RTCStats dictionary; it represents the time at which the object's statistics were received or generated by the local endpoint."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtcpParameters",
        "",
        "RTCRtcpParameters",
        "",
        [
            [
                "cname",
                "The Canonical Name (CNAME) being used by RTCP. This is used, for example, in SDES (SDP security descriptions) messages, described in RFC 4568. This property cannot be changed once initialized."
            ],
            [
                "reducedSize",
                "A Boolean value indicating whether or not reduced size RTCP is configured. If this value is true, reduced size RTCP (described in RFC 5506) is in effect. If false, compund RTCP is in use, as found in RFC 3550. This property cannot be changed once initialized."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpCapabilities",
        "",
        "RTCRtpCapabilities",
        "",
        [
            [
                "codecs",
                "An array of RTCRtpCodecCapability objects, each describing one of the codecs supported by the RTCRtpSender or RTCRtpReceiver. There are some special entries in this array, described below in the section The codecs array."
            ],
            [
                "headerExtensions",
                "An array of objects conforming to the RTCRtpHeaderExtensionCapability dictionary. Each object contains a single DOMString, uri, specifying the URI of the header extension, as described in RFC 5285."
            ],
            [
                "RED (REDundant Audio Data)",
                "The media type of an RED entry may vary due to there being several versions of it, but it will end with red, such as video/red or video/fwdred. The base RED standard can be found in RFC 2198. There may be multiple entries for RED if different forms are supported; each will have a unique media type in that case."
            ],
            [
                "FEC (Forward Error Correction)",
                "An FEC component handles error correction data; its media type may also vary due to there being advanced versions of the standard available, but it will always end with fec. One possible value is video/ulpfec (a generic error connection model). There may also be multiple FEC entries if more than one form is supported."
            ],
            [
                "RTX (Retransmission)",
                "This component is responsible for retransmission of data; it's media type should be video/rtx. There will only be one entry for RTX, and it will not have an sdpFmtpLine property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpCodecCapability",
        "",
        "RTCRtpCodecCapability",
        "",
        [
            [
                "channels Optional",
                "An unsigned integer value indicating the maximum number of channels supported by the codec; for example, a codec that supports only mono sound would have a value of 1; stereo codecs would have a 2, etc."
            ],
            [
                "clockRate",
                "An unsigned long integer specifying the codec's clock rate in Hertz (Hz). The IANA maintains a list of codecs and their parameters, including their clock rates."
            ],
            [
                "mimeType",
                "A DOMString indicating the codec's MIME media type and subtype. See Codecs used by WebRTC for details about potential codecs that might be referenced here."
            ],
            [
                "sdpFmtpLine Optional",
                "A DOMString giving the format specific parameters field from the a=fmtp line in the SDP which corresponds to the codec, if such a line exists. If there is no parameters field, this property is left out."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpCodecParameters",
        "",
        "RTCRtpCodecParameters",
        "The RTCRtpCodecParameters dictionary, part of the WebRTC API, is used to describe the configuration parameters for a single media codec. In addition to being the type of the RTCRtpParameters.codecs property, it's used when calling RTCRtpTransceiver.setCodecPreferences() to configure a transceiver's codecs before beginning the offer/answer process to establish a WebRTC peer connection.",
        [
            [
                "payloadType Optional",
                "The RTP payload type used to identify this codec."
            ],
            [
                "mimeType Optional",
                "The codec's MIME media type and subtype specified as a DOMString of the form \"type/subtype\". IANA maintains a registry of valid MIME types."
            ],
            [
                "clockRate Optional",
                "An unsigned long integer value specifying the codec's clock rate in hertz (Hz). The clock rate is the rate at which the codec's RTP timestamp advances. Most codecs have specific values or ranges of values they permit; see the IANA payload format media type registry for details."
            ],
            [
                "channels Optional",
                "An unsigned short integer indicating the number of channels the codec should support. For example, for audio codecs, a value of 1 specifies monaural sound while 2 indicates stereo."
            ],
            [
                "sdpFmtpLine Optional",
                "A DOMString containing the format-specific parameters field from the \"a=fmtp\" line in the codec's SDP, if one is present; see section 5.8 of the IETF specification for JSEP. Note: On an RTCRtpReceiver, the format-specific parameters come from the SDP sent by the remote peer, while for RTCRtpSender, they're provided by the local description."
            ],
            [
                "Real-Time Transport Protocol (RTP) Parameters",
                "The IANA document providing registries of permitted values for the RTP parameters used by this dictionary."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpContributingSource",
        "",
        "RTCRtpContributingSource",
        "The RTCRtpContributingSource dictionary of the WebRTC API is used by getContributingSources() to provide information about a given contributing source (CSRC), including the most recent time a packet that the source contributed was played out.",
        [
            [
                "audioLevel Optional",
                "A double-precision floating-point value between 0 and 1 specifying the audio level contained in the last RTP packet played from this source."
            ],
            [
                "rtpTimestamp Optional",
                "The RTP timestamp of the media played out at the time indicated by timestamp. This value is a source-generated time value which can be used to help with sequencing and synchronization."
            ],
            [
                "source Optional",
                "A 32-bit unsigned integer value specifying the CSRC identifier of the contributing source."
            ],
            [
                "timestamp Optional",
                "A DOMHighResTimeStamp indicating the most recent time at which a frame originating from this source was delivered to the receiver's MediaStreamTrack"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpEncodingParameters",
        "",
        "RTCRtpEncodingParameters",
        "An instance of the WebRTC API's RTCRtpEncodingParameters dictionary describes a single configuration of a codec for an RTCRtpSender. It's used in the RTCRtpSendParameters describing the configuration of an RTP sender's encodings; RTCRtpDecodingParameters is used to describe the configuration of an RTP receiver's encodings.",
        [
            [
                "active",
                "If true, the described encoding is currently actively being used. That is, for RTP senders, the encoding is currently being used to send data, while for receivers, the encoding is being used to decode received data. The default value is true."
            ],
            [
                "codecPayloadType",
                "When describing a codec for an RTCRtpSender, codecPayloadType is a single 8-bit byte (or octet) specifying the codec to use for sending the stream; the value matches one from the owning RTCRtpParameters object's codecs parameter. This value can only be set when creating the transceiver; after that, this value is read only."
            ],
            [
                "dtx",
                "Only used for an RTCRtpSender whose kind is audio, this property indicates whether or not to use discontinuous transmission (a feature by which a phone is turned off or the microphone muted automatically in the absence of voice activity). The value is taken from the enumerated string type RTCDtxStatus."
            ],
            [
                "maxBitrate",
                "An unsigned long integer indicating the maximum number of bits per second to allow for this encoding. Other parameters may further constrain the bit rate, such as the value of maxFramerate or transport or physical network limitations."
            ],
            [
                "maxFramerate",
                "A double-precision floating-point value specifying the maximum number of frames per second to allow for this encoding."
            ],
            [
                "ptime",
                "An unsigned long integer value indicating the preferred duration of a media packet in milliseconds. This is typically only relevant for audio encodings. The user agent will try to match this as well as it can, but there is no guarantee."
            ],
            [
                "rid",
                "A DOMString which, if set, specifies an RTP stream ID (RID) to be sent using the RID header extension. This parameter cannot be modified using setParameters(). Its value can only be set when the transceiver is first created."
            ],
            [
                "scaleResolutionDownBy",
                "Only used for senders whose track's kind is video, this is a double-precision floating-point value specifying a factor by which to scale down the video during encoding. The default value, 1.0, means that the sent video's size will be the same as the original. A value of 2.0 scales the video frames down by a factor of 2 in each dimension, resulting in a video 1/4 the size of the original. The value must not be less than 1.0 (you can't use this to scale the video up)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpParameters",
        "",
        "RTCRtpParameters",
        "",
        [
            [
                "codecs",
                "An array of RTCRtpCodecParameters objects describing the set of codecs from which the sender or receiver will choose. This parameter cannot be changed once initially set."
            ],
            [
                "headerExtensions",
                "An array of zero or more RTP header extensions, each identifying an extension supported by the sender or receiver. Header extensions are described in RFC 3550: 5.3.1. This parameter cannot be changed once initially set."
            ],
            [
                "rtcp",
                "An RTCRtcpParameters object providing the configuration parameters used for RTCP on the sender or receiver. This parameter cannot be changed once initially set."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpReceiveParameters",
        "",
        "RTCRtpReceiveParameters",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpReceiver",
        "",
        "RTCRtpReceiver",
        "The RTCRtpReceiver interface of the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.",
        [
            [
                "RTCRtpReceiver.track Read only",
                "Returns the MediaStreamTrack associated with the current RTCRtpReceiver instance."
            ],
            [
                "RTCRtpReceiver.transport Read only",
                "Returns the RTCDtlsTransport instance over which the media for the receiver's track is received."
            ],
            [
                "rtcpTransport",
                "This property has been removed; the RTP and RTCP transports have been combined into a single transport. Use the transport property instead."
            ],
            [
                "RTCRtpReceiver.getContributingSources()",
                "Returns an array of RTCRtpContributingSource instances for each unique CSRC (contributing source) identifier received by the current RTCRtpReceiver in the last ten seconds."
            ],
            [
                "RTCRtpReceiver.getParameters()",
                "Returns an RTCRtpParameters object which contains information about how the RTC data is to be decoded."
            ],
            [
                "RTCRtpReceiver.getStats()",
                "Returns a Promise whose fulfillment handler receives a RTCStatsReport which contains statistics about the incoming streams and their dependencies."
            ],
            [
                "RTCRtpReceiver.getSynchronizationSources()",
                "Returns an array including one RTCRtpSynchronizationSource instance for each unique SSRC (synchronization source) identifier received by the current RTCRtpReceiver in the last ten seconds."
            ],
            [
                "RTCRtpReceiver.getCapabilities()",
                "Returns the most optimistic view of the capabilities of the system for receiving media of the given kind."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpSender",
        "",
        "RTCRtpSender",
        "The RTCRtpSender interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer. With it, you can configure the encoding used for the corresponding track, get information about the device's media capabilities, and so forth. You can also obtain access to an RTCDTMFSender which can be used to send DTMF codes (to simulate the user pressing buttons on a telephone's dial pad) to the remote peer.",
        [
            [
                "RTCRtpSender.dtmf Read only",
                "An RTCDTMFSender which can be used to send DTMF tones using telephone-event payloads on the RTP session represented by the RTCRtpSender object. If null, the track and/or the connection doesn't support DTMF. Only audio tracks can support DTMF."
            ],
            [
                "RTCRtpSender.track Read only",
                "The MediaStreamTrack which is being handled by the RTCRtpSender. If track is null, the RTCRtpSender doesn't transmit anything."
            ],
            [
                "RTCRtpSender.transport Read only",
                "The RTCDtlsTransport over which the sender is exchanging the RTP and RTCP packets used to manage transmission of media and control data. This value is null until the transport is established. When bundling is in use, more than transceiver may be sharing the same transport object."
            ],
            [
                "rtcpTransport",
                "This property has been removed; the RTP and RTCP transports have been combined into a single transport. Use the transport property instead."
            ],
            [
                "RTCRtpSender.getParameters()",
                "Returns a RTCRtpParameters object describing the current configuration for the encoding and transmission of media on the track."
            ],
            [
                "RTCRtpSender.getStats()",
                "Returns a Promise which is fulfilled with a RTCStatsReport which provides statistics data for all outbound streams being sent using this RTCRtpSender."
            ],
            [
                "RTCRtpSender.setParameters()",
                "Applies changes to parameters which configure how the track is encoded and transmitted to the remote peer."
            ],
            [
                "RTCRtpSender.setStreams()",
                "Sets the MediaStream(s) associated with the track being transmitted by this sender."
            ],
            [
                "RTCRtpSender.replaceTrack()",
                "Attempts to replace the track currently being sent by the RTCRtpSender with another track, without performing renegotiation. This method can be used, for example, to toggle between the front- and rear-facing cameras on a device."
            ],
            [
                "RTCRtpSender.getCapabilities()",
                "Returns an RTCRtpCapabilities object describing the system's capabilities for sending a specified kind of media data."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpSendParameters",
        "",
        "RTCRtpSendParameters",
        "The WebRTC API's RTCRtpSendParameters dictionary is used to specify the parameters for an RTCRtpSender when calling its setParameters() method.",
        [
            [
                "encodings",
                "An array of RTCRtpEncodingParameters objects, each specifying the parameters for a single codec that could be used to encode the track's media."
            ],
            [
                "transactionId",
                "A string containing a unique ID for the last set of parameters applied; this value is used to ensure that setParameters() can only be called to alter changes made by a specific previous call to getParameters(). Once this parameter is initially set, it cannot be changed."
            ],
            [
                "degradationPreference",
                "Specifies the preferred way the WebRTC layer should handle optimizing bandwidth against quality in constrained-bandwidth situations; the value comes from the RTCDegradationPreference enumerated string type, and the default is balanced."
            ],
            [
                "priority",
                "A string from the RTCPriorityType enumerated type which indicates the encoding's priority. The default value is low."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpStreamStats",
        "",
        "RTCRtpStreamStats",
        "The RTCRtpStreamStats dictionary is returned by the RTCPeerConnection.getStats(), RTCRtpSender.getStats(), and RTCRtpReceiver.getStats() methods to provide detailed statistics about WebRTC connectivity. While the dictionary has a base set of properties that are present in each of these cases, there are also additional properties added depending on which interface the method is called on.",
        [
            [
                "codecId",
                "A DOMString which uniquely identifies the object which was inspected to produce the RTCCodecStats object associated with this RTP stream."
            ],
            [
                "kind",
                "A DOMString whose value is \"audio\" if the associated MediaStreamTrack is audio-only or \"video\" if the track contains video. This value will match that of the media type indicated by RTCCodecStats.codec, as well as the track's kind property. Previously called mediaType."
            ],
            [
                "ssrc",
                "The 32-bit integer which identifies the source of the RTP packets this RTCRtpStreamStats object covers. This value is generated per the RFC 3550 specification."
            ],
            [
                "trackId",
                "A DOMString which uniquely identifies the RTCMediaStreamTrackStats object representing the associated MediaStreamTrack. This is not the same as the value of MediaStreamTrack.id."
            ],
            [
                "transportId",
                "A DOMString uniquely identifying the object which was inspected to produce the RTCTransportStats object associated with this RTP stream."
            ],
            [
                "mediaType",
                "Renamed to kind in the specification in February 2018. See Browser compatibility in RTCRtpStreamStats.kind to determine when browsers made the transition."
            ],
            [
                "firCount",
                "A count of the total number of Full Intra Request (FIR) packets received by the sender. This statistic is only available to the device which is receiving the stream and is only available for video tracks. A FIR packet is sent by the receiving end of the stream when it falls behind or has lost packets and is unable to continue decoding the stream; the sending end of the stream receives the FIR packet and responds by sending a full frame instead of a delta frame, thereby letting the receiver \"catch up.\" The higher this number is, the more often a problem of this nature arose, which can be a sign of network congestion or an overburdened receiving device."
            ],
            [
                "nackCount",
                "The number of times the receiver notified the sender that one or more RTP packets has been lost by sending a Negative ACKnowledgement (NACK, also called \"Generic NACK\") packet to the sender. This value is only available to the receiver."
            ],
            [
                "pliCount",
                "The number of times the receiving end of the stream sent a Picture Loss Indiciation (PLI) packet to the sender, indicating that it has lost some amount of encoded video data for one or more frames. Only the receiver has this value, and it's only valid for video tracks."
            ],
            [
                "qpSum",
                "The sum of the Quantization Parameter (QP) values associated with every frame received to date on the video track described by this RTCRtpStreamStats object. In general, the higher this number is, the more heavily compressed the video track was. Combined with RTCReceivedRtpStreamStats.framesDecoded or RTCSentRtpStreamStats.framesEncoded, you can approximate the average QP over those frames, keeping in mind that codecs often vary the quantizer values even within frames. Also keep in mind that the values of QP can vary from codec to codec, so this value is only potentially useful when compared against the same codec."
            ],
            [
                "sliCount",
                "The number of times the receiver notified the sender that one or more consecutive (in scan order) encoded video macroblocks have been lost or corrupted; this notification is sent by the receiver to the sender using a Slice Loss Indication (SLI) packet. This is a fairly technical part of how codecs work and while the higher this value is, the more errors occurred in the stream, generally most of the time this value is only interesting to very intensively hardcore media developers."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpSynchronizationSource",
        "",
        "RTCRtpSynchronizationSource",
        "The RTCRtpSynchronizationSource dictionary of the WebRTC API is used by getSynchronizationSources() to describe a particular synchronization source (SSRC). A synchronization source is a single source that shares timing and sequence number space. Since RTCRtpSynchronizationSource implements RTCRtpContributingSource, its properties are also available.",
        [
            [
                "voiceActivityFlag Optional",
                "A Boolean value indicating whether or not voice activity is included in the last RTP packet played from the source. If the peer has indicated that it's not supporting voice activity detection, this field is not provided."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpTransceiver",
        "",
        "RTCRtpTransceiver",
        "The WebRTC interface RTCRtpTransceiver describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.",
        [
            [
                "currentDirection Read only",
                "A read-only string from the enum RTCRtpTransceiverDirection which indicates the transceiver's current directionality, or null if the transceiver is stopped or has never participated in an exchange of offers and answers. To change the transceiver's directionality, set the value of the direction property."
            ],
            [
                "direction",
                "A string from the enum RTCRtpTransceiverDirection which is used to set the transceiver's desired direction."
            ],
            [
                "mid Read only",
                "The media ID of the m-line associated with this transceiver. This association is established, when possible, whenever either a local or remote description is applied. This field is null if neither a local or remote description has been applied, or if its associated m-line is rejected by either a remote offer or any answer."
            ],
            [
                "receiver Read only",
                "The RTCRtpReceiver object that handles receiving and decoding incoming media."
            ],
            [
                "sender Read only",
                "The RTCRtpSender object responsible for encoding and sending data to the remote peer."
            ],
            [
                "stopped",
                "Indicates whether or not sending and receiving using the paired RTCRtpSender and RTCRtpReceiver has been permanently disabled, either due to SDP offer/answer, or due to a call to stop()."
            ],
            [
                "setCodecPreferences()",
                "A list of RTCRtpCodecParameters objects which override the default preferences used by the user agent for the transceiver's codecs."
            ],
            [
                "stop()",
                "Permanently stops the RTCRtpTransceiver. The associated sender stops sending data, and the associated receiver likewise stops receiving and decoding incoming data."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpTransceiverDirection",
        "",
        "RTCRtpTransceiverDirection",
        "The RTCRtpTransceiverDirection type is an enumerated set of strings which are used to describe the directionality of a RTCRtpTransceiver instance. Both the preferred direction and the currentDirection properties are of this type.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCRtpTransceiverInit",
        "",
        "RTCRtpTransceiverInit",
        "The RTCRtpTransceiverInit dictionary is used when calling the WebRTC function RTCPeerConnection.addTransceiver() to provide configuration options for the new transceiver.",
        [
            [
                "direction Optional",
                "The new transceiver's preferred directionality. This value is used to initialize the new RTCRtpTransceiver object's RTCRtpTransceiver.direction property."
            ],
            [
                "sendEncodings Optional",
                "A list of encodings to allow when sending RTP media from the RTCRtpSender. Each entry is of type RTCRtpEncodingParameters."
            ],
            [
                "streams Optional",
                "A list of MediaStream objects to add to the transceiver'sRTCRtpReceiver; when the remote peer's RTCPeerConnection's track event occurs, these are the streams that will be specified by that event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCSctpTransport",
        "",
        "RTCSctpTransport",
        "",
        [
            [
                "RTCSctpTransport.maxChannelsRead only",
                "An integer value indicating the maximum number of RTCDataChannels that can be open simultaneously."
            ],
            [
                "RTCSctpTransport.maxMessageSizeRead only",
                "An integer value indicating the maximum size, in bytes, of a message which can be sent using the RTCDataChannel.send() method."
            ],
            [
                "RTCSctpTransport.stateRead only",
                "A DOMString enumerated value indicating the state of the SCTP transport."
            ],
            [
                "RTCSctpTransport.transportRead only",
                "An RTCDtlsTransport object representing the DTLS transport used for the transmission and receipt of data packets."
            ],
            [
                "RTCSctpTransport.onstatechange",
                "Fired when the RTCSctpTransport.state changes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCSessionDescription",
        "",
        "RTCSessionDescription",
        "",
        [
            [
                "RTCSessionDescription.type Read only",
                "An enum of type RTCSdpType describing the session description's type."
            ],
            [
                "RTCSessionDescription.sdp Read only",
                "A DOMString containing the SDP describing the session."
            ],
            [
                "RTCSessionDescription()",
                "This constructor returns a new RTCSessionDescription. The parameter is a RTCSessionDescriptionInit dictionary containing the values to assign the two properties."
            ],
            [
                "RTCSessionDescription.toJSON()",
                "Returns a JSON description of the object. The values of both properties, type and sdp, are contained in the generated JSON."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCStats",
        "",
        "RTCStats",
        "The RTCStats dictionary is the basic statistics object used by WebRTC's statistics monitoring model, providing the properties required of all statistics data objects. Specific classes of statistic are defined as dictionaries based on RTCStats. For example, statistics about a received RTP stream are represented by RTCReceivedRtpStreamStats.",
        [
            [
                "id",
                "A DOMString which uniquely identifies the object which was inspected to produce this object based on RTCStats."
            ],
            [
                "timestamp",
                "A DOMHighResTimeStamp object indicating the time at which the sample was taken for this statistics object."
            ],
            [
                "type",
                "A DOMString indicating the type of statistics the object contains, taken from the enum type RTCStatsType."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCStatsIceCandidatePairState",
        "",
        "RTCStatsIceCandidatePairState",
        "",
        [
            [
                "failed",
                "A check for this pair has been performed but failed. A failure can occur either because no response was received or because the response indicated that an unrecoverable error occurred."
            ],
            [
                "frozen",
                "No check has been performed yet for this candidate pair, and performing the check is blocked until another check is successful. Once that check has succeeded, this pair will unfreeze and move into the waiting state."
            ],
            [
                "in-progress",
                "A check has been initiated for this pair, but the check's transaction is still in progress."
            ],
            [
                "succeeded",
                "A check for this pair has been completed successfully."
            ],
            [
                "waiting",
                "This pair has not yet been checked, but the check can be performed as soon as this pair is the highest priority pair remaining in the waiting state."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCStatsReport",
        "",
        "RTCStatsReport",
        "",
        [
            [
                "id",
                "A DOMString which uniquely identifies the object which was inspected to produce this object based on RTCStats."
            ],
            [
                "timestamp",
                "A DOMHighResTimeStamp object indicating the time at which the sample was taken for this statistics object."
            ],
            [
                "type",
                "A DOMString indicating the type of statistics the object contains, taken from the enum type RTCStatsType."
            ],
            [
                "candidate-pair",
                "An RTCIceCandidatePairStats object providing statistics related to an RTCIceTransport. Candidate pairs other than the currently active pair for the transport are deleted when the RTCPeerConnection changes its RTCPeerConnection.iceGatheringState to new during an ICE restart. The active candidate pair is deleted after the transport switches to another candidate pair; this change cannot be detected otherwise."
            ],
            [
                "certificate",
                "An RTCCertificateStats object providing statistics related to a certificate being used by an RTCIceTransport."
            ],
            [
                "codec",
                "An RTCCodecStats object containing statistics about a codec currently being used by RTP streams to send or receive data for the RTCPeerConnection."
            ],
            [
                "csrc",
                "An RTCContributingSourceStats object which contains statistics related to a contributing source (CSRC) that contributed to an inbound RTP stream."
            ],
            [
                "data-channel",
                "An RTCDataChannelStats object which contains statistics about each RTCDataChannel on the connection."
            ],
            [
                "inbound-rtp",
                "An RTCInboundRtpStreamStats object providing statistics about inbound data being received from remote peers. Since this only provides statistics related to inbound data, without considering the local peer's state, any values that require knowledge of both, such as round-trip time, is not included. This report isn't available if there are no connected peers."
            ],
            [
                "local-candidate",
                "An RTCIceCandidateStats object giving statistics about an ICE local candidate; these candidates are found in the output from RTCIceTransport.getLocalCandidates()."
            ],
            [
                "outbound-rtp",
                "The report is an RTCOutboundRtpStreamStats object providing statistics based on the local peer's outgoing data being sent to its peers. This information considers only the outbound RTP stream, so any data which requires information about the state of the remote peers (such as round-trip time) is unavailable, since those values can't be computed without knowing about the other peers' states."
            ],
            [
                "peer-connection",
                "A RTCPeerConnectionStats object provides statistics related to the overall peer connection's RTCPeerConnection."
            ],
            [
                "receiver",
                "Provides statistics about a specific RTCRtpReceiver. The statistics object is an RTCAudioReceiverStats object if kind is audio; if kind is video, the object is an RTCVideoReceiverStats object."
            ],
            [
                "remote-candidate",
                "The report is an RTCIceCandidateStats object containing statistics about the remote candidate's RTCIceTransport. This may include information such as the type of network, the protocol, the URL, the type of relay being used, and so forth."
            ],
            [
                "remote-inbound-rtp",
                "The report is an RTCRemoteInboundRtpStreamStats object providing statistics about your outbound RTP data stream, but from the perspective of the remote peer. That is, this information is about your outbound-rtp stream, but as seen by the remote device that's handling the stream. You can use this information to do things like determine how well the remote peer is receiving data."
            ],
            [
                "remote-outbound-rtp",
                "The report is an RTCRemoteOutboundRtpStreamStats object that contains statistics about your inbound RTP (inbound-rtp) stream, but from the perspective of the remote peer."
            ],
            [
                "sender",
                "An object containing statistics about the RTCRtpSender for a stream on the RTCPeerConnection. If kind is \"audio\", this object is of type RTCAudioSenderStats; if kind is \"video\", this is an RTCVideoSenderStats object."
            ],
            [
                "stream",
                "An object of type RTCMediaStreamStats, providing statistics and information about a MediaStream which is part of the RTCPeerConnection."
            ],
            [
                "track",
                "The object is one of the types based on RTCMediaHandlerStats: for audio tracks, the type is RTCSenderAudioTrackAttachmentStats and for video tracks, the type is RTCSenderVideoTrackAttachmentStats. The data within provides statistics related to a particular MediaStreamTrack's attachment to an RTCRtpSender; also included are the media level metrics that go along with the track."
            ],
            [
                "transport",
                "An object that contains statistics related to a transport for an RTCPeerConnection. The object is of type RTCTransportStats."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCStatsType",
        "",
        "RTCStatsType",
        "The RTCStatsType enumerated type (enum) is a set of strings which define the type of statistics reported in a record found in the RTCStatsReport object. This type determines which of the RTCStats-based dictionaries the record is based upon.",
        [
            [
                "candidate-pair",
                "An RTCIceCandidatePairStats object providing statistics related to an RTCIceTransport. Candidate pairs other than the currently active pair for the transport are deleted when the RTCPeerConnection changes its RTCPeerConnection.iceGatheringState to new during an ICE restart. The active candidate pair is deleted after the transport switches to another candidate pair; this change cannot be detected otherwise."
            ],
            [
                "certificate",
                "An RTCCertificateStats object providing statistics related to a certificate being used by an RTCIceTransport."
            ],
            [
                "codec",
                "An RTCCodecStats object containing statistics about a codec currently being used by RTP streams to send or receive data for the RTCPeerConnection."
            ],
            [
                "csrc",
                "An RTCContributingSourceStats object which contains statistics related to a contributing source (CSRC) that contributed to an inbound RTP stream."
            ],
            [
                "data-channel",
                "An RTCDataChannelStats object which contains statistics about each RTCDataChannel on the connection."
            ],
            [
                "inbound-rtp",
                "An RTCInboundRtpStreamStats object providing statistics about inbound data being received from remote peers. Since this only provides statistics related to inbound data, without considering the local peer's state, any values that require knowledge of both, such as round-trip time, is not included. This report isn't available if there are no connected peers."
            ],
            [
                "local-candidate",
                "An RTCIceCandidateStats object giving statistics about an ICE local candidate; these candidates are found in the output from RTCIceTransport.getLocalCandidates()."
            ],
            [
                "outbound-rtp",
                "The report is an RTCOutboundRtpStreamStats object providing statistics based on the local peer's outgoing data being sent to its peers. This information considers only the outbound RTP stream, so any data which requires information about the state of the remote peers (such as round-trip time) is unavailable, since those values can't be computed without knowing about the other peers' states."
            ],
            [
                "peer-connection",
                "A RTCPeerConnectionStats object provides statistics related to the overall peer connection's RTCPeerConnection."
            ],
            [
                "receiver",
                "Provides statistics about a specific RTCRtpReceiver. The statistics object is an RTCAudioReceiverStats object if kind is audio; if kind is video, the object is an RTCVideoReceiverStats object."
            ],
            [
                "remote-candidate",
                "The report is an RTCIceCandidateStats object containing statistics about the remote candidate's RTCIceTransport. This may include information such as the type of network, the protocol, the URL, the type of relay being used, and so forth."
            ],
            [
                "remote-inbound-rtp",
                "The report is an RTCRemoteInboundRtpStreamStats object providing statistics about your outbound RTP data stream, but from the perspective of the remote peer. That is, this information is about your outbound-rtp stream, but as seen by the remote device that's handling the stream. You can use this information to do things like determine how well the remote peer is receiving data."
            ],
            [
                "remote-outbound-rtp",
                "The report is an RTCRemoteOutboundRtpStreamStats object that contains statistics about your inbound RTP (inbound-rtp) stream, but from the perspective of the remote peer."
            ],
            [
                "sender",
                "An object containing statistics about the RTCRtpSender for a stream on the RTCPeerConnection. If kind is \"audio\", this object is of type RTCAudioSenderStats; if kind is \"video\", this is an RTCVideoSenderStats object."
            ],
            [
                "stream",
                "An object of type RTCMediaStreamStats, providing statistics and information about a MediaStream which is part of the RTCPeerConnection."
            ],
            [
                "track",
                "The object is one of the types based on RTCMediaHandlerStats: for audio tracks, the type is RTCSenderAudioTrackAttachmentStats and for video tracks, the type is RTCSenderVideoTrackAttachmentStats. The data within provides statistics related to a particular MediaStreamTrack's attachment to an RTCRtpSender; also included are the media level metrics that go along with the track."
            ],
            [
                "transport",
                "An object that contains statistics related to a transport for an RTCPeerConnection. The object is of type RTCTransportStats."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCTrackEvent",
        "",
        "RTCTrackEvent",
        "The WebRTC API interface RTCTrackEvent represents the track event, which is sent when a new MediaStreamTrack is added to an RTCRtpReceiver which is part of the RTCPeerConnection. The target is the RTCPeerConnection object to which the track is being added.",
        [
            [
                "RTCTrackEvent()",
                "Creates and returns a new RTCTrackEvent object, initialized with properties taken from the specified RTCTrackEventInit dictionary. You will probably not need to create new track events yourself, since they're typically created by the WebRTC infrastructure and sent to the connection's ontrack event handler."
            ],
            [
                "receiver Read only",
                "The RTCRtpReceiver used by the track that's been added to the RTCPeerConnection."
            ],
            [
                "streams Read only Optional",
                "An array of MediaStream objects, each representing one of the media streams to which the added track belongs. By default, the array is empty, indicating a streamless track."
            ],
            [
                "track Read only",
                "The MediaStreamTrack which has been added to the connection."
            ],
            [
                "transceiver Read only",
                "The RTCRtpTransceiver being used by the new track."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/RTCTrackEventInit",
        "",
        "RTCTrackEventInit",
        "The WebRTC API's RTCTrackEventInit dictionary is used to provide information describing an RTCTrackEvent when instantiating a new track event using new RTCTrackEvent().",
        [
            [
                "receiver",
                "The RTCRtpReceiver which is being used to receive the track's media."
            ],
            [
                "streams Optional",
                "An array of MediaStream objects representing each of the streams that comprise the event's corresponding track."
            ],
            [
                "track",
                "The MediaStreamTrack the event is associated with."
            ],
            [
                "transceiver",
                "The RTCRtpTransceiver associated with the event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Sanitizer",
        "",
        "Sanitizer",
        "This page is not complete.",
        [
            [
                "Sanitizer.Sanitizer",
                "Creates and returns a Sanitizer object."
            ],
            [
                "Sanitizer.sanitizeToString()",
                "Returns a sanitized String from an input, removing any offending elements or attributes."
            ],
            [
                "Sanitizer.sanitize()",
                "Returns a sanitized DocumentFragment from an input, removing any offending elements or attributes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Screen",
        "",
        "Screen",
        "The Screen interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.",
        [
            [
                "Screen.availTop",
                "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features."
            ],
            [
                "Screen.availLeft",
                "Returns the first available pixel available from the left side of the screen."
            ],
            [
                "Screen.availHeight",
                "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows."
            ],
            [
                "Screen.availWidth",
                "Returns the amount of horizontal space in pixels available to the window."
            ],
            [
                "Screen.colorDepth",
                "Returns the color depth of the screen."
            ],
            [
                "Screen.height",
                "Returns the height of the screen in pixels."
            ],
            [
                "Screen.left",
                "Returns the distance in pixels from the left side of the main screen to the left side of the current screen."
            ],
            [
                "Screen.orientation",
                "Returns the ScreenOrientation instance associated with this screen."
            ],
            [
                "Screen.pixelDepth",
                "Gets the bit depth of the screen."
            ],
            [
                "Screen.top",
                "Returns the distance in pixels from the top side of the current screen."
            ],
            [
                "Screen.width",
                "Returns the width of the screen."
            ],
            [
                "Screen.mozEnabled",
                "Boolean. Setting to false will turn off the device's screen."
            ],
            [
                "Screen.mozBrightness",
                "Controls the brightness of a device's screen. A double between 0 and 1.0 is expected."
            ],
            [
                "Screen.onorientationchange",
                "A handler for the orientationchange event."
            ],
            [
                "Screen.lockOrientation",
                "Lock the screen orientation (only works in fullscreen or for installed apps)"
            ],
            [
                "Screen.unlockOrientation",
                "Unlock the screen orientation (only works in fullscreen or for installed apps)"
            ],
            [
                "EventTarget.addEventListener()",
                "Registers an event handler of a specific event type on the EventTarget."
            ],
            [
                "EventTarget.removeEventListener()",
                "Removes an event listener from the EventTarget."
            ],
            [
                "EventTarget.dispatchEvent()",
                "Dispatches an event to this EventTarget."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ScreenOrientation",
        "",
        "ScreenOrientation",
        "",
        [
            [
                "ScreenOrientation.typeRead only",
                "Returns the document's current orientation type, one of \"portrait-primary\", \"portrait-secondary\", \"landscape-primary\", or \"landscape-secondary\"."
            ],
            [
                "ScreenOrientation.angleRead only",
                "Returns the document's current orientation angle."
            ],
            [
                "ScreenOrientation.onchange",
                "The event handler called whenever the screen changes orientation."
            ],
            [
                "ScreenOrientation.lock()",
                "Locks the orientation of the containing document to its default orientation and returns a Promise."
            ],
            [
                "ScreenOrientation.unlock()",
                "Unlocks the orientation of the containing document from its default orientation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ScriptProcessorNode",
        "",
        "ScriptProcessorNode",
        "",
        [
            [
                "ScriptProcessorNode.bufferSize Read only",
                "Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range 256–16384."
            ],
            [
                "audioprocess",
                "Fired when an input buffer of a ScriptProcessorNode is ready to be processed. Also available via the onaudioprocess event handler property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ScrollToOptions",
        "",
        "ScrollToOptions",
        "The ScrollToOptions dictionary of the CSSOM View spec contains properties specifying where an element should be scrolled to, and whether the scrolling should be smooth.",
        [
            [
                "ScrollToOptions.top",
                "Specifies the number of pixels along the Y axis to scroll the window or element."
            ],
            [
                "ScrollToOptions.left",
                "Specifies the number of pixels along the X axis to scroll the window or element."
            ],
            [
                "ScrollToOptions.behavior",
                "Specifies whether the scrolling should animate smoothly, or happen instantly in a single jump. This is actually defined on the ScrollOptions dictionary, which is implemented by ScrollToOptions."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SecurityPolicyViolationEvent",
        "",
        "SecurityPolicyViolationEvent",
        "",
        [
            [
                "SecurityPolicyViolationEvent()",
                "Creates a new SecurityPolicyViolationEvent object instance."
            ],
            [
                "SecurityPolicyViolationEvent.blockedURIRead only",
                "A USVString representing the URI of the resource that was blocked because it violates a policy."
            ],
            [
                "SecurityPolicyViolationEvent.columnNumberRead only",
                "The column number in the document or worker at which the violation occurred."
            ],
            [
                "SecurityPolicyViolationEvent.dispositionRead only",
                "Indicates how the violated policy is configured to be treated by the user agent. This will be \"enforce\" or \"report\"."
            ],
            [
                "SecurityPolicyViolationEvent.documentURIRead only",
                "A USVString representing the URI of the document or worker in which the violation was found."
            ],
            [
                "SecurityPolicyViolationEvent.effectiveDirectiveRead only",
                "A DOMString representing the directive whose enforcement uncovered the violation."
            ],
            [
                "SecurityPolicyViolationEvent.lineNumberRead only",
                "The line number in the document or worker at which the violation occurred."
            ],
            [
                "SecurityPolicyViolationEvent.originalPolicyRead only",
                "A DOMString containing the policy whose enforcement uncovered the violation."
            ],
            [
                "SecurityPolicyViolationEvent.referrerRead only",
                "A USVString representing the referrer of the resources whose policy was violated. This will be a URL or null."
            ],
            [
                "SecurityPolicyViolationEvent.sampleRead only",
                "A DOMString representing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style — external resources causing a violation will not generate a sample."
            ],
            [
                "SecurityPolicyViolationEvent.sourceFileRead only",
                "A USVString representing the URI of the document or worker in which the violation was found."
            ],
            [
                "SecurityPolicyViolationEvent.statusCodeRead only",
                "A number representing the HTTP status code of the document or worker in which the violation occurred."
            ],
            [
                "SecurityPolicyViolationEvent.violatedDirectiveRead only",
                "A DOMString representing the directive whose enforcement uncovered the violation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Selection",
        "",
        "Selection",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "Selection.anchorNodeRead only",
                "Returns the Node in which the selection begins. Can return null if selection never existed in the document (e.g., an iframe that was never clicked on)."
            ],
            [
                "Selection.anchorOffsetRead only",
                "Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor."
            ],
            [
                "Selection.focusNodeRead only",
                "Returns the Node in which the selection ends. Can return null if selection never existed in the document (for example, in an iframe that was never clicked on)."
            ],
            [
                "Selection.focusOffsetRead only",
                "Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus."
            ],
            [
                "Selection.isCollapsedRead only",
                "Returns a Boolean indicating whether the selection's start and end points are at the same position."
            ],
            [
                "Selection.rangeCountRead only",
                "Returns the number of ranges in the selection."
            ],
            [
                "Selection.typeRead only",
                "Returns a DOMString describing the type of the current selection."
            ],
            [
                "Selection.addRange()",
                "A Range object that will be added to the selection."
            ],
            [
                "Selection.collapse()",
                "Collapses the current selection to a single point."
            ],
            [
                "Selection.collapseToEnd()",
                "Collapses the selection to the end of the last range in the selection."
            ],
            [
                "Selection.collapseToStart()",
                "Collapses the selection to the start of the first range in the selection."
            ],
            [
                "Selection.containsNode()",
                "Indicates if a certain node is part of the selection."
            ],
            [
                "Selection.deleteFromDocument()",
                "Deletes the selection's content from the document."
            ],
            [
                "Selection.extend()",
                "Moves the focus of the selection to a specified point."
            ],
            [
                "Selection.getRangeAt()",
                "Returns a Range object representing one of the ranges currently selected."
            ],
            [
                "Selection.modify()",
                "Changes the current selection."
            ],
            [
                "Selection.removeRange()",
                "Removes a range from the selection."
            ],
            [
                "Selection.removeAllRanges()",
                "Removes all ranges from the selection."
            ],
            [
                "Selection.selectAllChildren()",
                "Adds all the children of the specified node to the selection."
            ],
            [
                "Selection.setBaseAndExtent()",
                "Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them."
            ],
            [
                "Selection.toString()",
                "Returns a string currently being represented by the selection object, i.e. the currently selected text."
            ],
            [
                "anchor",
                "The anchor of a selection is the beginning point of the selection. When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed. As the user changes the selection using the mouse or the keyboard, the anchor does not move."
            ],
            [
                "editing host",
                "An editable element (e.g., an HTML element with contenteditable set, or the HTML child of a document that has designMode enabled)."
            ],
            [
                "focus of a selection",
                "The focus of a selection is the end point of the selection. When making a selection with a mouse, the focus is where in the document the mouse button is released. As the user changes the selection using the mouse or the keyboard, the focus is the end of the selection that moves. This is not the same as the focused element of the document, as returned by document.activeElement."
            ],
            [
                "range",
                "A range is a contiguous part of a document. A range can contain entire nodes as well as portions of nodes (such as a portion of a text node). A user will normally only select a single range at a time, but it's possible for a user to select multiple ranges (e.g., by using the Control key). A range can be retrieved from a selection as a range object. Range objects can also be created via the DOM and programmatically added or removed from a selection."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Sensor",
        "",
        "Sensor",
        "The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces. This interface cannot be used directly. Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.",
        [
            [
                "Sensor.activated Read only",
                "Returns a Boolean indicating whether the sensor is active."
            ],
            [
                "Sensor.hasReading Read only",
                "Returns a Boolean indicating whether the sensor has a reading."
            ],
            [
                "Sensor.timestamp Read only",
                "Returns the time stamp of the latest sensor reading."
            ],
            [
                "Sensor.onerror",
                "Called when an error occurs on one of the child interfaces of the Sensor interface."
            ],
            [
                "Sensor.onreading",
                "Called when a reading is taken on one of the child interfaces of the Sensor interface."
            ],
            [
                "Sensor.onactivate",
                "Called when one of the Sensor interface's becomes active."
            ],
            [
                "Sensor.start()",
                "Activates one of the sensors based on Sensor."
            ],
            [
                "Sensor.stop()",
                "Deactivates one of the sensors based on Sensor."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SensorErrorEvent",
        "",
        "SensorErrorEvent",
        "The SensorErrorEvent interface of the Sensor APIs provides information about errors thrown by a Sensor or derivated interface.",
        [
            [
                "SensorErrorEvent()",
                "Creates a new SensorErrorEvent object."
            ],
            [
                "SensorErrorEvent.error Read only",
                "Returns the DOMException object passed in the event's contructor."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Serial",
        "",
        "Serial",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "Serial.onconnect",
                "An event handler called when a port has been connected to the device."
            ],
            [
                "Serial.ondisconnect",
                "An event handler called when a port has been disconnected from the device."
            ],
            [
                "Serial.requestPort()",
                "Returns a Promise that resolves with an instance of SerialPort representing the device chosen by the user or rejects if no device was selected. This method must be called with user activation."
            ],
            [
                "Serial.getPorts()",
                "Returns a Promise that resolves with an array of SerialPort objects representing serial ports connected to the host which the origin has permission to access."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SerialPort",
        "",
        "SerialPort",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "SerialPort.readableRead only",
                "Returns a ReadableStream for receiving data from the device connected to the port."
            ],
            [
                "SerialPort.writableRead only",
                "Returns a WritableStream for sending data to the device connected to the port."
            ],
            [
                "SerialPort.onconnect",
                "An event handler called when the port has connected to the device."
            ],
            [
                "SerialPort.ondisconnect",
                "An event handler called when the port has disconnected from the device."
            ],
            [
                "SerialPort.getInfo()",
                "Returns a Promise that resolves with an object containing properties of the port."
            ],
            [
                "SerialPort.open()",
                "Returns a Promise that resolves when the port is opened. By default the port is opened with 8 data bits, 1 stop bit and no parity checking."
            ],
            [
                "SerialPort.setSignals()",
                "Sets control signals on the port and returns a Promise that resolves when they are set."
            ],
            [
                "SerialPort.getSignals()",
                "Returns a Promise that resolves with an object containing the current state of the port's control signals."
            ],
            [
                "SerialPort.close()",
                "Returns a Promise that resolves when the port closes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ServiceWorker",
        "",
        "ServiceWorker",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "ServiceWorker.scriptURL Read only",
                "Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker."
            ],
            [
                "ServiceWorker.state Read only",
                "Returns the state of the service worker. It returns one of the following values: installing, installed, activating, activated, or redundant."
            ],
            [
                "ServiceWorker.onstatechange Read only",
                "An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ServiceWorkerContainer",
        "",
        "ServiceWorkerContainer",
        "",
        [
            [
                "ServiceWorkerContainer.controller Read only",
                "Returns a ServiceWorker object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active). This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker."
            ],
            [
                "ServiceWorkerContainer.ready Read only",
                "Provides a way of delaying code execution until a service worker is active. It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker. Once that condition is met, it resolves with the ServiceWorkerRegistration."
            ],
            [
                "controllerchange",
                "Occurs when the document's associated ServiceWorkerRegistration acquires a new active worker. Also available via the ServiceWorkerContainer.oncontrollerchange property."
            ],
            [
                "error",
                "Fired whenever an error occurs in the associated service workers."
            ],
            [
                "message",
                "Occurs when incoming messages are received by the ServiceWorkerContainer object (e.g. via a MessagePort.postMessage() call.) Also available via the ServiceWorkerContainer.onmessage property."
            ],
            [
                "ServiceWorkerContainer.register()",
                "Creates or updates a ServiceWorkerRegistration for the given scriptURL."
            ],
            [
                "ServiceWorkerContainer.getRegistration()",
                "Gets a ServiceWorkerRegistration object whose scope matches the provided document URL. The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined."
            ],
            [
                "ServiceWorkerContainer.getRegistrations()",
                "Returns all ServiceWorkerRegistration objects associated with a ServiceWorkerContainer in an array. The method returns a Promise that resolves to an array of ServiceWorkerRegistration."
            ],
            [
                "ServiceWorkerContainer.startMessages()",
                "explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()). This can be used to react to sent messages earlier, even before that page's content has finished loading."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ServiceWorkerGlobalScope",
        "",
        "ServiceWorkerGlobalScope",
        "The ServiceWorkerGlobalScope interface of the Service Worker API represents the global execution context of a service worker.",
        [
            [
                "ServiceWorkerGlobalScope.caches Read only",
                "Contains the CacheStorage object associated with the service worker."
            ],
            [
                "ServiceWorkerGlobalScope.clients Read only",
                "Contains the Clients object associated with the service worker."
            ],
            [
                "ServiceWorkerGlobalScope.registration Read only",
                "Contains the ServiceWorkerRegistration object that represents the service worker's registration."
            ],
            [
                "activate",
                "Occurs when a ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker. Also available via the ServiceWorkerGlobalScope.onactivate property."
            ],
            [
                "contentdelete",
                "Occurs when an item is removed from the Content Index. Also available via the ServiceWorkerGlobalScope.oncontentdelete property."
            ],
            [
                "fetch",
                "Occurs when a fetch() is called. Also available via the ServiceWorkerGlobalScope.onfetch property."
            ],
            [
                "install",
                "Occurs when a ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.installing worker. Also available via the ServiceWorkerGlobalScope.oninstall property."
            ],
            [
                "message",
                "Occurs when incoming messages are received. Controlled pages can use the MessagePort.postMessage() method to send messages to service workers. The service worker can optionally send a response back via the MessagePort exposed in event.data.port, corresponding to the controlled page. Also available via the ServiceWorkerGlobalScope.onmessage property."
            ],
            [
                "notificationclick",
                "Occurs when a user clicks on a displayed notification. Also available via the ServiceWorkerGlobalScope.onnotificationclick property."
            ],
            [
                "notificationclose",
                "Occurs — when a user closes a displayed notification. Also available via the ServiceWorkerGlobalScope.onnotificationclose property."
            ],
            [
                "periodicsync",
                "Occurs at periodic intervals, which were specified when registering a PeriodicSyncManager. Also available via the ServiceWorkerGlobalScope.onperiodicsync property."
            ],
            [
                "push",
                "Occurs when a server push notification is received. Also available via the ServiceWorkerGlobalScope.onpush property."
            ],
            [
                "pushsubscriptionchange",
                "Occurs when a push subscription has been invalidated, or is about to be invalidated (e.g. when a push service sets an expiration time). Also available via the ServiceWorkerGlobalScope.onpushsubscriptionchange property."
            ],
            [
                "sync",
                "Triggered when a call to SyncManager.register is made from a service worker client page. The attempt to sync is made either immediately if the network is available or as soon as the network becomes available. Also available via the ServiceWorkerGlobalScope.onsync property."
            ],
            [
                "ServiceWorkerGlobalScope.skipWaiting()",
                "Allows the current service worker registration to progress from waiting to active state while service worker clients are using it."
            ],
            [
                "GlobalFetch.fetch()",
                "Starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request. This algorithm is the entry point for the fetch handling handed to the service worker context."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ServiceWorkerMessageEvent",
        "",
        "ServiceWorkerMessageEvent",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "ServiceWorkerMessageEvent.ServiceWorkerMessageEvent()",
                "Creates a new ServiceWorkerMessageEvent object instance."
            ],
            [
                "ServiceWorkerMessageEvent.data Read only",
                "Returns the event's data. It can be any data type."
            ],
            [
                "ServiceWorkerMessageEvent.origin Read only",
                "Returns the origin of the service worker's environment settings object."
            ],
            [
                "ServiceWorkerMessageEvent.lastEventId Read only",
                "Represents, in server-sent events, the last event ID of the event source."
            ],
            [
                "ServiceWorkerMessageEvent.source Read only",
                "Returns a reference to the service worker that sent the message."
            ],
            [
                "ServiceWorkerMessageEvent.ports Read only",
                "Returns an array of MessagePort objects."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ServiceWorkerRegistration",
        "",
        "ServiceWorkerRegistration",
        "The ServiceWorkerRegistration interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.",
        [
            [
                "ServiceWorkerRegistration.scope Read only",
                "Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the ServiceWorker."
            ],
            [
                "ServiceWorkerRegistration.installing Read only",
                "Returns a service worker whose state is installing. This is initially set to null."
            ],
            [
                "ServiceWorkerRegistration.waiting Read only",
                "Returns a service worker whose state is installed. This is initially set to null."
            ],
            [
                "ServiceWorkerRegistration.active Read only",
                "Returns a service worker whose state is activating or activated. This is initially set to null. An active worker will control a Client if the client's URL falls within the scope of the registration (the scope option set when ServiceWorkerContainer.register is first called.)"
            ],
            [
                "ServiceWorkerRegistration.navigationPreload Read only",
                "Returns the instance of NavigationPreloadManager associated with the current service worker registration."
            ],
            [
                "ServiceWorkerRegistration.pushManager Read only",
                "Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status."
            ],
            [
                "ServiceWorkerRegistration.sync Read only",
                "Returns a reference to the SyncManager interface, which manages background synchronization processes."
            ],
            [
                "ServiceWorkerRegistration.index Read only",
                "Returns a reference to the ContentIndex interface, for managing indexed content for offline viewing."
            ],
            [
                "serviceWorkerRegistration.periodicSync Read only",
                "Returns a reference to the PeriodicSyncManager interface, which manages periodic background synchronization processes. This was mentioned as an idea in the SW explainer at some point, but as yet has not been implemented anywhere."
            ],
            [
                "ServiceWorkerRegistration.onupdatefound Read only",
                "An EventListener property called whenever an event of type updatefound is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker."
            ],
            [
                "ServiceWorkerRegistration.getNotifications()",
                "Returns a Promise that resolves to an array of Notification objects."
            ],
            [
                "ServiceWorkerRegistration.showNotification()",
                "Displays the notification with the requested title."
            ],
            [
                "ServiceWorkerRegistration.update()",
                "Checks the server for an updated version of the service worker without consulting caches."
            ],
            [
                "ServiceWorkerRegistration.unregister()",
                "Unregisters the service worker registration and returns a Promise. The service worker will finish any ongoing operations before it is unregistered."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ShadowRoot",
        "",
        "ShadowRoot",
        "The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.",
        [
            [
                "ShadowRoot.activeElement Read only",
                "Returns the Element within the shadow tree that has focus."
            ],
            [
                "ShadowRoot.delegatesFocus Read only",
                "Returns a boolean that indicates whether delegatesFocus was set when the shadow was attached (see Element.attachShadow())."
            ],
            [
                "ShadowRoot.fullscreenElement Read only",
                "The element that's currently in full screen mode for this shadow tree."
            ],
            [
                "ShadowRoot.host Read only",
                "Returns a reference to the DOM element the ShadowRoot is attached to."
            ],
            [
                "ShadowRoot.innerHTML",
                "Sets or returns a reference to the DOM tree inside the ShadowRoot."
            ],
            [
                "ShadowRoot.mode Read only",
                "The mode of the ShadowRoot — either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript."
            ],
            [
                "ShadowRoot.pictureInPictureElement Read only",
                "Returns the Element within the shadow tree that is currently being presented in picture-in-picture mode."
            ],
            [
                "ShadowRoot.pointerLockElement Read only",
                "Returns the Element set as the target for mouse events while the pointer is locked. null if lock is pending, pointer is unlocked, or if the target is in another tree."
            ],
            [
                "ShadowRoot.styleSheets Read only",
                "Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a shadow tree."
            ],
            [
                "ShadowRoot.getAnimations()",
                "Returns an array of all Animation objects currently in effect, whose target elements are descendants of the shadow tree."
            ],
            [
                "ShadowRoot.getSelection()",
                "Returns a Selection object representing the range of text selected by the user, or the current position of the caret."
            ],
            [
                "ShadowRoot.elementFromPoint()",
                "Returns the topmost element at the specified coordinates."
            ],
            [
                "ShadowRoot.elementsFromPoint()",
                "Returns an array of all elements at the specified coordinates."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SharedWorker",
        "",
        "SharedWorker",
        "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
        [
            [
                "SharedWorker()",
                "Creates a shared web worker that executes the script at the specified URL."
            ],
            [
                "SharedWorker.onerror",
                "Is an EventListener that is called whenever an ErrorEvent of type error event occurs."
            ],
            [
                "SharedWorker.port Read only",
                "Returns a MessagePort object used to communicate with and control the shared worker."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SharedWorkerGlobalScope",
        "",
        "SharedWorkerGlobalScope",
        "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.",
        [
            [
                "SharedWorkerGlobalScope.name Read only",
                "The name that the SharedWorker was (optionally) given when it was created using the SharedWorker() constructor. This is mainly useful for debugging purposes."
            ],
            [
                "SharedWorkerGlobalScope.applicationCache Read only",
                "This property returns the ApplicationCache object for the worker (see Using the application cache)."
            ],
            [
                "WorkerGlobalScope.self",
                "Returns an object reference to the DedicatedWorkerGlobalScope object itself."
            ],
            [
                "WorkerGlobalScope.console Read only",
                "Returns the console object associated with the worker."
            ],
            [
                "WorkerGlobalScope.location Read only",
                "Returns the WorkerLocation associated with the worker. WorkerLocation is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers."
            ],
            [
                "WorkerGlobalScope.navigator Read only",
                "Returns the WorkerNavigator associated with the worker. WorkerNavigator is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers."
            ],
            [
                "WorkerGlobalScope.performance Read only",
                "Returns the Performance object associated with the worker, which is a regular performance object, but with a subset of its properties and methods available."
            ],
            [
                "SharedWorkerGlobalScope.onconnect",
                "Is an event handler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread."
            ],
            [
                "SharedWorkerGlobalScope.close()",
                "Discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope."
            ],
            [
                "WorkerGlobalScope.dump()",
                "Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's window.dump, but for workers."
            ],
            [
                "WorkerGlobalScope.importScripts()",
                "Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example: importScripts('foo.js', 'bar.js');"
            ],
            [
                "WindowBase64.atob()",
                "Decodes a string of data which has been encoded using base-64 encoding."
            ],
            [
                "WindowBase64.btoa()",
                "Creates a base-64 encoded ASCII string from a string of binary data."
            ],
            [
                "WindowTimers.clearInterval()",
                "Cancels the repeated execution set using WindowTimers.setInterval()."
            ],
            [
                "WindowTimers.clearTimeout()",
                "Cancels the repeated execution set using WindowTimers.setTimeout()."
            ],
            [
                "WindowTimers.setInterval()",
                "Schedules the execution of a function every X milliseconds."
            ],
            [
                "WindowTimers.setTimeout()",
                "Sets a delay for executing a function."
            ],
            [
                "connect",
                "Fired on shared workers when a new client connects. Also available via the onconnect property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SourceBuffer",
        "",
        "SourceBuffer",
        "",
        [
            [
                "SourceBuffer.appendWindowEnd",
                "Controls the timestamp for the end of the append window."
            ],
            [
                "SourceBuffer.appendWindowStart",
                "Controls the timestamp for the start of the append window. This is a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps within this range will be appended, whereas those outside the range will be filtered out."
            ],
            [
                "SourceBuffer.audioTracks Read only",
                "A list of the audio tracks currently contained inside the SourceBuffer."
            ],
            [
                "SourceBuffer.buffered Read only",
                "Returns the time ranges that are currently buffered in the SourceBuffer."
            ],
            [
                "SourceBuffer.mode",
                "Controls how the order of media segments in the SourceBuffer is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence."
            ],
            [
                "SourceBuffer.textTracks Read only",
                "A list of the text tracks currently contained inside the SourceBuffer."
            ],
            [
                "SourceBuffer.timestampOffset",
                "Controls the offset applied to timestamps inside media segments that are subsequently appended to the SourceBuffer."
            ],
            [
                "SourceBuffer.trackDefaults",
                "Specifies the default values to use if kind, label, and/or language information is not available in the initialization segment of the media to be appended to the SourceBuffer."
            ],
            [
                "SourceBuffer.updating Read only",
                "A boolean indicating whether the SourceBuffer is currently being updated — i.e. whether an SourceBuffer.appendBuffer(), SourceBuffer.appendStream(), or SourceBuffer.remove() operation is currently in progress."
            ],
            [
                "SourceBuffer.videoTracks Read only",
                "A list of the video tracks currently contained inside the SourceBuffer."
            ],
            [
                "SourceBuffer.onabort",
                "Fired whenever SourceBuffer.appendBuffer() or SourceBuffer.appendStream() is ended by a call to SourceBuffer.abort(). SourceBuffer.updating changes from true to false."
            ],
            [
                "SourceBuffer.onerror",
                "Fired whenever an error occurs during SourceBuffer.appendBuffer() or SourceBuffer.appendStream(). SourceBuffer.updating changes from true to false."
            ],
            [
                "SourceBuffer.onupdate",
                "Fired whenever SourceBuffer.appendBuffer() method or the SourceBuffer.remove() completes. SourceBuffer.updating changes from true to false. This event is fired before onupdateend."
            ],
            [
                "SourceBuffer.onupdateend",
                "Fired whenever SourceBuffer.appendBuffer() method or the SourceBuffer.remove() has ended. This event is fired after onupdate."
            ],
            [
                "SourceBuffer.onupdatestart",
                "Fired whenever the value of SourceBuffer.updating transitions from false to true."
            ],
            [
                "SourceBuffer.abort()",
                "Aborts the current segment and resets the segment parser."
            ],
            [
                "SourceBuffer.appendBuffer()",
                "Appends media segment data from an ArrayBuffer or ArrayBufferView object to the SourceBuffer."
            ],
            [
                "SourceBuffer.appendBufferAsync()",
                "Starts the process of asynchronously appending the specified buffer to the SourceBuffer. Returns a Promise which is fulfilled once the buffer has been appended."
            ],
            [
                "SourceBuffer.appendStream()",
                "Appends media segment data from a ReadableStream object to the SourceBuffer."
            ],
            [
                "SourceBuffer.changeType()",
                "Changes the MIME type that future calls to appendBuffer() will expect the new data to conform to."
            ],
            [
                "SourceBuffer.remove()",
                "Removes media segments within a specific time range from the SourceBuffer."
            ],
            [
                "SourceBuffer.removeAsync()",
                "Starts the process of asynchronously removing media segments in the specified range from the SourceBuffer. Returns a Promise which is fulfilled once all matching segments have been removed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SourceBufferList",
        "",
        "SourceBufferList",
        "",
        [
            [
                "SourceBufferList.length Read only",
                "Returns the number of SourceBuffer objects in the list."
            ],
            [
                "SourceBufferList.onaddsourcebuffer",
                "The event handler for the addsourcebuffer event."
            ],
            [
                "SourceBufferList.onremovesourcebuffer",
                "The event handler for the removesourcebuffer event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechGrammar",
        "",
        "SpeechGrammar",
        "",
        [
            [
                "SpeechGrammar()",
                "Creates a new SpeechGrammar object."
            ],
            [
                "SpeechGrammar.src",
                "Sets and returns a string containing the grammar from within in the SpeechGrammar object instance."
            ],
            [
                "SpeechGrammar.weight Optional",
                "Sets and returns the weight of the SpeechGrammar object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechGrammarList",
        "",
        "SpeechGrammarList",
        "",
        [
            [
                "SpeechGrammarList.SpeechGrammarList()",
                "Creates a new SpeechGrammarList object."
            ],
            [
                "SpeechGrammarList.length Read only",
                "Returns the number of SpeechGrammar objects contained in the SpeechGrammarList."
            ],
            [
                "SpeechGrammarList.item()",
                "Standard getter — allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax."
            ],
            [
                "SpeechGrammarList.addFromURI()",
                "Takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object."
            ],
            [
                "SpeechGrammarList.addFromString()",
                "Takes a grammar present in a specific DOMString within the code base (e.g. stored in a variable) and adds it to the SpeechGrammarList as a new SpeechGrammar object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognition",
        "",
        "SpeechRecognition",
        "",
        [
            [
                "SpeechRecognition.SpeechRecognition()",
                "Creates a new SpeechRecognition object."
            ],
            [
                "SpeechRecognition.grammars",
                "Returns and sets a collection of SpeechGrammar objects that represent the grammars that will be understood by the current SpeechRecognition."
            ],
            [
                "SpeechRecognition.lang",
                "Returns and sets the language of the current SpeechRecognition. If not specified, this defaults to the HTML lang attribute value, or the user agent's language setting if that isn't set either."
            ],
            [
                "SpeechRecognition.continuous",
                "Controls whether continuous results are returned for each recognition, or only a single result. Defaults to single (false.)"
            ],
            [
                "SpeechRecognition.interimResults",
                "Controls whether interim results should be returned (true) or not (false.) Interim results are results that are not yet final (e.g. the SpeechRecognitionResult.isFinal property is false.)"
            ],
            [
                "SpeechRecognition.maxAlternatives",
                "Sets the maximum number of SpeechRecognitionAlternatives provided per result. The default value is 1."
            ],
            [
                "SpeechRecognition.serviceURI",
                "Specifies the location of the speech recognition service used by the current SpeechRecognition to handle the actual recognition. The default is the user agent's default speech service."
            ],
            [
                "SpeechRecognition.abort()",
                "Stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a SpeechRecognitionResult."
            ],
            [
                "SpeechRecognition.start()",
                "Starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition."
            ],
            [
                "SpeechRecognition.stop()",
                "Stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far."
            ],
            [
                "audiostart",
                "Fired when the user agent has started to capture audio. Also available via the onaudiostart property."
            ],
            [
                "audioend",
                "Fired when the user agent has finished capturing audio. Also available via the onaudioend property."
            ],
            [
                "end",
                "Fired when the speech recognition service has disconnected. Also available via the onend property."
            ],
            [
                "error",
                "Fired when a speech recognition error occurs. Also available via the onerror property."
            ],
            [
                "nomatch",
                "Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the confidence threshold. Also available via the onnomatch property."
            ],
            [
                "result",
                "Fired when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app. Also available via the onresult property."
            ],
            [
                "soundstart",
                "Fired when any sound — recognisable speech or not — has been detected. Also available via the onsoundstart property."
            ],
            [
                "soundend",
                "Fired when any sound — recognisable speech or not — has stopped being detected. Also available via the onsoundend property."
            ],
            [
                "speechstart",
                "Fired when sound that is recognized by the speech recognition service as speech has been detected. Also available via the onspeechstart property."
            ],
            [
                "speechend",
                "Fired when speech recognized by the speech recognition service has stopped being detected. Also available via the onspeechend property."
            ],
            [
                "start",
                "Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. Also available via the onstart property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognitionAlternative",
        "",
        "SpeechRecognitionAlternative",
        "",
        [
            [
                "SpeechRecognitionAlternative.transcript Read only",
                "Returns a string containing the transcript of the recognized word."
            ],
            [
                "SpeechRecognitionAlternative.confidence Read only",
                "Returns a numeric estimate of how confident the speech recognition system is that the recognition is correct."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognitionError",
        "",
        "SpeechRecognitionError",
        "",
        [
            [
                "SpeechRecognitionError.error Read only",
                "Returns the type of error raised."
            ],
            [
                "SpeechRecognitionError.message Read only",
                "Returns a message describing the error in more detail."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognitionErrorEvent",
        "",
        "SpeechRecognitionErrorEvent",
        "",
        [
            [
                "SpeechRecognitionErrorEvent.error Read only",
                "Returns the type of error raised."
            ],
            [
                "SpeechRecognitionErrorEvent.message Read only",
                "Returns a message describing the error in more detail."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognitionEvent",
        "",
        "SpeechRecognitionEvent",
        "",
        [
            [
                "SpeechRecognitionEvent.emma Read only",
                "Returns an Extensible MultiModal Annotation markup language (EMMA) — XML — representation of the result."
            ],
            [
                "SpeechRecognitionEvent.interpretation Read only",
                "Returns the semantic meaning of what the user said."
            ],
            [
                "SpeechRecognitionEvent.resultIndex Read only",
                "Returns the lowest index value result in the SpeechRecognitionResultList \"array\" that has actually changed."
            ],
            [
                "SpeechRecognitionEvent.results Read only",
                "Returns a SpeechRecognitionResultList object representing all the speech recognition results for the current session."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognitionResult",
        "",
        "SpeechRecognitionResult",
        "",
        [
            [
                "SpeechRecognitionResult.isFinal Read only",
                "A Boolean that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on."
            ],
            [
                "SpeechRecognitionResult.length Read only",
                "Returns the length of the \"array\" — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as \"n-best alternatives\".)"
            ],
            [
                "SpeechRecognitionResult.item",
                "A standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechRecognitionResultList",
        "",
        "SpeechRecognitionResultList",
        "",
        [
            [
                "SpeechRecognitionResultList.length Read only",
                "Returns the length of the \"array\" — the number of SpeechRecognitionResult objects in the list."
            ],
            [
                "SpeechRecognitionResultList.item",
                "A standard getter that allows SpeechRecognitionResult objects in the list to be accessed via array syntax."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechSynthesis",
        "",
        "SpeechSynthesis",
        "",
        [
            [
                "SpeechSynthesis.paused Read only",
                "A Boolean that returns true if the SpeechSynthesis object is in a paused state."
            ],
            [
                "SpeechSynthesis.pending Read only",
                "A Boolean that returns true if the utterance queue contains as-yet-unspoken utterances."
            ],
            [
                "SpeechSynthesis.speaking Read only",
                "A Boolean that returns true if an utterance is currently in the process of being spoken — even if SpeechSynthesis is in a paused state."
            ],
            [
                "SpeechSynthesis.cancel()",
                "Removes all utterances from the utterance queue."
            ],
            [
                "SpeechSynthesis.getVoices()",
                "Returns a list of SpeechSynthesisVoice objects representing all the available voices on the current device."
            ],
            [
                "SpeechSynthesis.pause()",
                "Puts the SpeechSynthesis object into a paused state."
            ],
            [
                "SpeechSynthesis.resume()",
                "Puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused."
            ],
            [
                "SpeechSynthesis.speak()",
                "Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken."
            ],
            [
                "voiceschanged",
                "Fired when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed. Also available via the onvoiceschanged property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechSynthesisErrorEvent",
        "",
        "SpeechSynthesisErrorEvent",
        "",
        [
            [
                "SpeechSynthesisErrorEvent.error Read only",
                "Returns an error code indicating what has gone wrong with a speech synthesis attempt."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechSynthesisEvent",
        "",
        "SpeechSynthesisEvent",
        "",
        [
            [
                "SpeechSynthesisEvent.charIndex Read only",
                "Returns the index position of the character in the SpeechSynthesisUtterance.text that was being spoken when the event was triggered."
            ],
            [
                "SpeechSynthesisEvent.elapsedTime Read only",
                "Returns the elapsed time in seconds after the SpeechSynthesisUtterance.text started being spoken that the event was triggered at."
            ],
            [
                "SpeechSynthesisEvent.name Read only",
                "Returns the name associated with certain types of events occurring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a mark event, or the type of boundary reached in the case of a boundary event."
            ],
            [
                "SpeechSynthesisEvent.utterance Read only",
                "Returns the SpeechSynthesisUtterance instance that the event was triggered on."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechSynthesisUtterance",
        "",
        "SpeechSynthesisUtterance",
        "",
        [
            [
                "SpeechSynthesisUtterance.SpeechSynthesisUtterance()",
                "Returns a new SpeechSynthesisUtterance object instance."
            ],
            [
                "SpeechSynthesisUtterance.lang",
                "Gets and sets the language of the utterance."
            ],
            [
                "SpeechSynthesisUtterance.pitch",
                "Gets and sets the pitch at which the utterance will be spoken at."
            ],
            [
                "SpeechSynthesisUtterance.rate",
                "Gets and sets the speed at which the utterance will be spoken at."
            ],
            [
                "SpeechSynthesisUtterance.text",
                "Gets and sets the text that will be synthesised when the utterance is spoken."
            ],
            [
                "SpeechSynthesisUtterance.voice",
                "Gets and sets the voice that will be used to speak the utterance."
            ],
            [
                "SpeechSynthesisUtterance.volume",
                "Gets and sets the volume that the utterance will be spoken at."
            ],
            [
                "boundary",
                "Fired when the spoken utterance reaches a word or sentence boundary. Also available via the onboundary property."
            ],
            [
                "end",
                "Fired when the utterance has finished being spoken. Also available via the onend property."
            ],
            [
                "error",
                "Fired when an error occurs that prevents the utterance from being successfully spoken. Also available via the onerror property"
            ],
            [
                "mark",
                "Fired when the spoken utterance reaches a named SSML \"mark\" tag. Also available via the onmark property."
            ],
            [
                "pause",
                "Fired when the utterance is paused part way through. Also available via the onpause property."
            ],
            [
                "resume",
                "Fired when a paused utterance is resumed. Also available via the onresume property."
            ],
            [
                "start",
                "Fired when the utterance has begun to be spoken. Also available via the onstart property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SpeechSynthesisVoice",
        "",
        "SpeechSynthesisVoice",
        "",
        [
            [
                "SpeechSynthesisVoice.default Read only",
                "A Boolean indicating whether the voice is the default voice for the current app language (true), or not (false.)"
            ],
            [
                "SpeechSynthesisVoice.lang Read only",
                "Returns a BCP 47 language tag indicating the language of the voice."
            ],
            [
                "SpeechSynthesisVoice.localService Read only",
                "A Boolean indicating whether the voice is supplied by a local speech synthesizer service (true), or a remote speech synthesizer service (false.)"
            ],
            [
                "SpeechSynthesisVoice.name Read only",
                "Returns a human-readable name that represents the voice."
            ],
            [
                "SpeechSynthesisVoice.voiceURI Read only",
                "Returns the type of URI and location of the speech synthesis service for this voice."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StaticRange",
        "",
        "StaticRange",
        "",
        [
            [
                "StaticRange()",
                "Creates a new StaticRange object given the StaticRangeInit dictionary specifying the default values for its properties."
            ],
            [
                "StaticRange.collapsed Read only",
                "Returns a Boolean value which is true if the range's start and end positions are the same, resulting in a range of length 0."
            ],
            [
                "StaticRange.endContainer Read only",
                "Returns the DOM Node which contains the ending point of the range. The offset into the node at which the end position is located is indicated by endOffset."
            ],
            [
                "StaticRange.endOffset Read only",
                "Returns an integer value indicating the offset into the node given by endContainer at which the last character of the range is found."
            ],
            [
                "StaticRange.startContainer Read only",
                "Returns the DOM Node which contains the starting point of the range (which is in turn identified by startOffset."
            ],
            [
                "StaticRange.startOffset Read only",
                "Returns an integer value indicating the offset into the node specified by startContainer at which the first character of the range is located."
            ],
            [
                "StaticRange.toRange()",
                "Returns a new Range object which describes the same range as the source StaticRange, but is \"live\" with values that change to reflect changes in the contents of the DOM tree."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StereoPannerNode",
        "",
        "StereoPannerNode",
        "",
        [
            [
                "StereoPannerNode()",
                "Creates a new instance of a StereoPannerNode object."
            ],
            [
                "StereoPannerNode.pan Read only",
                "Is an a-rate AudioParam representing the amount of panning to apply."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Storage",
        "",
        "Storage",
        "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
        [
            [
                "Storage.length Read only",
                "Returns an integer representing the number of data items stored in the Storage object."
            ],
            [
                "Storage.key()",
                "When passed a number n, this method will return the name of the nth key in the storage."
            ],
            [
                "Storage.getItem()",
                "When passed a key name, will return that key's value."
            ],
            [
                "Storage.setItem()",
                "When passed a key name and value, will add that key to the storage, or update that key's value if it already exists."
            ],
            [
                "Storage.removeItem()",
                "When passed a key name, will remove that key from the storage."
            ],
            [
                "Storage.clear()",
                "When invoked, will empty all keys out of the storage."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StorageEstimate",
        "",
        "StorageEstimate",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "quota Secure context",
                "A numeric value in bytes which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case."
            ],
            [
                "usage Secure context",
                "A numeric value in bytes approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by quota. Unit is byte."
            ],
            [
                "usageDetails Secure context",
                "A dictionary containing a breakdown of usage by storage system. All included members will have a usage greater than 0 and any storage system with 0 usage will be excluded from the dictionary."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StorageEvent",
        "",
        "StorageEvent",
        "A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.",
        [
            [
                "typeArg",
                "The name of the event."
            ],
            [
                "canBubble Optional",
                "A boolean indicating whether the event bubbles up through the DOM or not."
            ],
            [
                "cancelable Optional",
                "A boolean indicating whether the event is cancelable."
            ],
            [
                "key Optional",
                "The key whose value is changing as a result of this event."
            ],
            [
                "oldValue Optional",
                "The key's old value."
            ],
            [
                "newValue Optional",
                "The key's new value."
            ],
            [
                "url Optional",
                "The URL of the document initiating the change."
            ],
            [
                "storageArea Optional",
                "The Storage object representing the storage area on which this event occurred."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StorageManager",
        "",
        "StorageManager",
        "",
        [
            [
                "StorageManager.estimate() Secure context",
                "Returns a Promise that resolves to a StorageEstimate object containing usage and quota numbers for your origin."
            ],
            [
                "StorageManager.persist() Secure context",
                "Returns a Promise that resolves to true if the user agent is able to persist your site's storage."
            ],
            [
                "StorageManager.persisted() Secure context",
                "Returns a Promise that resolves to true if persistence has already been granted for your site's storage."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StylePropertyMap",
        "",
        "StylePropertyMap",
        "",
        [
            [
                "StylePropertyMap.append()",
                "Adds a new CSS declaration to the StylePropertyMap with the given property and value."
            ],
            [
                "StylePropertyMap.clear()",
                "Removes all declarations in the StylePropertyMap."
            ],
            [
                "StylePropertyMap.delete()",
                "Removes the CSS declaration with the given property."
            ],
            [
                "StylePropertyMap.set()",
                "Changes the CSS declaration with the given property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StylePropertyMapReadOnly",
        "",
        "StylePropertyMapReadOnly",
        "",
        [
            [
                "StylePropertyMapReadOnly.size",
                "Returns an unsinged long integer containing the size of the StylePropertyMapReadOnly object."
            ],
            [
                "StylePropertyMapReadOnly.entries()",
                "Returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
            ],
            [
                "StylePropertyMapReadOnly.forEach()",
                "Executes a provided function once for each element of StylePropertyMapReadOnly."
            ],
            [
                "StylePropertyMapReadOnly.get()",
                "Returns the value of the specified property."
            ],
            [
                "StylePropertyMapReadOnly.getAll()",
                "Returns an array of CSSStyleValue objects containing the values for the provided property."
            ],
            [
                "StylePropertyMapReadOnly.has()",
                "Indicates whether the specified property is in the StylePropertyMapReadOnly object."
            ],
            [
                "StylePropertyMapReadOnly.keys()",
                "Returns a new Array Iterator containing the keys for each item in StylePropertyMapReadOnly."
            ],
            [
                "StylePropertyMapReadOnly.values()",
                "Returns a new Array Iterator containing the values for each index in the StylePropertyMapReadOnly object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StyleSheet",
        "",
        "StyleSheet",
        "An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.",
        [
            [
                "StyleSheet.disabled",
                "Is a Boolean representing whether the current stylesheet has been applied or not."
            ],
            [
                "StyleSheet.href Read only",
                "Returns a DOMString representing the location of the stylesheet."
            ],
            [
                "StyleSheet.media Read only",
                "Returns a MediaList representing the intended destination medium for style information."
            ],
            [
                "StyleSheet.ownerNode Read only",
                "Returns a Node associating this style sheet with the current document."
            ],
            [
                "StyleSheet.parentStyleSheet Read only",
                "Returns a StyleSheet including this one, if any; returns null if there aren't any."
            ],
            [
                "StyleSheet.title Read only",
                "Returns a DOMString representing the advisory title of the current style sheet."
            ],
            [
                "StyleSheet.typeRead only",
                "Returns a DOMString representing the style sheet language for this style sheet."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/StyleSheetList",
        "",
        "StyleSheetList",
        "The StyleSheetList interface represents a list of CSSStyleSheet objects. An instance of this object can be returned by Document.styleSheets.",
        [
            [
                "StyleSheetList.lengthRead only",
                "Returns the number of CSSStyleSheet objects in the collection."
            ],
            [
                "StyleSheetList.item()",
                "Returns the CSSStyleSheet object at the index passed in, or null if no item exists for that index."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SubmitEvent",
        "",
        "SubmitEvent",
        "",
        [
            [
                "SubmitEvent()",
                "Creates and returns a new SubmitEvent object whose type and other options are configured as specified. Note that currently the only valid type for a SubmitEvent is submit."
            ],
            [
                "submitter Read only",
                "An HTMLElement object which identifies the button or other element which was invoked to trigger the form being submitted."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SubtleCrypto",
        "",
        "SubtleCrypto",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "SubtleCrypto.encrypt()",
                "Returns a Promise that fufills with the encrypted data corresponding to the clear text, algorithm, and key given as parameters."
            ],
            [
                "SubtleCrypto.decrypt()",
                "Returns a Promise that fulfills with the clear data corresponding to the encrypted text, algorithm, and key given as parameters."
            ],
            [
                "SubtleCrypto.sign()",
                "Returns a Promise that fulfills with the signature corresponding to the text, algorithm, and key given as parameters."
            ],
            [
                "SubtleCrypto.verify()",
                "Returns a Promise that fulfills with a Boolean value indicating if the signature given as a parameter matches the text, algorithm, and key that are also given as parameters."
            ],
            [
                "SubtleCrypto.digest()",
                "Returns a Promise that fulfills with a digest generated from the algorithm and text given as parameters."
            ],
            [
                "SubtleCrypto.generateKey()",
                "Returns a Promise that fulfills with a newly-generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithms. These will match the algorithm, usages, and extractability given as parameters."
            ],
            [
                "SubtleCrypto.deriveKey()",
                "Returns a Promise that fulfills with a newly generated CryptoKey derived from the master key and specific algorithm given as parameters."
            ],
            [
                "SubtleCrypto.deriveBits()",
                "Returns a Promise that fulfills with a newly generated buffer of pseudo-random bits derived from the master key and specific algorithm given as parameters."
            ],
            [
                "SubtleCrypto.importKey()",
                "Returns a Promise that fulfills with a CryptoKey corresponding to the format, the algorithm, raw key data, usages, and extractability given as parameters."
            ],
            [
                "SubtleCrypto.exportKey()",
                "Returns a Promise that fulfills with a buffer containing the key in the requested format."
            ],
            [
                "SubtleCrypto.wrapKey()",
                "Returns a Promise that fulfills with a wrapped symmetric key for usage (transfer and storage) in insecure environments. The wrapped key matches the format specified in the given parameters, and wrapping is done by the given wrapping key, using the specified algorithm."
            ],
            [
                "SubtleCrypto.unwrapKey()",
                "Returns a Promise that fulfills with a CryptoKey corresponding to the wrapped key given in the parameter."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAElement",
        "",
        "SVGAElement",
        "The SVGAElement interface provides access to the properties of <a> element, as well as methods to manipulate them.",
        [
            [
                "SVGAElement.download",
                "See HTMLAnchorElement.download."
            ],
            [
                "SVGAElement.href Read only",
                "Is an SVGAnimatedString that reflects the href or xlink:href attribute."
            ],
            [
                "SVGAElement.hreflang",
                "Is a DOMString that reflects the hreflang attribute, indicating the language of the linked resource."
            ],
            [
                "SVGAElement.ping",
                "Is a DOMString that reflects the ping attribute, containing a space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background). Typically used for tracking."
            ],
            [
                "SVGAElement.referrerPolicy",
                "See HTMLAnchorElement.referrerPolicy."
            ],
            [
                "SVGAElement.rel",
                "See HTMLAnchorElement.rel."
            ],
            [
                "SVGAElement.relList",
                "See HTMLAnchorElement.relList."
            ],
            [
                "SVGAElement.target Read only",
                "It corresponds to the target attribute of the given element."
            ],
            [
                "SVGAElement.text",
                "Is a DOMString being a synonym for the Node.textContent property."
            ],
            [
                "SVGAElement.type",
                "Is a DOMString that reflects the type attribute, indicating the MIME type of the linked resource."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAltGlyphDefElement",
        "",
        "SVGAltGlyphDefElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAltGlyphElement",
        "",
        "SVGAltGlyphElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "SVGAltGlyphElement.glyphRef",
                "It corresponds to the attribute glyphRef on the given element. It's data type is 'String'. It defines the glyph identifier, whose format is dependent on the ‘format’ of the given font."
            ],
            [
                "SVGAltGlyphElement.format",
                "It corresponds to the attribute format on the given element. It's data type is 'String'. This property specifies the format of the given font."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAltGlyphItemElement",
        "",
        "SVGAltGlyphItemElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAngle",
        "",
        "SVGAngle",
        "The SVGAngle interface is used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only.",
        [
            [
                "SVG_ANGLETYPE_UNKNOWN",
                "Some unknown type of value."
            ],
            [
                "SVG_ANGLETYPE_UNSPECIFIED",
                "A unitless <number> interpreted as a value in degrees."
            ],
            [
                "SVG_ANGLETYPE_DEG",
                "An <angle> with a deg unit."
            ],
            [
                "SVG_ANGLETYPE_RAD",
                "An <angle> with a rad unit."
            ],
            [
                "SVG_ANGLETYPE_GRAD",
                "An <angle> with a grad unit."
            ],
            [
                "unitType",
                "The type of the value as specified by one of the SVG_ANGLETYPE_* constants defined on this interface."
            ],
            [
                "value",
                "The value as a floating point value, in user units. Setting this attribute will cause valueInSpecifiedUnits and valueAsString to be updated automatically to reflect this setting. Exceptions on setting: A DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised when the length corresponds to a read-only attribute, or when the object itself is read-only."
            ],
            [
                "valueInSpecifiedUnits",
                "The value as a floating point value, in the units expressed by unitType. Setting this attribute will cause value and valueAsString to be updated automatically to reflect this setting. Exceptions on setting: A DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised when the length corresponds to a read-only attribute, or when the object itself is read-only."
            ],
            [
                "valueAsString",
                "The value as a DOMString value, in the units expressed by unitType. Setting this attribute will cause value, valueInSpecifiedUnits, and unitType to be updated automatically to reflect this setting. Exceptions on setting: A DOMException with code SYNTAX_ERR is raised if the assigned string cannot be parsed as a valid <angle>. A DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised when the length corresponds to a read-only attribute, or when the object itself is read-only."
            ],
            [
                "newValueSpecifiedUnits",
                "Reset the value as a number with an associated unitType, thereby replacing the values for all of the attributes on the object. Exceptions: A DOMException with code NOT_SUPPORTED_ERR is raised if unitType is SVG_ANGLETYPE_UNKNOWN or not a valid unit type constant (one of the other SVG_ANGLETYPE_* constants defined on this interface)."
            ],
            [
                "convertToSpecifiedUnits",
                "Preserve the same underlying stored value, but reset the stored unit identifier to the given unitType. Object attributes unitType, valueInSpecifiedUnits, and valueAsString might be modified as a result of this method."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimateColorElement",
        "",
        "SVGAnimateColorElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedAngle",
        "",
        "SVGAnimatedAngle",
        "The SVGAnimatedAngle interface is used for attributes of basic type <angle> which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedBoolean",
        "",
        "SVGAnimatedBoolean",
        "The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedEnumeration",
        "",
        "SVGAnimatedEnumeration",
        "The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedInteger",
        "",
        "SVGAnimatedInteger",
        "The SVGAnimatedInteger interface is used for attributes of basic type <integer> which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedLength",
        "",
        "SVGAnimatedLength",
        "The SVGAnimatedLength interface is used for attributes of basic type <length> which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedLengthList",
        "",
        "SVGAnimatedLengthList",
        "The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedNumber",
        "",
        "SVGAnimatedNumber",
        "The SVGAnimatedNumber interface is used for attributes of basic type <Number> which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedNumberList",
        "",
        "SVGAnimatedNumberList",
        "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.",
        [
            [
                "SVGAnimatedNumberList.baseVal Read only",
                "Is a SVGNumberList that represents the base value of the given attribute before applying any animations."
            ],
            [
                "SVGAnimatedNumberList.animVal Read only",
                "Is a read only SVGNumberList that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the SVGNumberList will have the same contents as baseVal. The object referenced by animVal will always be distinct from the one referenced by baseVal, even when the attribute is not animated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio",
        "",
        "SVGAnimatedPreserveAspectRatio",
        "The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.",
        [
            [
                "SVGAnimatedPreserveAspectRatio.baseVal Read only",
                "Is a SVGPreserveAspectRatio that represents the base value of the given attribute before applying any animations."
            ],
            [
                "SVGAnimatedPreserveAspectRatio.animVal Read only",
                "Is a SVGPreserveAspectRatio that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the SVGPreserveAspectRatio will have the same contents as baseVal. The object referenced by animVal is always distinct from the one referenced by baseVal, even when the attribute is not animated."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedRect",
        "",
        "SVGAnimatedRect",
        "The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedString",
        "",
        "SVGAnimatedString",
        "The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.",
        [
            [
                "SVGAnimatedString.animVal Read only",
                "This is a DOMString representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal."
            ],
            [
                "SVGAnimatedString.baseVal",
                "This is a DOMString representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimatedTransformList",
        "",
        "SVGAnimatedTransformList",
        "The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimateElement",
        "",
        "SVGAnimateElement",
        "The SVGAnimateElement interface corresponds to the <animate> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimateMotionElement",
        "",
        "SVGAnimateMotionElement",
        "The SVGAnimateMotionElement interface corresponds to the <animateMotion> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimateTransformElement",
        "",
        "SVGAnimateTransformElement",
        "The SVGAnimateTransformElement interface corresponds to the <animateTransform> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGAnimationElement",
        "",
        "SVGAnimationElement",
        "The SVGAnimationElement interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.",
        [
            [
                "SVGAnimationElement.requiredExtensions Read only",
                "An SVGStringList reflecting the requiredExtensions attribute of the given element."
            ],
            [
                "SVGAnimationElement.systemLanguage Read only",
                "An SVGStringList reflecting the systemLanguage attribute of the given element."
            ],
            [
                "SVGAnimationElement.targetElement Read only",
                "An SVGElement representing the element which is being animated. If no target element is being animated (for example, because the href specifies an unknown element) the value returned is null."
            ],
            [
                "SVGAnimationElement.getStartTime()",
                "Returns a float representing the begin time, in seconds, for this animation element's current interval, if it exists, regardless of whether the interval has begun yet. If there is no current interval, then a DOMException with code INVALID_STATE_ERR is thrown."
            ],
            [
                "SVGAnimationElement.getCurrentTime()",
                "Returns a float representing the current time in seconds relative to time zero for the given time container."
            ],
            [
                "SVGAnimationElement.getSimpleDuration()",
                "Returns a float representing the number of seconds for the simple duration for this animation. If the simple duration is undefined (e.g., the end time is indefinite), then a DOMException with code NOT_SUPPORTED_ERR is raised."
            ],
            [
                "SVGAnimationElement.beginElement()",
                "Creates a begin instance time for the current time. The new instance time is added to the begin instance times list. The behavior of this method is equivalent to beginElementAt(0)."
            ],
            [
                "SVGAnimationElement.beginElementAt()",
                "Creates a begin instance time for the current time plus the specified offset. The new instance time is added to the begin instance times list."
            ],
            [
                "SVGAnimationElement.endElement()",
                "Creates an end instance time for the current time. The new instance time is added to the end instance times list. The behavior of this method is equivalent to endElementAt(0)."
            ],
            [
                "SVGAnimationElement.endElementAt()",
                "Creates a end instance time for the current time plus the specified offset. The new instance time is added to the end instance times list."
            ],
            [
                "beginEvent",
                "Fired when the element local timeline begins to play. Also available via the onbegin property."
            ],
            [
                "endEvent",
                "Fired when at the active end of the animation is reached. Also available via the onend property."
            ],
            [
                "repeatEvent",
                "Fired when the element's local timeline repeats. It will be fired each time the element repeats, after the first iteration. Also available via the onrepeat property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGCircleElement",
        "",
        "SVGCircleElement",
        "The SVGCircleElement interface is an interface for the <circle> element.",
        [
            [
                "SVGCircleElement.cx Read only",
                "This property defines the x-coordinate of the center of the <circle> element. It is denoted by the cx attribute of the element."
            ],
            [
                "SVGCircleElement.cy Read only",
                "This property defines the y-coordinate of the center of the <circle> element. It is denoted by the cy attribute of the element."
            ],
            [
                "SVGCircleElement.r Read only",
                "This property defines the radius of the <circle> element. It is denoted by the r of the element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGClipPathElement",
        "",
        "SVGClipPathElement",
        "The SVGClipPathElement interface provides access to the properties of <clipPath> elements, as well as methods to manipulate them.",
        [
            [
                "SVGClipPathElement.clipPathUnits Read only",
                "An SVGAnimatedEnumeration corresponding to the clipPathUnits attribute of the given <clipPath> element. Takes one of the constants defined in SVGUnitTypes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGComponentTransferFunctionElement",
        "",
        "SVGComponentTransferFunctionElement",
        "The SVGComponentTransferFunctionElement interface defines a base interface used by the component transfer function interfaces.",
        [
            [
                "SVGComponentTransferFunctionElement.type Read only",
                "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOMPONENTTRANSFER_TYPE_* constants defined on this interface."
            ],
            [
                "SVGComponentTransferFunctionElement.tableValues Read only",
                "An SVGAnimatedNumberList corresponding to the tableValues attribute of the given element."
            ],
            [
                "SVGComponentTransferFunctionElement.slope Read only",
                "An SVGAnimatedNumber corresponding to the slope attribute of the given element."
            ],
            [
                "SVGComponentTransferFunctionElement.intercept Read only",
                "An SVGAnimatedNumber corresponding to the intercept attribute of the given element."
            ],
            [
                "SVGComponentTransferFunctionElement.amplitude Read only",
                "An SVGAnimatedNumber corresponding to the amplitude attribute of the given element."
            ],
            [
                "SVGComponentTransferFunctionElement.exponent Read only",
                "An SVGAnimatedNumber corresponding to the exponent attribute of the given element."
            ],
            [
                "SVGComponentTransferFunctionElement.offset Read only",
                "An SVGAnimatedNumber corresponding to the offset attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGCursorElement",
        "",
        "SVGCursorElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "SVGCursorElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given <cursor> element."
            ],
            [
                "SVGCursorElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given <cursor> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGDefsElement",
        "",
        "SVGDefsElement",
        "The SVGDefsElement interface corresponds to the <defs> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGDescElement",
        "",
        "SVGDescElement",
        "The SVGDescElement interface corresponds to the <desc> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGElement",
        "",
        "SVGElement",
        "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.",
        [
            [
                "SVGElement.attributeStyleMapRead only",
                "A StylePropertyMap representing the declarations of the element's style attribute."
            ],
            [
                "SVGElement.datasetRead only",
                "A DOMStringMap object which provides a list of key/value pairs of named data attributes which correspond to custom data attributes attached to the element. These can also be defined in SVG using attributes of the form data-*, where * is the key name for the pair. This works just like HTML's HTMLElement.dataset property and HTML's data-* global attribute."
            ],
            [
                "SVGElement.className Read only",
                "An SVGAnimatedString that reflects the value of the class attribute on the given element, or the empty string if class is not present. This attribute is deprecated and may be removed in a future version of this specification. Authors are advised to use Element.classList instead."
            ],
            [
                "SVGElement.nonce",
                "Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed."
            ],
            [
                "SVGElement.ownerSVGElementRead only",
                "An SVGSVGElement referring to the nearest ancestor <svg> element. null if the given element is the outermost <svg> element."
            ],
            [
                "SVGElement.style",
                "A CSSStyleDeclaration representing the declarations of the element's style attribute."
            ],
            [
                "SVGElement.tabIndex",
                "The position of the element in the tabbing order."
            ],
            [
                "SVGElement.viewportElementRead only",
                "The SVGElement, which established the current viewport. Often, the nearest ancestor <svg> element. null if the given element is the outermost <svg> element."
            ],
            [
                "abort",
                "Fired when page loading is stopped before an SVG element has been allowed to load completely. Also available via the onabort property."
            ],
            [
                "error",
                "Fired when an SVG element does not load properly or when an error occurs during script execution. Also available via the onerror property."
            ],
            [
                "load",
                "Fires on an SVGElement when it is loaded in the browser. Also available via the onload property."
            ],
            [
                "resize",
                "Fired when an SVG document is being resized. Also available via the onresize property."
            ],
            [
                "scroll",
                "Fired when an SVG document view is being shifted along the X and/or Y axes. Also available via the onscroll property."
            ],
            [
                "unload",
                "Fired when the DOM implementation removes an SVG document from a window or frame. Also available via the onunload property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGEllipseElement",
        "",
        "SVGEllipseElement",
        "The SVGEllipseElement interface provides access to the properties of <ellipse> elements.",
        [
            [
                "SVGEllipseElement.cx Read only",
                "This property returns a SVGAnimatedLength reflecting the cx attribute of the given <ellipse> element."
            ],
            [
                "SVGEllipseElement.cy Read only",
                "This property returns a SVGAnimatedLength reflecting the cy attribute of the given <ellipse> element."
            ],
            [
                "SVGEllipseElement.rx Read only",
                "This property returns a SVGAnimatedLength reflecting the rx attribute of the given <ellipse> element."
            ],
            [
                "SVGEllipseElement.ry Read only",
                "This property returns a SVGAnimatedLength reflecting the ry attribute of the given <ellipse> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGEvent",
        "",
        "SVGEvent",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEBlendElement",
        "",
        "SVGFEBlendElement",
        "The SVGFEBlendElement interface corresponds to the <feBlend> element.",
        [
            [
                "SVGFEBlendElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEBlendElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEBlendElement.in2 Read only",
                "An SVGAnimatedString corresponding to the in2 attribute of the given element."
            ],
            [
                "SVGFEBlendElement.mode Read only",
                "An SVGAnimatedEnumeration corresponding to the mode attribute of the given element. It takes one of the SVG_FEBLEND_MODE_* constants defined on this interface."
            ],
            [
                "SVGFEBlendElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEBlendElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEBlendElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEBlendElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEColorMatrixElement",
        "",
        "SVGFEColorMatrixElement",
        "The SVGFEColorMatrixElement interface corresponds to the <feColorMatrix> element.",
        [
            [
                "SVGFEColorMatrixElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEColorMatrixElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEColorMatrixElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEColorMatrixElement.type Read only",
                "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOLORMATRIX_TYPE_* constants defined on this interface."
            ],
            [
                "SVGFEColorMatrixElement.values Read only",
                "An SVGAnimatedNumberList corresponding to the values attribute of the given element."
            ],
            [
                "SVGFEColorMatrixElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEColorMatrixElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEColorMatrixElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEComponentTransferElement",
        "",
        "SVGFEComponentTransferElement",
        "The SVGFEComponentTransferElement interface corresponds to the <feComponentTransfer> element.",
        [
            [
                "SVGFEComponentTransferElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEComponentTransferElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEComponentTransferElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEComponentTransferElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEComponentTransferElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEComponentTransferElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFECompositeElement",
        "",
        "SVGFECompositeElement",
        "The SVGFECompositeElement interface corresponds to the <feComposite> element.",
        [
            [
                "SVGFECompositeElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFECompositeElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFECompositeElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFECompositeElement.type Read only",
                "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOMPOSITE_OPERATOR_* constants defined on this interface."
            ],
            [
                "SVGFECompositeElement.values Read only",
                "An SVGAnimatedNumberList corresponding to the values attribute of the given element."
            ],
            [
                "SVGFECompositeElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFECompositeElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFECompositeElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEConvolveMatrixElement",
        "",
        "SVGFEConvolveMatrixElement",
        "The SVGFEConvolveMatrixElement interface corresponds to the <feConvolveMatrix> element.",
        [
            [
                "SVGFEConvolveMatrixElement.bias Read only",
                "An SVGAnimatedNumber corresponding to the bias attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.divisor Read only",
                "An SVGAnimatedNumber corresponding to the divisor attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.edgeMode Read only",
                "An SVGAnimatedEnumeration corresponding to the edgeMode attribute of the given element. Takes one of the SVG_EDGEMODE_* constants defined on this interface."
            ],
            [
                "SVGFEConvolveMatrixElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.kernelMatrix Read only",
                "An SVGAnimatedNumberList corresponding to the kernelMatrix attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.kernelUnitLengthX Read only",
                "An SVGAnimatedNumber corresponding to the kernelUnitLength attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.kernelUnitLengthY Read only",
                "An SVGAnimatedNumber corresponding to the kernelUnitLength attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.orderX Read only",
                "An SVGAnimatedInteger corresponding to the order attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.orderY Read only",
                "An SVGAnimatedInteger corresponding to the order attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.preserveAlpha Read only",
                "An SVGAnimatedBoolean corresponding to the preserveAlpha attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.targetX Read only",
                "An SVGAnimatedInteger corresponding to the targetX attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.targetY Read only",
                "An SVGAnimatedInteger corresponding to the targetY attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEConvolveMatrixElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEDiffuseLightingElement",
        "",
        "SVGFEDiffuseLightingElement",
        "The SVGFEDiffuseLightingElement interface corresponds to the <feDiffuseLighting> element.",
        [
            [
                "SVGFEDiffuseLightingElement.diffuseConstant Read only",
                "An SVGAnimatedNumber corresponding to the diffuseConstant attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.kernelUnitLengthX Read only",
                "An SVGAnimatedNumber corresponding to the X component of the kernelUnitLength attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.kernelUnitLengthY Read only",
                "An SVGAnimatedNumber corresponding to the Y component of the kernelUnitLength attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.surfaceScale Read only",
                "An SVGAnimatedNumber corresponding to the surfaceScale attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEDiffuseLightingElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEDisplacementMapElement",
        "",
        "SVGFEDisplacementMapElement",
        "The SVGFEDisplacementMapElement interface corresponds to the <feDisplacementMap> element.",
        [
            [
                "SVGFEDisplacementMapElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.in2 Read only",
                "An SVGAnimatedString corresponding to the in2 attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.scale Read only",
                "An SVGAnimatedNumber corresponding to the scale attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.xChannelSelector Read only",
                "An SVGAnimatedEnumeration corresponding to the xChannelSelect attribute of the given element. It takes one of the SVG_CHANNEL_* constants defined on this interface."
            ],
            [
                "SVGFEDisplacementMapElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ],
            [
                "SVGFEDisplacementMapElement.yChannelSelector Read only",
                "An SVGAnimatedEnumeration corresponding to the yChannelSelect attribute of the given element. It takes one of the SVG_CHANNEL_* constants defined on this interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEDistantLightElement",
        "",
        "SVGFEDistantLightElement",
        "The SVGFEDistantLightElement interface corresponds to the <feDistantLight> element.",
        [
            [
                "SVGFEDistantLightElement.azimuth Read only",
                "An SVGAnimatedNumber corresponding to the azimuth attribute of the given element."
            ],
            [
                "SVGFEDistantLightElement.elevation Read only",
                "An SVGAnimatedNumber corresponding to the elevation attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEDropShadowElement",
        "",
        "SVGFEDropShadowElement",
        "The SVGFEDropShadowElement interface corresponds to the <feDropShadow> element.",
        [
            [
                "SVGFEDropShadowElement.dx Read only",
                "An SVGAnimatedNumber corresponding to the dx attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.dy Read only",
                "An SVGAnimatedNumber corresponding to the dy attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.stdDeviationX Read only",
                "An SVGAnimatedNumber corresponding to the (possibly automatically computed) X component of the stdDeviationX attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.stdDeviationY Read only",
                "An SVGAnimatedNumber corresponding to the (possibly automatically computed) Y component of the stdDeviationY attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ],
            [
                "SVGFEDropShadowElement.setStdDeviation()",
                "Sets the values for the stdDeviation attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEFloodElement",
        "",
        "SVGFEFloodElement",
        "The SVGFEFloodElement interface corresponds to the <feFlood> element.",
        [
            [
                "SVGFEFloodElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEFloodElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEFloodElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEFloodElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEFloodElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEFuncAElement",
        "",
        "SVGFEFuncAElement",
        "The SVGFEFuncAElement interface corresponds to the <feFuncA> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEFuncBElement",
        "",
        "SVGFEFuncBElement",
        "The SVGFEFuncBElement interface corresponds to the <feFuncB> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEFuncGElement",
        "",
        "SVGFEFuncGElement",
        "The SVGFEFuncGElement interface corresponds to the <feFuncG> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEFuncRElement",
        "",
        "SVGFEFuncRElement",
        "The SVGFEFuncRElement interface corresponds to the <feFuncR> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEGaussianBlurElement",
        "",
        "SVGFEGaussianBlurElement",
        "The SVGFEGaussianBlurElement interface corresponds to the <feGaussianBlur> element.",
        [
            [
                "SVGFEGaussianBlurElement.edgeMode Read only",
                "An SVGAnimatedEnumeration corresponding to the edgeMode attribute of the given element. Takes one of the SVG_EDGEMODE_* constants defined on this interface."
            ],
            [
                "SVGFEGaussianBlurElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.stdDeviationX Read only",
                "An SVGAnimatedNumber corresponding to the (possibly automatically computed) X component of the stdDeviation attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.stdDeviationY Read only",
                "An SVGAnimatedNumber corresponding to the (possibly automatically computed) Y component of the stdDeviation attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ],
            [
                "SVGFEGaussianBlurElement.setStdDeviation()",
                "Sets the values for the stdDeviation attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEImageElement",
        "",
        "SVGFEImageElement",
        "The SVGFEImageElement interface corresponds to the <feImage> element.",
        [
            [
                "SVGFEImageElement.crossOrigin Read only",
                "An SVGAnimatedString reflects the crossorigin attribute of the given element, limited to only known values."
            ],
            [
                "SVGFEImageElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEImageElement.href Read only",
                "An SVGAnimatedString that reflects the href or xlink:href attribute of the given element."
            ],
            [
                "SVGFEImageElement.preserveAspectRatio Read only",
                "An SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given element."
            ],
            [
                "SVGFEImageElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEImageElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEImageElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEImageElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEMergeElement",
        "",
        "SVGFEMergeElement",
        "The SVGFEMergeElement interface corresponds to the <feMerge> element.",
        [
            [
                "SVGFEMergeElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEMergeElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEMergeElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEMergeElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEMergeElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEMergeNodeElement",
        "",
        "SVGFEMergeNodeElement",
        "The SVGFEMergeNodeElement interface corresponds to the <feMergeNode> element.",
        [
            [
                "SVGFEMergeNodeElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEMorphologyElement",
        "",
        "SVGFEMorphologyElement",
        "The SVGFEMorphologyElement interface corresponds to the <feMorphology> element.",
        [
            [
                "SVGFEMorphologyElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.operator Read only",
                "An SVGAnimatedEnumeration corresponding to the operator attribute of the given element. It takes one of the SVG_MORPHOLOGY_OPERATOR_* constants defined on this interface."
            ],
            [
                "SVGFEMorphologyElement.radiusX Read only",
                "An SVGAnimatedNumber corresponding to the X component of the radius attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.radiusY Read only",
                "An SVGAnimatedNumber corresponding to the Y component of the radius attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEMorphologyElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEOffsetElement",
        "",
        "SVGFEOffsetElement",
        "The SVGFEOffsetElement interface corresponds to the <feOffset> element.",
        [
            [
                "SVGFEOffsetElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.dx Read only",
                "An SVGAnimatedNumber corresponding to the dx attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.dy Read only",
                "An SVGAnimatedNumber corresponding to the dy attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEOffsetElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFEPointLightElement",
        "",
        "SVGFEPointLightElement",
        "The SVGFEPointLightElement interface corresponds to the <fePointLight> element.",
        [
            [
                "SVGFEPointLightElement.x Read only",
                "An SVGAnimatedNumber corresponding to the x attribute of the given element."
            ],
            [
                "SVGFEPointLightElement.y Read only",
                "An SVGAnimatedNumber corresponding to the y attribute of the given element."
            ],
            [
                "SVGFEPointLightElement.z Read only",
                "An SVGAnimatedNumber corresponding to the z attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFESpecularLightingElement",
        "",
        "SVGFESpecularLightingElement",
        "The SVGFESpecularLightingElement interface corresponds to the <feSpecularLighting> element.",
        [
            [
                "SVGFESpecularLightingElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.kernelUnitLengthX Read only",
                "An SVGAnimatedNumber corresponding to the X component of the kernelUnitLength attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.kernelUnitLengthY Read only",
                "An SVGAnimatedNumber corresponding to the Y component of the kernelUnitLength attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.specularConstant Read only",
                "An SVGAnimatedNumber corresponding to the specularConstant attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.specularExponent Read only",
                "An SVGAnimatedNumber corresponding to the specularExponent attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.surfaceScale Read only",
                "An SVGAnimatedNumber corresponding to the surfaceScale attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFESpecularLightingElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFESpotLightElement",
        "",
        "SVGFESpotLightElement",
        "The SVGFESpotLightElement interface corresponds to the <feSpotLight> element.",
        [
            [
                "SVGFESpotLightElement.x Read only",
                "An SVGAnimatedNumber corresponding to the x attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.y Read only",
                "An SVGAnimatedNumber corresponding to the y attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.z Read only",
                "An SVGAnimatedNumber corresponding to the z attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.pointAtX Read only",
                "An SVGAnimatedNumber corresponding to the pointAtX attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.pointAtY Read only",
                "An SVGAnimatedNumber corresponding to the pointAtY attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.pointAtZ Read only",
                "An SVGAnimatedNumber corresponding to the pointAtZ attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.specularExponent Read only",
                "An SVGAnimatedNumber corresponding to the specularExponent attribute of the given element."
            ],
            [
                "SVGFESpotLightElement.limitingConeAngle Read only",
                "An SVGAnimatedNumber corresponding to the limitingConeAngle attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFETileElement",
        "",
        "SVGFETileElement",
        "The SVGFETileElement interface corresponds to the <feTile> element.",
        [
            [
                "SVGFETileElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFETileElement.in1 Read only",
                "An SVGAnimatedString corresponding to the in attribute of the given element."
            ],
            [
                "SVGFETileElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFETileElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFETileElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFETileElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFETurbulenceElement",
        "",
        "SVGFETurbulenceElement",
        "The SVGFETurbulenceElement interface corresponds to the <feTurbulence> element.",
        [
            [
                "SVGFETurbulenceElement.baseFrequencyX Read only",
                "An SVGAnimatedNumber corresponding to the X component of the baseFrequency attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.baseFrequencyY Read only",
                "An SVGAnimatedNumber corresponding to the Y component of the baseFrequency attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.numOctaves Read only",
                "An SVGAnimatedInteger corresponding to the numOctaves attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.result Read only",
                "An SVGAnimatedString corresponding to the result attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.seed Read only",
                "An SVGAnimatedNumber corresponding to the seed attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.stitchTiles Read only",
                "An SVGAnimatedEnumeration corresponding to the stitchTiles attribute of the given element. It takes one of the SVG_STITCHTYPE_* constants defined on this interface."
            ],
            [
                "SVGFETurbulenceElement.type Read only",
                "An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_TURBULENCE_TYPE_* constants defined on this interface."
            ],
            [
                "SVGFETurbulenceElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGFETurbulenceElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFilterElement",
        "",
        "SVGFilterElement",
        "The SVGFilterElement interface provides access to the properties of <filter> elements, as well as methods to manipulate them.",
        [
            [
                "SVGFilterElement.href Read only",
                "An SVGAnimatedString that corresponds to the href or xlink:href attribute of the given <filter> element."
            ],
            [
                "SVGFilterElement.filterUnits Read only",
                "An SVGAnimatedEnumeration that corresponds to the filterUnits attribute of the given <filter> element. Takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGFilterElement.primitiveUnits Read only",
                "An SVGAnimatedEnumeration that corresponds to the primitiveUnits attribute of the given <filter> element. Takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGFilterElement.x Read only",
                "An SVGAnimatedLength that corresponds to the x attribute on the given <filter> element."
            ],
            [
                "SVGFilterElement.y Read only",
                "An SVGAnimatedLength that corresponds to the y attribute of the given <filter> element."
            ],
            [
                "SVGFilterElement.width Read only",
                "An SVGAnimatedLength that corresponds to the width attribute of the given <filter> element."
            ],
            [
                "SVGFilterElement.height Read only",
                "An SVGAnimatedLength that corresponds to the height attribute of the given <filter> element."
            ],
            [
                "SVGFilterElement.filterResX Read only",
                "An SVGAnimatedInteger that contains the X component of the filterRes attribute of the given <filter> element."
            ],
            [
                "SVGFilterElement.filterResY Read only",
                "An SVGAnimatedInteger that contains the Y component of the filterRes attribute of the given <filter> element."
            ],
            [
                "SVGFilterElement.setFilterRes()",
                "Sets the values of the filterRes attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFontElement",
        "",
        "SVGFontElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFontFaceElement",
        "",
        "SVGFontFaceElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFontFaceFormatElement",
        "",
        "SVGFontFaceFormatElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFontFaceNameElement",
        "",
        "SVGFontFaceNameElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFontFaceSrcElement",
        "",
        "SVGFontFaceSrcElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGFontFaceUriElement",
        "",
        "SVGFontFaceUriElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGForeignObjectElement",
        "",
        "SVGForeignObjectElement",
        "The SVGForeignObjectElement interface provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.",
        [
            [
                "SVGForeignObjectElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given <foreignObject> element."
            ],
            [
                "SVGForeignObjectElement.y Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given <foreignObject> element."
            ],
            [
                "SVGForeignObjectElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given <foreignObject> element."
            ],
            [
                "SVGForeignObjectElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given <foreignObject> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGGElement",
        "",
        "SVGGElement",
        "The SVGGElement interface corresponds to the <g> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGGeometryElement",
        "",
        "SVGGeometryElement",
        "The SVGGeometryElement interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.",
        [
            [
                "SVGGeometryElement.pathLength Read only",
                "This property reflects the pathLength attribute."
            ],
            [
                "SVGGeometryElement.isPointInFill()",
                "Determines whether a given point is within the fill shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the fill."
            ],
            [
                "SVGGeometryElement.isPointInStroke()",
                "Determines whether a given point is within the stroke shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the stroke."
            ],
            [
                "SVGGeometryElement.getTotalLength()",
                "Returns the user agent's computed value for the total length of the path in user units."
            ],
            [
                "SVGGeometryElement.getPointAtLength()",
                "Returns the point at a given distance along the path."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGGlyphElement",
        "",
        "SVGGlyphElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGGlyphRefElement",
        "",
        "SVGGlyphRefElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "SVGGlyphRefElement.glyphRef",
                "A DOMString corresponding to the glyphRef attribute of the given element."
            ],
            [
                "SVGGlyphRefElement.format",
                "A DOMString corresponding to the format attribute of the given element."
            ],
            [
                "SVGGlyphRefElement.x",
                "A float corresponding to the x attribute of the given element."
            ],
            [
                "SVGGlyphRefElement.y",
                "A float corresponding to the y attribute of the given element."
            ],
            [
                "SVGGlyphRefElement.dx",
                "A float corresponding to the dx attribute of the given element."
            ],
            [
                "SVGGlyphRefElement.dy",
                "A float corresponding to the dy attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGGradientElement",
        "",
        "SVGGradientElement",
        "The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.",
        [
            [
                "SVGGradientElement.href Read only",
                "An SVGAnimatedString corresponding to the href or xlink:href attribute of the given element."
            ],
            [
                "SVGGradientElement.gradientUnits Read only",
                "An SVGAnimatedEnumeration corresponding to the gradientUnits attribute on the given element. This property takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGGradientElement.gradientTransform Read only",
                "An SVGAnimatedTransformList corresponding to the gradientTransform attribute on the given element."
            ],
            [
                "SVGGradientElement.spreadMethod Read only",
                "An SVGAnimatedEnumeration corresponding to the spreadMethod attribute on the given element. One of the spread method types defined on this interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGGraphicsElement",
        "",
        "SVGGraphicsElement",
        "The SVGGraphicsElement interface represents SVG elements whose primary purpose is to directly render graphics into a group.",
        [
            [
                "SVGGraphicsElement.requiredExtensions Read only",
                "An SVGStringList reflecting the requiredExtensions attribute of the given element."
            ],
            [
                "SVGGraphicsElement.systemLanguage Read only",
                "An SVGStringList reflecting the systemLanguage attribute of the given element."
            ],
            [
                "SVGGraphicsElement.transform Read only",
                "An SVGAnimatedTransformList reflecting the computed value of the transform property and its corresponding transform attribute of the given element."
            ],
            [
                "SVGGraphicsElement.getBBox()",
                "Returns a DOMRect representing the computed bounding box of the current element."
            ],
            [
                "SVGGraphicsElement.getCTM()",
                "Returns a DOMMatrix representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system."
            ],
            [
                "SVGGraphicsElement.getScreenCTM()",
                "Returns a DOMMatrix representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment."
            ],
            [
                "copy",
                "Fired when the user initiates a copy action through the browser's user interface."
            ],
            [
                "cut",
                "Fired when the user has initiated a \"cut\" action through the browser's user interface."
            ],
            [
                "paste",
                "Fires when the user has initiated a \"paste\" action through the browser's user interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGHKernElement",
        "",
        "SVGHKernElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGImageElement",
        "",
        "SVGImageElement",
        "The SVGImageElement interface corresponds to the <image> element.",
        [
            [
                "SVGImageElement.href Read only",
                "An SVGAnimatedString corresponding to the href or xlink:href attribute of the given <image> element."
            ],
            [
                "SVGImageElement.crossOrigin",
                "A DOMString corresponding to the crossorigin attribute of the given <image> element."
            ],
            [
                "SVGImageElement.decoding",
                "A DOMString representing a hint given to the browser on how it should decode the image."
            ],
            [
                "SVGImageElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given <image> element."
            ],
            [
                "SVGImageElement.preserveAspectRatio Read only",
                "An SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given <image> element."
            ],
            [
                "SVGImageElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given <image> element."
            ],
            [
                "SVGImageElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given <image> element."
            ],
            [
                "SVGImageElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given <image> element."
            ],
            [
                "SVGImageElement.decode()",
                "Initiates asynchronous decoding of the image data. Returns a Promise which resolves once the image data is ready to be used."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGLength",
        "",
        "SVGLength",
        "The SVGLength interface correspond to the <length> basic data type.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGLengthList",
        "",
        "SVGLengthList",
        "The SVGLengthList defines a list of SVGLength objects.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGLinearGradientElement",
        "",
        "SVGLinearGradientElement",
        "The SVGLinearGradientElement interface corresponds to the <linearGradient> element.",
        [
            [
                "SVGLinearGradientElement.x1 Read only",
                "An SVGAnimatedLength corresponding to the x1 attribute of the given <linearGradient> element."
            ],
            [
                "SVGLinearGradientElement.y1 Read only",
                "An SVGAnimatedLength corresponding to the y1 attribute of the given <linearGradient> element."
            ],
            [
                "SVGLinearGradientElement.x2 Read only",
                "An SVGAnimatedLength corresponding to the x2 attribute of the given <linearGradient> element."
            ],
            [
                "SVGLinearGradientElement.y2 Read only",
                "An SVGAnimatedLength corresponding to the y2 attribute of the given <linearGradient> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGLineElement",
        "",
        "SVGLineElement",
        "The SVGLineElement interface provides access to the properties of <line> elements, as well as methods to manipulate them.",
        [
            [
                "SVGLineElement.x1 Read only",
                "Returns an SVGAnimatedLength that corresponds to attribute x1 on the given <line> element."
            ],
            [
                "SVGLineElement.y1 Read only",
                "Returns an SVGAnimatedLength that corresponds to attribute y1 on the given <line> element."
            ],
            [
                "SVGLineElement.x2 Read only",
                "Returns an SVGAnimatedLength that corresponds to attribute x2 on the given <line> element."
            ],
            [
                "SVGLineElement.y2 Read only",
                "Returns an SVGAnimatedLength that corresponds to attribute y2 on the given <line> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGMarkerElement",
        "",
        "SVGMarkerElement",
        "The SVGMarkerElement interface provides access to the properties of <marker> elements, as well as methods to manipulate them. The <marker> element defines the graphics used for drawing marks on a shape.",
        [
            [
                "SVGMarkerElement.markerUnitsRead only",
                "Returns an SVGAnimatedEnumeration object, with one of the following values: 0 SVG_MARKERUNITS_UNKNOWN which means that the markerUnits attribute has a value other than the two predefined keywords. 1 SVG_MARKERUNITS_USERSPACEONUSE which means that the markerUnits attribute has the keyword value userSpaceOnUse. 2 SVG_MARKERUNITS_STROKEWIDTH which means that the markerUnits attribute has the keyword value strokeWidth."
            ],
            [
                "0",
                "SVG_MARKERUNITS_UNKNOWN which means that the markerUnits attribute has a value other than the two predefined keywords."
            ],
            [
                "1",
                "SVG_MARKERUNITS_USERSPACEONUSE which means that the markerUnits attribute has the keyword value userSpaceOnUse."
            ],
            [
                "2",
                "SVG_MARKERUNITS_STROKEWIDTH which means that the markerUnits attribute has the keyword value strokeWidth."
            ],
            [
                "SVGMarkerElement.markerWidthRead only",
                "Returns an SVGAnimatedLength object containing the width of the <marker> viewport."
            ],
            [
                "SVGMarkerElement.markerHeightRead only",
                "Returns an SVGAnimatedLength object containing the height of the <marker> viewport."
            ],
            [
                "SVGMarkerElement.orientTypeRead only",
                "Returns an SVGAnimatedEnumeration object, with one of the following values: 0 SVG_MARKER_ORIENT_UNKNOWN which means that the orient attribute has a value other than the two predefined keywords. 1 SVG_MARKERUNITS_ORIENT_AUTO which means that the orient attribute has the keyword value auto. 2 SVG_MARKERUNITS_ORIENT_ANGLE which means that the orient attribute has an <angle> or <number> value indicating the angle."
            ],
            [
                "0",
                "SVG_MARKER_ORIENT_UNKNOWN which means that the orient attribute has a value other than the two predefined keywords."
            ],
            [
                "1",
                "SVG_MARKERUNITS_ORIENT_AUTO which means that the orient attribute has the keyword value auto."
            ],
            [
                "2",
                "SVG_MARKERUNITS_ORIENT_ANGLE which means that the orient attribute has an <angle> or <number> value indicating the angle."
            ],
            [
                "SVGMarkerElement.orientAngleRead only",
                "Returns an SVGAnimatedAngle object containing the angle of the orient attribute."
            ],
            [
                "SVGMarkerElement.refXRead only",
                "Returns an SVGAnimatedLength object containing the value of the refX attribute of the <marker>."
            ],
            [
                "SVGMarkerElement.refYRead only",
                "Returns an SVGAnimatedLength object containing the value of the refY attribute of the <marker>."
            ],
            [
                "SVGMarkerElement.viewBoxRead only",
                "Returns an SVGAnimatedRect object containing an SVGRect which contains the values set by the viewBox attribute on the <marker>."
            ],
            [
                "SVGMarkerElement.preserveAspectRatioRead only",
                "Returns an SVGPreserveAspectRatio object which contains the values set by the preserveAspectRatio attribute on the <marker> viewport."
            ],
            [
                "SVGMarkerElement.setOrientToAuto()",
                "Sets the value of the orient attribute to auto."
            ],
            [
                "SVGMarkerElement.setOrientToAngle()",
                "Sets the value of the orient attribute to a specific angle value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGMaskElement",
        "",
        "SVGMaskElement",
        "The SVGMaskElement interface provides access to the properties of <mask> elements, as well as methods to manipulate them.",
        [
            [
                "SVGMaskElement.maskUnits Read only",
                "An SVGAnimatedEnumeration corresponding to the maskUnits attribute of the given <mask> element. Takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGMaskElement.maskContentUnits Read only",
                "An SVGAnimatedEnumeration corresponding to the maskContentUnits attribute of the given <mask> element. Takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGMaskElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given <mask> element."
            ],
            [
                "SVGMaskElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given <mask> element."
            ],
            [
                "SVGMaskElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given <mask> element."
            ],
            [
                "SVGMaskElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given <mask> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGMatrix",
        "",
        "SVGMatrix",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "SVGMatrix.a",
                "A float representing the a component of the matrix."
            ],
            [
                "SVGMatrix.b",
                "A float representing the b component of the matrix."
            ],
            [
                "SVGMatrix.c",
                "A float representing the c component of the matrix."
            ],
            [
                "SVGMatrix.d",
                "A float representing the d component of the matrix."
            ],
            [
                "SVGMatrix.e",
                "A float representing the e component of the matrix."
            ],
            [
                "SVGMatrix.f",
                "A float representing the f component of the matrix."
            ],
            [
                "SVGMatrix.multiply()",
                "Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.inverse()",
                "Returns the inverse matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.translate()",
                "Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.scale()",
                "Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.scaleNonUniform()",
                "Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.rotate()",
                "Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.rotateFromVector()",
                "Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as SVGMatrix. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used."
            ],
            [
                "SVGMatrix.flipX()",
                "Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.flipY()",
                "Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.skewX()",
                "Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as SVGMatrix."
            ],
            [
                "SVGMatrix.skewY()",
                "Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as SVGMatrix."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGMetadataElement",
        "",
        "SVGMetadataElement",
        "The SVGMetadataElement interface corresponds to the <metadata> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGMissingGlyphElement",
        "",
        "SVGMissingGlyphElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGMPathElement",
        "",
        "SVGMPathElement",
        "The SVGMPathElement interface corresponds to the <mpath> element.",
        [
            [
                "SVGMPathElement.href Read only",
                "An SVGAnimatedString that corresponds to the href or xlink:href attribute of the given <mpath> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGNumber",
        "",
        "SVGNumber",
        "The SVGNumber interface corresponds to the <number> basic data type.",
        [
            [
                "SVGNumber.value",
                "A float representing the number. Note: If the SVGNumber is read-only, a DOMException with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGNumberList",
        "",
        "SVGNumberList",
        "The SVGNumberList defines a list of SVGNumber objects.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPathElement",
        "",
        "SVGPathElement",
        "The SVGPathElement interface corresponds to the <path> element.",
        [
            [
                "SVGPathElement.getPathSegAtLength()",
                "Returns an unsigned long representing the index within the pathSegList utilizing the user agent's distance-along-a-path algorithm."
            ],
            [
                "SVGPathElement.createSVGPathSegClosePath()",
                "Returns a stand-alone, parentless SVGPathSegClosePath object."
            ],
            [
                "SVGPathElement.createSVGPathSegMovetoAbs()",
                "Returns a stand-alone, parentless SVGPathSegMovetoAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegMovetoRel()",
                "Returns a stand-alone, parentless SVGPathSegMovetoRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegLinetoAbs()",
                "Returns a stand-alone, parentless SVGPathSegLinetoAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegLinetoRel()",
                "Returns a stand-alone, parentless SVGPathSegLinetoRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoCubicAbs()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoCubicAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoCubicRel()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoCubicRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoQuadraticAbs()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoQuadraticRel()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegArcAbs()",
                "Returns a stand-alone, parentless SVGPathSegArcAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegArcRel()",
                "Returns a stand-alone, parentless SVGPathSegArcRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegLinetoHorizontalAbs()",
                "Returns a stand-alone, parentless SVGPathSegLinetoHorizontalAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegLinetoHorizontalRel()",
                "Returns a stand-alone, parentless SVGPathSegLinetoHorizontalRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegLinetoVerticalAbs()",
                "Returns a stand-alone, parentless SVGPathSegLinetoVerticalAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegLinetoVerticalRel()",
                "Returns a stand-alone, parentless SVGPathSegLinetoVerticalRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoCubicSmoothAbs()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoCubicSmoothAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoCubicSmoothRel()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoCubicSmoothRel object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoQuadraticSmoothAbs()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticSmoothAbs object."
            ],
            [
                "SVGPathElement.createSVGPathSegCurvetoQuadraticSmoothRel()",
                "Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticSmoothRel object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPatternElement",
        "",
        "SVGPatternElement",
        "The SVGPatternElement interface corresponds to the <pattern> element.",
        [
            [
                "SVGPatternElement.href Read only",
                "An SVGAnimatedString corresponding to the href or xlink:href attribute of the given <pattern> element."
            ],
            [
                "SVGPatternElement.patternUnits Read only",
                "An SVGAnimatedEnumeration corresponding to the patternUnits attribute of the given <pattern> element. Takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGPatternElement.patternContentUnits Read only",
                "An SVGAnimatedEnumeration corresponding to the patternContentUnits attribute of the given <pattern> element. Takes one of the constants defined in SVGUnitTypes."
            ],
            [
                "SVGPatternElement.patternTransform Read only",
                "An SVGAnimatedTransformList corresponding to the patternTransform attribute of the given <pattern> element."
            ],
            [
                "SVGPatternElement.x Read only",
                "An SVGAnimatedEnumeration corresponding to the x attribute of the given <pattern> element."
            ],
            [
                "SVGPatternElement.y Read only",
                "An SVGAnimatedEnumeration corresponding to the y attribute of the given <pattern> element."
            ],
            [
                "SVGPatternElement.width Read only",
                "An SVGAnimatedEnumeration corresponding to the width attribute of the given <pattern> element."
            ],
            [
                "SVGPatternElement.height Read only",
                "An SVGAnimatedEnumeration corresponding to the height attribute of the given <pattern> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPoint",
        "",
        "SVGPoint",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPointList",
        "",
        "SVGPointList",
        "The SVGPointList interface represents a list of SVGPoint objects.",
        [
            [
                "SVGPointList.lengthRead only",
                "Returns the number of points in the list."
            ],
            [
                "SVGPointList.numberOfItemsRead only",
                "Returns the number of points in the list."
            ],
            [
                "SVGPointList.clear()",
                "Removes all items in the list."
            ],
            [
                "SVGPointList.initialize()",
                "First removes all items in the list, then adds a single value to the list."
            ],
            [
                "SVGPointList.getItem()",
                "Gets an item from the list at a specified position."
            ],
            [
                "SVGPointList.insertItemBefore()",
                "Inserts an element into the list at a specified position."
            ],
            [
                "SVGPointList.replaceItem()",
                "Replaces an item in the list with a new item."
            ],
            [
                "SVGPointList.removeItem()",
                "Removes an item from the list."
            ],
            [
                "SVGPointList.appendItem()",
                "Adds an item to the end of the list."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPolygonElement",
        "",
        "SVGPolygonElement",
        "The SVGPolygonElement interface provides access to the properties of <polygon> elements, as well as methods to manipulate them.",
        [
            [
                "SVGPolygonElement.animatedPoints Read only",
                "A SVGPointList representing the animated value of the element's points attribute. If the points attribute is not being animated, it contains the same value as the points property."
            ],
            [
                "SVGPolygonElement.points",
                "A SVGPointList representing the base (i.e., static) value of the element's points attribute. Modifications via the SVGPointList object are reflected in the points attribute, and vice versa."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPolylineElement",
        "",
        "SVGPolylineElement",
        "The SVGPolylineElement interface provides access to the properties of <polyline> elements, as well as methods to manipulate them.",
        [
            [
                "SVGPolylineElement.animatedPoints Read only",
                "A SVGPointList representing the animated value of the element's points attribute. If the points attribute is not being animated, it contains the same value as the points property."
            ],
            [
                "SVGPolylineElement.points",
                "A SVGPointList representing the base (i.e., static) value of the element's points attribute. Modifications via the SVGPointList object are reflected in the points attribute, and vice versa."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGPreserveAspectRatio",
        "",
        "SVGPreserveAspectRatio",
        "The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGRadialGradientElement",
        "",
        "SVGRadialGradientElement",
        "The SVGRadialGradientElement interface corresponds to the <RadialGradient> element.",
        [
            [
                "SVGRadialGradientElement.cx Read only",
                "An SVGAnimatedLength corresponding to the cx attribute of the given <RadialGradient> element."
            ],
            [
                "SVGRadialGradientElement.cx Read only",
                "An SVGAnimatedLength corresponding to the cy attribute of the given <RadialGradient> element."
            ],
            [
                "SVGRadialGradientElement.r Read only",
                "An SVGAnimatedLength corresponding to the r attribute of the given <RadialGradient> element."
            ],
            [
                "SVGRadialGradientElement.fx Read only",
                "An SVGAnimatedLength corresponding to the fx attribute of the given <RadialGradient> element."
            ],
            [
                "SVGRadialGradientElement.fy Read only",
                "An SVGAnimatedLength corresponding to the fy attribute of the given <RadialGradient> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGRect",
        "",
        "SVGRect",
        "The SVGRect represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.",
        [
            [
                "SVGRect.x",
                "The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of 0 were specified."
            ],
            [
                "SVGRect.y",
                "The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of 0 were specified."
            ],
            [
                "SVGRect.width",
                "This represents the width of the rectangle. A value that is negative results to an error. A value of 0 disables rendering of the element"
            ],
            [
                "SVGRect.height",
                "This represents the height of the rectangle. A value that is negative results to an error. A value of 0 disables rendering of the element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGRectElement",
        "",
        "SVGRectElement",
        "The SVGRectElement interface provides access to the properties of <rect> elements, as well as methods to manipulate them.",
        [
            [
                "SVGRectElement.x Read only",
                "Returns an SVGAnimatedLength corresponding to the x attribute of the given <rect> element."
            ],
            [
                "SVGRectElement.y Read only",
                "Returns an SVGAnimatedLength corresponding to the y attribute of the given <rect> element."
            ],
            [
                "SVGRectElement.width Read only",
                "Returns an SVGAnimatedLength corresponding to the width attribute of the given <rect> element."
            ],
            [
                "SVGRectElement.height Read only",
                "Returns an SVGAnimatedLength corresponding to the height attribute of the given <rect> element."
            ],
            [
                "SVGRectElement.rx Read only",
                "Returns an SVGAnimatedLength corresponding to the rx attribute of the given <rect> element."
            ],
            [
                "SVGRectElement.ry Read only",
                "Returns an SVGAnimatedLength corresponding to the ry attribute of the given <rect> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGRenderingIntent",
        "",
        "SVGRenderingIntent",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGScriptElement",
        "",
        "SVGScriptElement",
        "The SVGScriptElement interface corresponds to the SVG <script> element.",
        [
            [
                "SVGScriptElement.href Read only",
                "An SVGAnimatedString corresponding to the href or xlink:href attribute of the given <script> element."
            ],
            [
                "SVGScriptElement.type Read only",
                "A DOMString corresponding to the type attribute of the given <script> element. A DOMException is raised with the code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read only attribute."
            ],
            [
                "SVGScriptElement.crossOrigin Read only",
                "A DOMString corresponding to the crossorigin attribute of the given <script> element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGSetElement",
        "",
        "SVGSetElement",
        "The SVGSetElement interface corresponds to the <set> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGStopElement",
        "",
        "SVGStopElement",
        "The SVGStopElement interface corresponds to the <stop> element.",
        [
            [
                "SVGStopElement.offset Read only",
                "An SVGAnimatedNumber corresponding to the offset of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGStringList",
        "",
        "SVGStringList",
        "The SVGStringList defines a list of DOMString objects.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGStyleElement",
        "",
        "SVGStyleElement",
        "The SVGStyleElement interface corresponds to the SVG <style> element.",
        [
            [
                "SVGStyleElement.type",
                "A DOMString corresponding to the type attribute of the given element. SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2."
            ],
            [
                "SVGStyleElement.media",
                "A DOMString corresponding to the media attribute of the given element. SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2."
            ],
            [
                "SVGStyleElement.title",
                "A DOMString corresponding to the title attribute of the given element. SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGSVGElement",
        "",
        "SVGSVGElement",
        "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
        [
            [
                "SVGSVGElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given <svg> element."
            ],
            [
                "SVGSVGElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given <svg> element."
            ],
            [
                "SVGSVGElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given <svg> element."
            ],
            [
                "SVGSVGElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given <svg> element."
            ],
            [
                "SVGSVGElement.contentScriptType",
                "An SVGAnimatedLength corresponding to the contentScriptType attribute of the given <svg> element."
            ],
            [
                "SVGSVGElement.contentStyleType",
                "An SVGAnimatedLength corresponding to the contentStyleType attribute of the given <svg> element."
            ],
            [
                "SVGSVGElement.pixelUnitToMillimeterX",
                "A float representing the size of the pixel unit (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided."
            ],
            [
                "SVGSVGElement.pixelUnitToMillimeterY",
                "A float representing the size of a pixel unit along the y-axis of the viewport."
            ],
            [
                "SVGSVGElement.screenPixelToMillimeterX",
                "User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the browser actually knows the physical size of a \"screen unit\", this float attribute will express that information; otherwise, user agents will provide a suitable default value (such as .28mm)."
            ],
            [
                "SVGSVGElement.screenPixelToMillimeterY",
                "Corresponding size of a screen pixel along the y-axis of the viewport."
            ],
            [
                "SVGSVGElement.useCurrentView",
                "The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the \"standard\" view, i.e., based on attributes on the <svg> element such as viewBox) or on a \"custom\" view (i.e., a hyperlink into a particular <view> or other element). If the initial view is the \"standard\" view, then this attribute is false. If the initial view is a \"custom\" view, then this attribute is true."
            ],
            [
                "SVGSVGElement.currentView",
                "An SVGViewSpec defining the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation: If the initial view was a \"standard\" view, then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly the values for transform and viewTarget within currentView will be null If the initial view was a link into a <view> element, then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will correspond to the corresponding attributes for the given <view> element the values for transform and viewTarget within currentView will be null If the initial view was a link into another element (i.e., other than a <view>), then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly for the closest ancestor <svg> element the values for transform within currentView will be null the viewTarget within currentView will represent the target of the link If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(…)), then: the values for viewBox, preserveAspectRatio, zoomAndPan, transform and viewTarget within currentView will correspond to the values from the SVG view specification fragment identifier"
            ],
            [
                "SVGSVGElement.currentScale",
                "On an outermost <svg> element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes currentScale and currentTranslate are equivalent to the 2×3 matrix [a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]. If \"magnification\" is enabled (i.e., zoomAndPan=\"magnify\"), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost <svg> element)."
            ],
            [
                "SVGSVGElement.currentTranslate Read only",
                "An SVGPoint representing the translation factor that takes into account user \"magnification\" corresponding to an outermost <svg> element. The behavior is undefined for <svg> elements that are not at the outermost level."
            ],
            [
                "SVGSVGElement.suspendRedraw()",
                "Takes a time-out value which indicates that redraw shall not occur until: the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out. In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to suspendRedraw() and unsuspendRedraw() should, but need not be, made in balanced pairs. To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to: const suspendHandleID = suspendRedraw(maxWaitMilliseconds) and follow the changes with a method call similar to: unsuspendRedraw(suspendHandleID) Note that multiple suspendRedraw() calls can be used at once, and that each such method call is treated independently of the other suspendRedraw() method calls."
            ],
            [
                "SVGSVGElement.unsuspendRedraw()",
                "Cancels a specified suspendRedraw() by providing a unique suspend handle ID that was returned by a previous suspendRedraw() call."
            ],
            [
                "SVGSVGElement.unsuspendRedrawAll()",
                "Cancels all currently active suspendRedraw() method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending suspendRedraw() method calls have been cancelled."
            ],
            [
                "SVGSVGElement.forceRedraw()",
                "In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating."
            ],
            [
                "SVGSVGElement.pauseAnimations()",
                "Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this <svg> element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused."
            ],
            [
                "SVGSVGElement.unpauseAnimations()",
                "Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended."
            ],
            [
                "SVGSVGElement.animationsPaused()",
                "Returns true if this SVG document fragment is in a paused state."
            ],
            [
                "SVGSVGElement.getCurrentTime()",
                "Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime() is called before the document timeline has begun (for example, by script running in a <script> element before the document's SVGLoad event is dispatched), then 0 is returned."
            ],
            [
                "SVGSVGElement.setCurrentTime()",
                "Adjusts the clock for this SVG document fragment, establishing a new current time. If setCurrentTime() is called before the document timeline has begun (for example, by script running in a <script> element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun."
            ],
            [
                "SVGSVGElement.getIntersectionList()",
                "Returns a NodeList of graphics elements whose rendered content intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
            ],
            [
                "SVGSVGElement.getEnclosureList()",
                "Returns a NodeList of graphics elements whose rendered content is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
            ],
            [
                "SVGSVGElement.checkIntersection()",
                "Returns true if the rendered content of the given element intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
            ],
            [
                "SVGSVGElement.checkEnclosure()",
                "Returns true if the rendered content of the given element is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
            ],
            [
                "SVGSVGElement.deselectAll()",
                "Unselects any selected objects, including any selections of text strings and type-in bars."
            ],
            [
                "SVGSVGElement.createSVGNumber()",
                "Creates an SVGNumber object outside of any document trees. The object is initialized to 0."
            ],
            [
                "SVGSVGElement.createSVGLength()",
                "Creates an SVGLength object outside of any document trees. The object is initialized to 0 user units."
            ],
            [
                "SVGSVGElement.createSVGAngle()",
                "Creates an SVGAngle object outside of any document trees. The object is initialized to a value of 0 degrees (unitless)."
            ],
            [
                "SVGSVGElement.createSVGPoint()",
                "Creates an SVGPoint object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system."
            ],
            [
                "SVGSVGElement.createSVGMatrix()",
                "Creates an SVGMatrix object outside of any document trees. The object is initialized to the identity matrix."
            ],
            [
                "SVGSVGElement.createSVGRect()",
                "Creates an SVGRect object outside of any document trees. The object is initialized such that all values are set to 0 user units."
            ],
            [
                "SVGSVGElement.createSVGTransform()",
                "Creates an SVGTransform object outside of any document trees. The object is initialized to an identity matrix transform (SVG_TRANSFORM_MATRIX)."
            ],
            [
                "SVGSVGElement.createSVGTransformFromMatrix()",
                "Creates an SVGTransform object outside of any document trees. The object is initialized to the given matrix transform (i.e., SVG_TRANSFORM_MATRIX). The values from the parameter matrix are copied, the matrix parameter is not adopted as SVGTransform::matrix."
            ],
            [
                "SVGSVGElement.getElementById()",
                "Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGSwitchElement",
        "",
        "SVGSwitchElement",
        "The SVGSwitchElement interface corresponds to the <switch> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGSymbolElement",
        "",
        "SVGSymbolElement",
        "The SVGSymbolElement interface corresponds to the <symbol> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTextContentElement",
        "",
        "SVGTextContentElement",
        "The SVGTextContentElement interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.",
        [
            [
                "SVGTextContentElement.textLength Read only",
                "An SVGAnimatedLength reflecting the textLength attribute of the given element."
            ],
            [
                "SVGTextContentElement.lengthAdjust Read only",
                "An SVGAnimatedEnumeration reflecting the lengthAdjust attribute of the given element. The numeric type values represent one of the constant values above."
            ],
            [
                "SVGTextContentElement.getNumberOfChars()",
                "Returns a long representing the total number of addressable characters available for rendering within the current element, regardless of whether they will be rendered."
            ],
            [
                "SVGTextContentElement.getComputedTextLength()",
                "Returns a float representing the computed length for the text within the element."
            ],
            [
                "SVGTextContentElement.getSubStringLength()",
                "Returns a float representing the computed length of the formatted text advance distance for a substring of text within the element. Note that this method only accounts for the widths of the glyphs in the substring and any extra spacing inserted by the CSS 'letter-spacing' and 'word-spacing' properties. Visual spacing adjustments made by the 'x' attribute is ignored."
            ],
            [
                "SVGTextContentElement.getStartPositionOfChar()",
                "Returns a DOMPoint representing the position of a typographic character after text layout has been performed. Note: In SVG 1.1 this method returned an SVGPoint."
            ],
            [
                "SVGTextContentElement.getEndPositionOfChar()",
                "Returns a DOMPoint representing the trailing position of a typographic character after text layout has been performed. Note: In SVG 1.1 this method returned an SVGPoint."
            ],
            [
                "SVGTextContentElement.getExtentOfChar()",
                "Returns a DOMRect representing the computed tight bounding box of the glyph cell that corresponds to a given typographic character."
            ],
            [
                "SVGTextContentElement.getRotationOfChar()",
                "Returns a float representing the rotation of typographic character."
            ],
            [
                "SVGTextContentElement.getCharNumAtPosition()",
                "Returns a long representing the character which caused a text glyph to be rendered at a given position in the coordinate system. Because the relationship between characters and glyphs is not one-to-one, only the first character of the relevant typographic character is returned"
            ],
            [
                "SVGTextContentElement.selectSubString()",
                "Selects text within the element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTextElement",
        "",
        "SVGTextElement",
        "The SVGTextElement interface corresponds to the <text> elements.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTextPathElement",
        "",
        "SVGTextPathElement",
        "The SVGTextPathElement interface corresponds to the <textPath> element.",
        [
            [
                "SVGTextPathElement.href Read only",
                "An SVGAnimatedString corresponding to the href or xlink:href attribute of the given element."
            ],
            [
                "SVGTextPathElement.startOffset Read only",
                "An SVGAnimatedLength corresponding to the X component of the startOffset attribute of the given element."
            ],
            [
                "SVGTextPathElement.method Read only",
                "An SVGAnimatedEnumeration corresponding to the method attribute of the given element. It takes one of the TEXTPATH_METHODTYPE_* constants defined on this interface."
            ],
            [
                "SVGTextPathElement.spacing Read only",
                "An SVGAnimatedEnumeration corresponding to the spacing attribute of the given element. It takes one of the TEXTPATH_SPACINGTYPE_* constants defined on this interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTextPositioningElement",
        "",
        "SVGTextPositioningElement",
        "The SVGTextPositioningElement interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.",
        [
            [
                "SVGTextPositioningElement.x Read only",
                "Returns an SVGAnimatedLengthList reflecting the x attribute of the given element."
            ],
            [
                "SVGTextPositioningElement.y Read only",
                "Returns an SVGAnimatedLengthList reflecting the y attribute of the given element."
            ],
            [
                "SVGTextPositioningElement.dx Read only",
                "Returns an SVGAnimatedLengthList reflecting the dx attribute of the given element."
            ],
            [
                "SVGTextPositioningElement.dy Read only",
                "Returns an SVGAnimatedLengthList reflecting the dy attribute of the given element."
            ],
            [
                "SVGTextPositioningElement.rotate Read only",
                "Returns an SVGAnimatedNumberList reflecting the rotate attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTitleElement",
        "",
        "SVGTitleElement",
        "The SVGTitleElement interface corresponds to the <title> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTransform",
        "",
        "SVGTransform",
        "SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTransformList",
        "",
        "SVGTransformList",
        "The SVGTransformList defines a list of SVGTransform objects.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTRefElement",
        "",
        "SVGTRefElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGTSpanElement",
        "",
        "SVGTSpanElement",
        "The SVGTSpanElement interface represents a <tspan> element.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGUnitTypes",
        "",
        "SVGUnitTypes",
        "The SVGUnitTypes interface defines a commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGUseElement",
        "",
        "SVGUseElement",
        "The SVGUseElement interface corresponds to the <use> element.",
        [
            [
                "SVGUseElement.href Read only",
                "An SVGAnimatedString corresponding to the href or xlink:href attribute of the given element."
            ],
            [
                "SVGUseElement.x Read only",
                "An SVGAnimatedLength corresponding to the x attribute of the given element."
            ],
            [
                "SVGUseElement.y Read only",
                "An SVGAnimatedLength corresponding to the y attribute of the given element."
            ],
            [
                "SVGUseElement.width Read only",
                "An SVGAnimatedLength corresponding to the width attribute of the given element."
            ],
            [
                "SVGUseElement.height Read only",
                "An SVGAnimatedLength corresponding to the height attribute of the given element."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGViewElement",
        "",
        "SVGViewElement",
        "The SVGViewElement interface provides access to the properties of <view> elements, as well as methods to manipulate them.",
        [
            [
                "SVGViewElement.viewTarget",
                "An SVGStringList corresponding to the viewTarget attribute of the given <view> element. A list of DOMString values which contain the names listed in the viewTarget attribute. Each of the DOMString values can be associated with the corresponding element using the getElementById() method call."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGVKernElement",
        "",
        "SVGVKernElement",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/SVGZoomAndPan",
        "",
        "SVGZoomAndPan",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "SVGZoomAndPan.zoomAndPan",
                "An unsigned short representing the value of the zoomAndPan attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SyncEvent",
        "",
        "SyncEvent",
        "",
        [
            [
                "SyncEvent.SyncEvent()",
                "Creates a new SyncEvent object."
            ],
            [
                "SyncEvent.tag Read only",
                "Returns the developer-defined identifier for this SyncEvent."
            ],
            [
                "SyncEvent.lastChance Read only",
                "Returns true if the user agent will not make further synchronization attempts after the current attempt."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/SyncManager",
        "",
        "SyncManager",
        "",
        [
            [
                "SyncManager.register",
                "Create a new sync registration and return a Promise."
            ],
            [
                "SyncManager.getTags",
                "Return a list of developer-defined identifiers for SyncManager registration."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TaskAttributionTiming",
        "",
        "TaskAttributionTiming",
        "",
        [
            [
                "TaskAttributionTiming.containerType Read only",
                "Returns the type of frame container, one of iframe, embed, or object."
            ],
            [
                "TaskAttributionTiming.containerSrc Read only",
                "Returns the container's src attribute."
            ],
            [
                "TaskAttributionTiming.containerId Read only",
                "Returns the container's id attribute."
            ],
            [
                "TaskAttributionTiming.containerName Read only",
                "Returns the container's name attribute."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Text",
        "",
        "Text",
        "The Text interface represents the textual content of Element or Attr.",
        [
            [
                "Text()",
                "Returns a Text node with the parameter as its textual content."
            ],
            [
                "Text.assignedSlot Read only",
                "Returns a HTMLSlotElement representing the <slot> the node is inserted in."
            ],
            [
                "Text.isElementContentWhitespace Read only",
                "Returns a Boolean flag indicating whether or not the text node contains only whitespace."
            ],
            [
                "Text.wholeText Read only",
                "Returns a DOMString containing the text of all Text nodes logically adjacent to this Node, concatenated in document order."
            ],
            [
                "Text.getBoxQuads()",
                "Returns a list of DOMQuad objects representing the CSS fragments of the node."
            ],
            [
                "Text.replaceWholeText",
                "Replaces the text of the current node and all logically adjacent nodes with the specified text."
            ],
            [
                "Text.splitText",
                "Breaks the node into two nodes at a specified offset."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextDecoder",
        "",
        "TextDecoder",
        "",
        [
            [
                "TextDecoder()",
                "Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters."
            ],
            [
                "TextDecoder.prototype.encodingRead only",
                "Is a DOMString containing the name of the decoder, that is a string describing the method the TextDecoder will use."
            ],
            [
                "TextDecoder.prototype.fatalRead only",
                "Is a Boolean indicating whether the error mode is fatal."
            ],
            [
                "TextDecoder.prototype.ignoreBOMRead only",
                "Is a Boolean indicating whether the byte order marker is ignored."
            ],
            [
                "TextDecoder.prototype.decode()",
                "Returns a DOMString containing the text decoded with the method of the specific TextDecoder object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextDecoderStream",
        "",
        "TextDecoderStream",
        "",
        [
            [
                "TextDecoderStream.TextDecoderStream()",
                "Creates a new TextDecoderStream object."
            ],
            [
                "TextDecoderStream.encodingRead only",
                "An encoding."
            ],
            [
                "TextDecoderStream.fatalRead only",
                "A boolean indicating if the error mode is fatal."
            ],
            [
                "TextDecoderStream.ignoreBOMRead only",
                "A boolean indicating whether the byte order mark is ignored."
            ],
            [
                "TextDecoderStream.readableRead only",
                "Returns the ReadableStream instance controlled by this object."
            ],
            [
                "TextDecoderStream.writableRead only",
                "Returns the WritableStream instance controlled by this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextEncoder",
        "",
        "TextEncoder",
        "",
        [
            [
                "TextEncoder()",
                "Returns a newly constructed TextEncoder that will generate a byte stream with UTF-8 encoding."
            ],
            [
                "TextEncoder.prototype.encodingRead only",
                "Always returns \"utf-8\"."
            ],
            [
                "TextEncoder.prototype.encode()",
                "Takes a USVString as input, and returns a Uint8Array containing UTF-8 encoded text."
            ],
            [
                "TextEncoder.prototype.encodeInto()",
                "Takes a USVString to encode and a destination Uint8Array to put resulting UTF-8 encoded text into, and returns a dictionary object indicating the progress of the encoding. This is potentially more performant than the older encode() method."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextEncoderStream",
        "",
        "TextEncoderStream",
        "",
        [
            [
                "TextEncoderStream.TextEncoderStream()",
                "Creates a new TextEncoderStream object."
            ],
            [
                "TextEncoderStream.encodingRead only",
                "Always returns \"utf-8\"."
            ],
            [
                "TextEncoderStream.readableRead only",
                "Returns the ReadableStream instance controlled by this object."
            ],
            [
                "TextEncoderStream.writableRead only",
                "Returns the WritableStream instance controlled by this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextMetrics",
        "",
        "TextMetrics",
        "The TextMetrics interface represents the dimensions of a piece of text in the canvas; a TextMetrics instance can be retrieved using the CanvasRenderingContext2D.measureText() method.",
        [
            [
                "TextMetrics.width Read only",
                "Is a double giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context."
            ],
            [
                "TextMetrics.actualBoundingBoxLeft Read only",
                "Is a double giving the distance from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline."
            ],
            [
                "TextMetrics.actualBoundingBoxRight Read only",
                "Is a double giving the distance from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline."
            ],
            [
                "TextMetrics.fontBoundingBoxAscent Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels."
            ],
            [
                "TextMetrics.fontBoundingBoxDescent Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels."
            ],
            [
                "TextMetrics.actualBoundingBoxAscent Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels."
            ],
            [
                "TextMetrics.actualBoundingBoxDescent Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels."
            ],
            [
                "TextMetrics.emHeightAscent Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the em square in the line box, in CSS pixels."
            ],
            [
                "TextMetrics.emHeightDescent Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the em square in the line box, in CSS pixels."
            ],
            [
                "TextMetrics.hangingBaseline Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels."
            ],
            [
                "TextMetrics.alphabeticBaseline Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels."
            ],
            [
                "TextMetrics.ideographicBaseline Read only",
                "Is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextRange",
        "",
        "TextRange",
        "This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        [
            [
                "TextRange.boundingHeightRead only",
                "Returns the height of the rectangle bound to the TextRange object."
            ],
            [
                "TextRange.boundingLeftRead only",
                "Returns the distance between the left edge of the rectangle that binds the TextRange object and the left edge that completely contains the TextRange object."
            ],
            [
                "TextRange.boundingTopRead only",
                "Returns the distance between the top edge of the rectangle that binds the TextRange object and the top edge that completely contains the TextRange object."
            ],
            [
                "TextRange.boundingWidthRead only",
                "Returns the width of the rectangle bound to the TextRange object."
            ],
            [
                "TextRange.htmlText",
                "Gets or sets the HTML content within the TextRange."
            ],
            [
                "TextRange.text",
                "Gets or sets the plaintext content within the TextRange."
            ],
            [
                "TextRange.collapse()",
                "Move the caret to the beginning or end of the current range."
            ],
            [
                "TextRange.duplicate()",
                "Returns a copy of TextRange."
            ],
            [
                "TextRange.execCommand()",
                "Executes a command on the current document, the current selection, or the given scope."
            ],
            [
                "TextRange.expand()",
                "Expand the range to include the full range of specified units. For example, expanding a \"word\" means that the words at both ends of the range will completely included in the range. xpand to wor may become expand to words, etc."
            ],
            [
                "TextRange.findText()",
                "Searches the specified text in the original range and adjusts the range to include the first match."
            ],
            [
                "TextRange.inRange()",
                "Returns whether the current range contains the specified range."
            ],
            [
                "TextRange.isEqual()",
                "Returns whether the current range is equal to the specified range."
            ],
            [
                "TextRange.move()",
                "Collapses the range and moves the blank range by a specified number of units. Such as, move(\"character\",-1) means to move one character to the left."
            ],
            [
                "TextRange.moveEnd()",
                "Moves the end of the range by a specified number of units."
            ],
            [
                "TextRange.moveStart()",
                "Moves the start of the range by a specified number of units."
            ],
            [
                "TextRange.moveToElementText()",
                "Causes the range to contain the text of the specified element. Can only be used on Element objects."
            ],
            [
                "TextRange.parentElement()",
                "Returns the parent element of the range, which is the smallest element that contains the range completely. If the selection contains more than one element, when you modify the contents of the selection, the contents will be placed in the corresponding position of the parent element instead of the child element."
            ],
            [
                "TextRange.pasteHTML()",
                "Paste the HTML content into the given range and replace any previous text and HTML elements in the range."
            ],
            [
                "TextRange.queryCommandEnabled()",
                "Returns a Boolean indicating whether the specified command can be executed successfully with the execCommand method in the current state of the given document. You can also see Document.queryCommandEnabled()."
            ],
            [
                "TextRange.queryCommandState()",
                "Returns the Boolean indicating the current state of the specified command. You can also see Document.queryCommandState()."
            ],
            [
                "TextRange.queryCommandValue()",
                "Returns the DOMString indicating the current value of the specified command. You can also see Document.queryCommandValue()."
            ],
            [
                "TextRange.scrollIntoView()",
                "Scroll the range to the visible range (top or bottom). It can be used as an alternative to Element.scrollIntoView in the lower version of IE."
            ],
            [
                "TextRange.select()",
                "Select the current range (i.e. the blue selection seen by the user)."
            ],
            [
                "TextRange.setEndPoint()",
                "Sets the end point of the current range based on the bounds of other TextRange."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextTrack",
        "",
        "TextTrack",
        "The TextTrack interface—part of the API for handling WebVTT (text tracks on media presentations)—describes and controls the text track associated with a particular <track> element.",
        [
            [
                "TextTrack.activeCues Read only",
                "A TextTrackCueList object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times. Thus, for displayed cues such as captions or subtitles, the active cues are currently being displayed."
            ],
            [
                "TextTrack.cues Read only",
                "A TextTrackCueList which contains all of the track's cues."
            ],
            [
                "TextTrack.id Read only",
                "A DOMString which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (\"\"). If the TextTrack is associated with a <track> element, then the track's ID matches the element's ID."
            ],
            [
                "TextTrack.inBandMetadataTrackDispatchType Read only",
                "Returns a DOMString which indicates the track's in-band metadata track dispatch type. needs details"
            ],
            [
                "TextTrack.kind Read only",
                "Returns a DOMString indicating what kind of text track the TextTrack describes. The value must be one of those in the TextTrackKind enum."
            ],
            [
                "TextTrack.label Read only",
                "A human-readable DOMString which contains the text track's label, if one is present; otherwise, this is an empty string (\"\"), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user."
            ],
            [
                "TextTrack.language Read only",
                "A DOMString which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML lang attribute. For example, this can be \"en-US\" for United States English or \"pt-BR\" for Brazilian Portuguese."
            ],
            [
                "TextTrack.mode",
                "A DOMString specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants. The default is disabled, unless the <track> element's default Boolean attribute is specified, in which case the default mode is started."
            ],
            [
                "cuechange",
                "Fired when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited. Also available via the oncuechange property."
            ],
            [
                "TextTrack.addCue()",
                "Adds a cue (specified as a TextTrackCue object to the track's list of cues."
            ],
            [
                "TextTrack.removeCue()",
                "Removes a cue (specified as a TextTrackCue object from the track's list of cues."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextTrackCue",
        "",
        "TextTrackCue",
        "",
        [
            [
                "TextTrackCue.track Read only",
                "The TextTrack that this cue belongs to, or null if it doesn't belong to any."
            ],
            [
                "TextTrackCue.id",
                "A DOMString that identifies the cue."
            ],
            [
                "TextTrackCue.startTime",
                "A double that represents the video time that the cue will start being displayed, in seconds."
            ],
            [
                "TextTrackCue.endTime",
                "A double that represents the video time that the cue will stop being displayed, in seconds."
            ],
            [
                "TextTrackCue.pauseOnExit",
                "A boolean for whether the video will pause when this cue stops being displayed."
            ],
            [
                "TextTrackCue.onenter",
                "The event handler for the enter event."
            ],
            [
                "TextTrackCue.onexit",
                "The event handler for the exit event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextTrackCueList",
        "",
        "TextTrackCueList",
        "The TextTrackCueList array-like object represents a dynamically updating list of TextTrackCue objects.",
        [
            [
                "TextTrackCueList.lengthRead only",
                "An unsigned long that is the number of cues in the list."
            ],
            [
                "TextTrackCueList.getCueById()",
                "Returns the first TextTrackCue object with the identifier passed to it."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TextTrackList",
        "",
        "TextTrackList",
        "The TextTrackList interface is used to represent a list of the text tracks defined by the <track> element, with each track represented by a separate textTrack object in the list.",
        [
            [
                "length Read only",
                "The number of tracks in the list."
            ],
            [
                "onaddtrack",
                "An event handler to be called when the addtrack event is fired, indicating that a new text track has been added to the media element."
            ],
            [
                "onchange",
                "An event handler to be called when the change event occurs."
            ],
            [
                "onremovetrack",
                "An event handler to call when the removetrack event is sent, indicating that a text track has been removed from the media element."
            ],
            [
                "getTrackById()",
                "Returns the TextTrack found within the TextTrackList whose id matches the specified string. If no match is found, null is returned."
            ],
            [
                "addtrack",
                "Fired when a new text track has been added to the media element. Also available via the onaddtrack property."
            ],
            [
                "change",
                "Fired when a text track has been made active or inactive. Also available via the onchange property."
            ],
            [
                "removetrack",
                "Fired when a new text track has been removed from the media element. Also available via the onremovetrack property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TimeEvent",
        "",
        "TimeEvent",
        "",
        [
            [
                "TimeEvent.detail Read only",
                "Is a long that specifies some detail information about the Event, depending on the type of the event. For this event type, indicates the repeat number for the animation."
            ],
            [
                "TimeEvent.view Read only",
                "Is a WindowProxy that identifies the Window from which the event was generated."
            ],
            [
                "initTimeEvent(DOMString typeArg, AbstractView viewArg, long detailArg)",
                "The initTimeEvent method is used to initialize the value of a TimeEvent created through the DocumentEvent interface. This method may only be called before the TimeEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TimeRanges",
        "",
        "TimeRanges",
        "When loading a media resource for use by an <audio> or <video> element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.",
        [
            [
                "TimeRanges.length Read only",
                "Returns an unsigned long representing the number of time ranges represented by the time range object."
            ],
            [
                "TimeRanges.start()",
                "Returns the time for the start of the range with the specified index."
            ],
            [
                "TimeRanges.end()",
                "Returns the time for the end of the specified range."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Touch",
        "",
        "Touch",
        "",
        [
            [
                "Touch()",
                "Creates a Touch object."
            ],
            [
                "Touch.identifier Read only",
                "Returns a unique identifier for this Touch object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time."
            ],
            [
                "Touch.screenX Read only",
                "Returns the X coordinate of the touch point relative to the left edge of the screen."
            ],
            [
                "Touch.screenY Read only",
                "Returns the Y coordinate of the touch point relative to the top edge of the screen."
            ],
            [
                "Touch.clientX Read only",
                "Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset."
            ],
            [
                "Touch.clientY Read only",
                "Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset."
            ],
            [
                "Touch.pageX Read only",
                "Returns the X coordinate of the touch point relative to the left edge of the document. Unlike clientX, this value includes the horizontal scroll offset, if any."
            ],
            [
                "Touch.pageY Read only",
                "Returns the Y coordinate of the touch point relative to the top of the document. Unlike clientY, this value includes the vertical scroll offset, if any."
            ],
            [
                "Touch.target Read only",
                "Returns the Element on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document."
            ],
            [
                "Touch.radiusX Read only",
                "Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenX."
            ],
            [
                "Touch.radiusY Read only",
                "Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenY."
            ],
            [
                "Touch.rotationAngle Read only",
                "Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface."
            ],
            [
                "Touch.forceRead only",
                "Returns the amount of pressure being applied to the surface by the user, as a float between 0.0 (no pressure) and 1.0 (maximum pressure)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TouchEvent",
        "",
        "TouchEvent",
        "",
        [
            [
                "TouchEvent()",
                "Creates a TouchEvent object."
            ],
            [
                "TouchEvent.altKey Read only",
                "A Boolean value indicating whether or not the alt key was down when the touch event was fired."
            ],
            [
                "TouchEvent.changedTouches Read only",
                "A TouchList of all the Touch objects representing individual points of contact whose states changed between the previous touch event and this one."
            ],
            [
                "TouchEvent.ctrlKey Read only",
                "A Boolean value indicating whether or not the control key was down when the touch event was fired."
            ],
            [
                "TouchEvent.metaKey Read only",
                "A Boolean value indicating whether or not the meta key was down when the touch event was fired."
            ],
            [
                "TouchEvent.shiftKey Read only",
                "A Boolean value indicating whether or not the shift key was down when the touch event was fired."
            ],
            [
                "TouchEvent.targetTouchesRead only",
                "A TouchList of all the Touch objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event."
            ],
            [
                "TouchEvent.touches Read only",
                "A TouchList of all the Touch objects representing all current points of contact with the surface, regardless of target or changed status."
            ],
            [
                "TouchEvent.rotation Read only",
                "Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation. Initial value: 0.0"
            ],
            [
                "TouchEvent.scale Read only",
                "Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the event. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: 1.0"
            ],
            [
                "GlobalEventHandlers.ontouchstart",
                "A global event handler for the touchstart event."
            ],
            [
                "GlobalEventHandlers.ontouchend",
                "A global event handler for the touchend event."
            ],
            [
                "GlobalEventHandlers.ontouchmove",
                "A global event handler for the touchmove event."
            ],
            [
                "GlobalEventHandlers.ontouchcancel",
                "A global event handler for the touchcancel event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TouchList",
        "",
        "TouchList",
        "",
        [
            [
                "TouchList.length Read only",
                "The number of Touch objects in the TouchList."
            ],
            [
                "TouchList.identifiedTouch()",
                "Returns the first Touch item in the list whose identifier matches a specified value."
            ],
            [
                "TouchList.item()",
                "Returns the Touch object at the specified index in the list."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrackDefault",
        "",
        "TrackDefault",
        "",
        [
            [
                "TrackDefault()",
                "Constructs and returns a new TrackDefault object."
            ],
            [
                "TrackDefault.type Read only",
                "Returns the type of track that this SourceBuffer's media segment data relates to (i.e. audio, video, or text track.)"
            ],
            [
                "TrackDefault.byteStreamTrackID Read only",
                "Returns the ID of the specific track that the SourceBuffer should apply to."
            ],
            [
                "TrackDefault.language Read only",
                "Returns the default language to use when an initialization segment does not contain language information for a new track."
            ],
            [
                "TrackDefault.label Read only",
                "Returns the default label to use when an initialization segment does not contain label information for a new track."
            ],
            [
                "TrackDefault.kinds Read only",
                "Returns the default kinds used when an initialization segment does not contain kind information for a new track."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrackDefaultList",
        "",
        "TrackDefaultList",
        "",
        [
            [
                "TrackDefaultList()",
                "Constructs and returns a new TrackDefaultList object."
            ],
            [
                "TrackDefaultList.length Read only",
                "Returns the number of TrackDefault objects in the list."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrackEvent",
        "",
        "TrackEvent",
        "The TrackEvent interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are addtrack and removetrack. It's important not to confuse TrackEvent with the RTCTrackEvent interface, which is used for tracks which are part of an RTCPeerConnection.",
        [
            [
                "TrackEvent()",
                "Creates and initializes a new TrackEvent object with the event type specified, as well as optional additional properties."
            ],
            [
                "track Read only",
                "The DOM track object the event is in reference to. If not null, this is always an object of one of the media track types: AudioTrack, VideoTrack, or TextTrack)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/Transferable",
        "",
        "Transferable",
        "The Transferable interface represents an object that can be transfered between different execution contexts, like the main thread and Web workers.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/TransformStream",
        "",
        "TransformStream",
        "",
        [
            [
                "TransformStream()",
                "Creates and returns a transform stream object from the given handlers."
            ],
            [
                "TransformStream.readable Read only",
                "The readable end of a TransformStream."
            ],
            [
                "TransformStream.writable Read only",
                "The writable end of a TransformStream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TransformStreamDefaultController",
        "",
        "TransformStreamDefaultController",
        "The TransformStreamDefaultController interface of the Streams API provides methods to manipulate the associated ReadableStream and WritableStream.",
        [
            [
                "TransformStreamDefaultController.desiredSizeRead only",
                "Returns the desired size to fill the readable side of the stream's internal queue."
            ],
            [
                "TransformStreamDefaultController.enqueue()",
                "Enqueues a chunk (single piece of data) in the readable side of the stream."
            ],
            [
                "TransformStreamDefaultController.error()",
                "Errors both the readable and writable side of the transform stream."
            ],
            [
                "TransformStreamDefaultController.terminate()",
                "Closes the readable side and errors the writable side of the stream."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TransitionEvent",
        "",
        "TransitionEvent",
        "This is an experimental technology Check the Browser compatibility table carefully before using this in production.",
        [
            [
                "TransitionEvent()",
                "Creates a TransitionEvent event with the given parameters."
            ],
            [
                "TransitionEvent.propertyName Read only",
                "Is a DOMString containing the name CSS property associated with the transition."
            ],
            [
                "TransitionEvent.elapsedTime Read only",
                "Is a float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property."
            ],
            [
                "TransitionEvent.pseudoElement Read only",
                "Is a DOMString, starting with ::, containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''."
            ],
            [
                "transitioncancel",
                "An Event fired when a CSS transition has been cancelled."
            ],
            [
                "transitionend",
                "An Event fired when a CSS transition has finished playing."
            ],
            [
                "transitionrun",
                "An Event fired when a CSS transition is created, when it is added to a set of running transitions, though not nessarilty started"
            ],
            [
                "transitionstart",
                "An Event fired when a CSS transition has started transitioning."
            ],
            [
                "TransitionEvent.initTransitionEvent()",
                "Initializes a TransitionEvent created using the deprecated Document.createEvent(\"TransitionEvent\") method."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TreeWalker",
        "",
        "TreeWalker",
        "",
        [
            [
                "TreeWalker.root Read only",
                "Returns a Node representing the root node as specified when the TreeWalker was created."
            ],
            [
                "TreeWalker.whatToShow Read only",
                "Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are: Constant Numerical value Description NodeFilter.SHOW_ALL -1 (that is the max value of unsigned long) Shows all nodes. NodeFilter.SHOW_ATTRIBUTE 2 Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree. NodeFilter.SHOW_CDATA_SECTION 8 Shows CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes. NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes. NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes. NodeFilter.SHOW_ELEMENT 1 Shows Element nodes. NodeFilter.SHOW_ENTITY 32 Legacy, no more usable. NodeFilter.SHOW_ENTITY_REFERENCE 16 Legacy, no more usable. NodeFilter.SHOW_NOTATION 2048 Legacy, no more usable. NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes. NodeFilter.SHOW_TEXT 4 Shows Text nodes."
            ],
            [
                "TreeWalker.filter Read only",
                "Returns a NodeFilter used to select the relevant nodes."
            ],
            [
                "TreeWalker.expandEntityReferences Read only",
                "Is a Boolean indicating, when discarding an entity reference its whole sub-tree must be discarded at the same time."
            ],
            [
                "TreeWalker.currentNode",
                "Is the Node on which the TreeWalker is currently pointing at."
            ],
            [
                "TreeWalker.parentNode()",
                "Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed."
            ],
            [
                "TreeWalker.firstChild()",
                "Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed."
            ],
            [
                "TreeWalker.lastChild()",
                "Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed."
            ],
            [
                "TreeWalker.previousSibling()",
                "Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed."
            ],
            [
                "TreeWalker.nextSibling()",
                "Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed."
            ],
            [
                "TreeWalker.previousNode()",
                "Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed."
            ],
            [
                "TreeWalker.nextNode()",
                "Moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrustedHTML",
        "",
        "TrustedHTML",
        "The TrustedHTML interface of the Trusted Types API represents a string that a developer can insert into an injection sink that will render it as HTML. These objects are created via TrustedTypePolicy.createHTML() and therefore have no constructor.",
        [
            [
                "TrustedHTML.toJSON()",
                "Returns a JSON representation of the stored data."
            ],
            [
                "TrustedHTML.toString()",
                "A string containing the sanitized HTML."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrustedScript",
        "",
        "TrustedScript",
        "The TrustedScript interface of the Trusted Types API represents a string with an uncompiled script body that a developer can insert into an injection sink that might execute the script. These objects are created via TrustedTypePolicy.createScript() and therefore have no constructor.",
        [
            [
                "TrustedScript.toJSON()",
                "Returns a JSON representation of the stored data."
            ],
            [
                "TrustedScript.toString()",
                "A string containing the sanitized script."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrustedScriptURL",
        "",
        "TrustedScriptURL",
        "The TrustedScriptURL interface of the Trusted Types API represents a string that a developer can insert into an injection sink that will parse it as a URL of an external script. These objects are created via TrustedTypePolicy.createScriptURL() and therefore have no constructor.",
        [
            [
                "TrustedScriptURL.toJSON()",
                "Returns a JSON representation of the stored data."
            ],
            [
                "TrustedScriptURL.toString()",
                "A string containing the sanitized URL."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrustedTypePolicy",
        "",
        "TrustedTypePolicy",
        "The TrustedTypePolicy interface of the Trusted Types API defines a group of functions which create TrustedType objects.",
        [
            [
                "TrustedTypePolicy.nameRead only",
                "A DOMString containing the name of the policy."
            ],
            [
                "TrustedTypePolicy.createHTML()",
                "Creates a TrustedHTML object."
            ],
            [
                "TrustedTypePolicy.createScript()",
                "Creates a TrustedScript object."
            ],
            [
                "TrustedTypePolicy.createScriptURL()",
                "Creates a TrustedScriptURL object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/TrustedTypePolicyFactory",
        "",
        "TrustedTypePolicyFactory",
        "The TrustedTypePolicyFactory interface of the Trusted Types API creates policies and allows the verification of Trusted Type objects against created policies.",
        [
            [
                "TrustedTypePolicyFactory.emptyHTMLRead only",
                "Returns a TrustedHTML object containing an empty string."
            ],
            [
                "TrustedTypePolicyFactory.emptyScriptRead only",
                "Returns a TrustedScript object containing an empty string."
            ],
            [
                "TrustedTypePolicyFactory.defaultPolicyRead only",
                "Returns the default TrustedTypePolicy or null if this is empty."
            ],
            [
                "TrustedTypePolicyFactory.createPolicy()",
                "Creates a TrustedTypePolicy object that implements the rules passed as policyOptions."
            ],
            [
                "TrustedTypePolicyFactory.isHTML()",
                "When passed a value checks that it is a valid TrustedHTML object."
            ],
            [
                "TrustedTypePolicyFactory.isScript()",
                "When passed a value checks that it is a valid TrustedScript object."
            ],
            [
                "TrustedTypePolicyFactory.isScriptURL()",
                "When passed a value checks that it is a valid TrustedScriptURL object."
            ],
            [
                "TrustedTypePolicyFactory.getAttributeType()",
                "Allows web developers to check whether a Trusted Type is required for an element and attribute, and if so which one."
            ],
            [
                "TrustedTypePolicyFactory.getPropertyType()",
                "Allows web developers to check whether a Trusted Type is required for a property, and if so which one."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/UIEvent",
        "",
        "UIEvent",
        "The UIEvent interface represents simple user interface events.",
        [
            [
                "UIEvent()",
                "Creates a UIEvent object."
            ],
            [
                "UIEvent.detailRead only",
                "Returns a long with details about the event, depending on the event type."
            ],
            [
                "UIEvent.isChar Read only",
                "Returns a Boolean indicating whether the event produced a key character or not."
            ],
            [
                "UIEvent.layerX Read only",
                "Returns the horizontal coordinate of the event relative to the current layer."
            ],
            [
                "UIEvent.layerY Read only",
                "Returns the vertical coordinate of the event relative to the current layer."
            ],
            [
                "UIEvent.pageX Read only",
                "Returns the horizontal coordinate of the event relative to the whole document."
            ],
            [
                "UIEvent.pageY Read only",
                "Returns the vertical coordinate of the event relative to the whole document."
            ],
            [
                "UIEvent.sourceCapabilities Read only",
                "Returns an instance of the InputDeviceCapabilities interface, which provides information about the physical device responsible for generating a touch event."
            ],
            [
                "UIEvent.viewRead only",
                "Returns a WindowProxy that contains the view that generated the event."
            ],
            [
                "UIEvent.which Read only",
                "Returns the numeric keyCode of the key pressed, or the character code (charCode) for an alphanumeric key pressed."
            ],
            [
                "UIEvent.initUIEvent()",
                "Initializes a UIEvent object. If the event has already being dispatched, this method does nothing."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/ULongRange",
        "",
        "ULongRange",
        "The ULongRange dictionary is used to define a range of permitted integer values for a property, with either or both a maximum and minimum value specified. The ConstrainULongRange dictionary is based on this, augmenting it to support exact and ideal values as well.",
        [
            [
                "max",
                "A numeric value in the range of signed 32-bit integers, specifying the largest permissible value of the property it describes."
            ],
            [
                "min",
                "A numeric value in the range of signed 32-bit integers, specifying the smallest permissible value of the property it describes."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/URL",
        "",
        "URL",
        "",
        [
            [
                "new URL()",
                "Creates and returns a URL object referencing the URL specified using an absolute URL string, or a relative URL string and a base URL string."
            ],
            [
                "hash",
                "A USVString containing a '#' followed by the fragment identifier of the URL."
            ],
            [
                "host",
                "A USVString containing the domain (that is the hostname) followed by (if a port was specified) a ':' and the port of the URL."
            ],
            [
                "hostname",
                "A USVString containing the domain of the URL."
            ],
            [
                "href",
                "A stringifier that returns a USVString containing the whole URL."
            ],
            [
                "origin Read only",
                "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port."
            ],
            [
                "password",
                "A USVString containing the password specified before the domain name."
            ],
            [
                "pathname",
                "Is a USVString containing an initial '/' followed by the path of the URL, not including the query string or fragment."
            ],
            [
                "port",
                "A USVString containing the port number of the URL."
            ],
            [
                "protocol",
                "A USVString containing the protocol scheme of the URL, including the final ':'."
            ],
            [
                "search",
                "A USVString indicating the URL's parameter string; if any parameters are provided, this string includes all of them, beginning with the leading ? character."
            ],
            [
                "searchParams Read only",
                "A URLSearchParams object which can be used to access the individual query parameters found in search."
            ],
            [
                "username",
                "A USVString containing the username specified before the domain name."
            ],
            [
                "toString()",
                "Returns a USVString containing the whole URL. It is a synonym for URL.href, though it can't be used to modify the value."
            ],
            [
                "toJSON()",
                "Returns a USVString containing the whole URL. It returns the same string as the href property."
            ],
            [
                "createObjectURL()",
                "Returns a DOMString containing a unique blob URL, that is a URL with blob: as its scheme, followed by an opaque string uniquely identifying the object in the browser."
            ],
            [
                "revokeObjectURL()",
                "Revokes an object URL previously created using URL.createObjectURL()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/URLSearchParams",
        "",
        "URLSearchParams",
        "The URLSearchParams interface defines utility methods to work with the query string of a URL.",
        [
            [
                "URLSearchParams()",
                "Returns a URLSearchParams object instance."
            ],
            [
                "URLSearchParams.append()",
                "Appends a specified key/value pair as a new search parameter."
            ],
            [
                "URLSearchParams.delete()",
                "Deletes the given search parameter, and its associated value, from the list of all search parameters."
            ],
            [
                "URLSearchParams.entries()",
                "Returns an iterator allowing iteration through all key/value pairs contained in this object."
            ],
            [
                "URLSearchParams.forEach()",
                "Allows iteration through all values contained in this object via a callback function."
            ],
            [
                "URLSearchParams.get()",
                "Returns the first value associated with the given search parameter."
            ],
            [
                "URLSearchParams.getAll()",
                "Returns all the values associated with a given search parameter."
            ],
            [
                "URLSearchParams.has()",
                "Returns a Boolean indicating if such a given parameter exists."
            ],
            [
                "URLSearchParams.keys()",
                "Returns an iterator allowing iteration through all keys of the key/value pairs contained in this object."
            ],
            [
                "URLSearchParams.set()",
                "Sets the value associated with a given search parameter to the given value. If there are several values, the others are deleted."
            ],
            [
                "URLSearchParams.sort()",
                "Sorts all key/value pairs, if any, by their keys."
            ],
            [
                "URLSearchParams.toString()",
                "Returns a string containing a query string suitable for use in a URL."
            ],
            [
                "URLSearchParams.values()",
                "Returns an iterator allowing iteration through all values of the key/value pairs contained in this object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USB",
        "",
        "USB",
        "",
        [
            [
                "USB.onconnect",
                "An event handler called whenever a previously paired device is connected."
            ],
            [
                "USB.ondisconnect",
                "An event handler called whenever a paired device is disconnected."
            ],
            [
                "USB.getDevices()",
                "Returns a Promise that resolves with an array of USBDevice objects for paired attached devices."
            ],
            [
                "USB.requestDevice()",
                "Returns a Promise that resolves with an instance of USBDevice if the specified device is found. Calling this function triggers the user agent's pairing flow."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBAlternateInterface",
        "",
        "USBAlternateInterface",
        "",
        [
            [
                "USBAlternateInterface.USBAlternateInterface",
                "Creates a new USBAlternateInterface object which will be populated with information about the alternate interface of the provided USBInterface with the given alternate setting number."
            ],
            [
                "USBAlternateInterface.alternateSettingRead only",
                "Returns the alternate setting number of this interface. This is equal to the bAlternateSetting field of the interface descriptor defining this interface."
            ],
            [
                "USBAlternateInterface.interfaceClassRead only",
                "Returns the class of this interface. This is equal to the bInterfaceClass field of the interface descriptor defining this interface. Standardized values for this field are defined by the USB Implementers Forum. A value of 0xFF indicates a vendor-defined interface."
            ],
            [
                "USBAlternateInterface.interfaceSubclassRead only",
                "Returns the subclass of this interface. This is equal to the bInterfaceSubClass field of the interface descriptor defining this interface. The meaning of this value depends on the interfaceClass field."
            ],
            [
                "USBAlternateInterface.interfaceProtocolRead only",
                "Returns the protocol supported by this interface. This is equal to the bInterfaceProtocol field of the interface descriptor defining this interface. The meaning of this value depends on the interfaceClass and interfaceSubclass fields."
            ],
            [
                "USBAlternateInterface.interfaceNameRead only",
                "Returns the name of the interface, if one is provided by the device. This is the value of the string descriptor with the index specified by the iInterface field of the interface descriptor defining this interface."
            ],
            [
                "USBAlternateInterface.endpointsRead only",
                "Returns an array containing instances of the USBEndpoint interface describing each of the endpoints that are part of this interface."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBConfiguration",
        "",
        "USBConfiguration",
        "",
        [
            [
                "USBConfiguration.USBConfiguration()",
                "Creates a new USBConfiguration object which contains information about the configuration on the provided USBDevice with the given configuration value."
            ],
            [
                "USBConfiguration.configurationValueRead only",
                "Returns the configuration value of this configuration. This is equal to the bConfigurationValue field of the configuration descriptor provided by the device defining this configuration."
            ],
            [
                "USBConfiguration.configurationNameRead only",
                "Returns the name provided by the device to describe this configuration. This is equal to the value of the string descriptor with the index provided in the iConfiguration field of the configuration descriptor defining this configuration."
            ],
            [
                "USBConfiguration.interfacesRead only",
                "Returns an array containing instances of the USBInterface describing each interface supported by this configuration."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBConnectionEvent",
        "",
        "USBConnectionEvent",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "USBConnectionEvent.USBConnectionEvent()",
                "Returns a USBConnectionEvent object."
            ],
            [
                "USBConnectionEvent.deviceRead only",
                "Returns a USBDevice object representing the current device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBDevice",
        "",
        "USBDevice",
        "",
        [
            [
                "USBDevice.configuration Read only",
                "A USBConfiguration object for the currently selected interface for a paired USB device."
            ],
            [
                "USBDevice.configurations Read only",
                "An array of device-specific interfaces for controlling a paired USB device."
            ],
            [
                "USBDevice.deviceClass Read only",
                "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceSubclass and USBDevice.deviceProtocol."
            ],
            [
                "USBDevice.deviceProtocol Read only",
                "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceClass and USBDevice.deviceSubclass."
            ],
            [
                "USBDevice.deviceSubclass Read only",
                "One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceClass and USBDevice.deviceProtocol."
            ],
            [
                "USBDevice.deviceVersionMajor Read only",
                "The major version number of the device in a semantic versioning scheme."
            ],
            [
                "USBDevice.deviceVersionMinor Read only",
                "The minor version number of the device in a semantic versioning scheme."
            ],
            [
                "USBDevice.deviceVersionSubminor Read only",
                "The patch version number of the device in a semantic versioning scheme."
            ],
            [
                "USBDevice.manufacturerName Read only",
                "The of the organization that manufactured the USB device."
            ],
            [
                "USBDevice.opened Read only",
                "Indicates whether a session has been started with a paired USB device."
            ],
            [
                "USBDevice.productId Read only",
                "The manufacturer-defined code that identifies a USB device."
            ],
            [
                "USBDevice.productName Read only",
                "The manufacturer-defined name that identifies a USB device."
            ],
            [
                "USBDevice.serialNumber Read only",
                "The manufacturer-defined serial number for the specific USB device."
            ],
            [
                "USBDevice.usbVersionMajor Read only",
                "One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMinor and USBDevice.usbVersionSubminor."
            ],
            [
                "USBDevice.usbVersionMinor Read only",
                "One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMajor and USBDevice.usbVersionSubminor."
            ],
            [
                "USBDevice.usbVersionSubminor Read only",
                "One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMajor and USBDevice.usbVersionMinor."
            ],
            [
                "USBDevice.vendorId Read only",
                "The official usg.org-assigned vendor ID."
            ],
            [
                "USBDevice.claimInterface()",
                "Returns a Promise that resolves when the requested interface is claimed for exclusive access."
            ],
            [
                "USBDevice.clearHalt()",
                "Returns a Promise that resolves when a halt condition is cleared."
            ],
            [
                "USBDevice.controlTransferIn()",
                "Returns a Promise that resolves with a USBTransferInResult when a command or status operation has been transmitted to the USB device."
            ],
            [
                "USBDevice.controlTransferOut()",
                "Returns a Promise that resolves with a USBTransferOutResult when a command or status operation has been transmitted from the USB device."
            ],
            [
                "USBDevice.close()",
                "Returns a Promise that resolves when all open interfaces are released and the device session has ended."
            ],
            [
                "USBDevice.isochronousTransferIn()",
                "Returns a Promise that resolves with a USBIsochronousInTransferResult when time sensitive information has been transmitted to the USB device."
            ],
            [
                "USBDevice.isochronousTransferOut()",
                "Returns a Promise that resolves with a USBIsochronousOutTransferResult when time sensitive information has been transmitted from the USB device."
            ],
            [
                "USBDevice.open()",
                "Returns a Promise that resolves when a device session has started."
            ],
            [
                "USBDevice.releaseInterface()",
                "Returns a Promise that resolves when a cliamed interface is released from exclusive access."
            ],
            [
                "USBDevice.reset()",
                "Returns a Promise that resolves when the device is reset and all app operations canceled and their promises rejected."
            ],
            [
                "USBDevice.selectAlternateInterface()",
                "Returns a Promise that resolves when the specified alternative endpoint is selected."
            ],
            [
                "USBDevice.selectConfiguration()",
                "Returns a Promise that resolves when the specified configuration is selected."
            ],
            [
                "USBDevice.transferIn()",
                "Returns a Promise that resolves with a USBTransferInResult when bulk or interrupt data is received from the USB device."
            ],
            [
                "USBDevice.transferOut()",
                "Returns a Promise that resolves with a USBTransferOutResult when bulk or interrupt data is sent to the USB device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBEndpoint",
        "",
        "USBEndpoint",
        "This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        [
            [
                "USBEndpoint.USBEndpoint",
                "Creates a new USBEndpoint object which will be populated with information about the endpoint on the provided USBAltenateInterface with the given endpoint number and transfer direction."
            ],
            [
                "USBEndpoint.endpointNumber",
                "Returns this endpoint's \"endpoint number\" which is a value from 1 to 15 extracted from the bEndpointAddress field of the endpoint descriptor defining this endpoint. This value is used to identify the endpoint when calling methods on USBDevice."
            ],
            [
                "USBEndpoint.direction",
                "Returns the direction in which this endpoint transfers data, one of: \"in\" - Data is transferred from device to host. \"out\" - Data is transferred from host to device."
            ],
            [
                "USBEndpoint.type",
                "Returns the type of this endpoint, one of: \"bulk\" - Provides reliable data transfer for large payloads. Data sent through a bulk endpoint is guaranteed to be delivered or generate an error but may be preempted by other data traffic. \"interrupt\" - Provides reliable data transfer for small payloads. Data sent through an interrupt endpoint is guaranteed to be delivered or generate an error and is also given dedicated bus time for transmission. \"isochronous\" - Provides unreliable data transfer for payloads that must be delivered periodically. They are given dedicated bus time but if a deadline is missed the data is dropped."
            ],
            [
                "USBEndpoint.packetSize",
                "Returns the size of the packets that data sent through this endpoint will be divided into."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBInterface",
        "",
        "USBInterface",
        "This page is not complete.",
        [
            [
                "USBInterface.USBInterface",
                "Creates a new USBInterface object which will be populated with information about the interface on the provided USBConfiguration with the given interface number."
            ],
            [
                "USBInterface.interfaceNumberRead only",
                "Returns the interface number of this interface. This is equal to the bInterfaceNumber field of the interface descriptor defining this interface."
            ],
            [
                "USBInterface.alternateRead only",
                "Returns the currently selected alternative configuration of this interface. By default this is the USBAlternateInterface from alternates with alternateSetting equal to 0. It can be changed by calling USBDevice.selectAlternateInterface() with any other value found in alternates."
            ],
            [
                "USBInterface.alternatesRead only",
                "Returns an array containing instances of the USBAlternateInterface interface describing each of the alternative configurations possible for this interface."
            ],
            [
                "USBInterface.claimedRead only",
                "Returns whether or not this interface has been claimed by the current page by calling USBDevice.claimInterface()."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBInTransferResult",
        "",
        "USBInTransferResult",
        "",
        [
            [
                "USBInTransferResult.USBInTransferResult()",
                "Creates a new USBInTransferResult object with the provided status and data fields."
            ],
            [
                "USBInTransferResult.dataRead only",
                "Returns a DataView object containing the data received from the USB device, if any."
            ],
            [
                "USBInTransferResult.statusRead only",
                "Returns the status of the transfer request, one of: \"ok\" - The transfer was successful. \"stall\" - The device indicated an error by generating a stall condition on the endpoint. A stall on the control endpoint does not need to be cleared. A stall on a bulk or interrupt endpoint must be cleared by calling clearHalt() before transferIn() can be called again. \"babble\" - The device responded with more data than was expected."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBIsochronousInTransferPacket",
        "",
        "USBIsochronousInTransferPacket",
        "",
        [
            [
                "USBIsochronousInTransferPacket.USBIsochronousInTransferPacket()",
                "Creates a new USBIsochronousInTransferPacket object with the provided status and data fields."
            ],
            [
                "USBIsochronousInTransferPacket.dataRead only Read only",
                "Returns a DataView object containing the data received from the USB device in this packet, if any."
            ],
            [
                "USBIsochronousInTransferPacket.statusRead only Read only",
                "Returns the status of the transfer request, one of: \"ok\" - The transfer was successful. \"stall\" - The device indicated an error by generating a stall condition on the endpoint. A stall on an isochronous endpoint does not need to be cleared. \"babble\" - The device responded with more data than was expected."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBIsochronousInTransferResult",
        "",
        "USBIsochronousInTransferResult",
        "",
        [
            [
                "USBIsochronousInTransferResult.USBIsochronousInTransferResult()",
                "Creates a new USBIsochronousInTransferResult object with the provided packets and data fields."
            ],
            [
                "USBIsochronousInTransferResult.dataRead only",
                "Returns a DataView object containing the data received from the device. This is the combined data from all packets. See the individual DataView objects in the packets array for the portion of this buffer containing data from each packet."
            ],
            [
                "USBIsochronousInTransferResult.packetsRead only",
                "Returns an array of USBIsochronousInTransferPacket objects containing the result of each request to receive a packet from the device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBIsochronousOutTransferPacket",
        "",
        "USBIsochronousOutTransferPacket",
        "",
        [
            [
                "USBIsochronousOutTransferPacket.USBIsochronousOutTransferPacket()",
                "Creates a new USBIsochronousOutTransferPacket object with the provided status and bytesWritten fields."
            ],
            [
                "USBIsochronousOutTransferPacket.bytesWrittenRead only",
                "Returns the number of bytes from the packet that were sent to the device."
            ],
            [
                "USBIsochronousOutTransferPacket.statusRead only",
                "Returns the status of the transfer request, one of: \"ok\" - The transfer was successful. \"stall\" - The device indicated an error by generating a stall condition on the endpoint. A stall on an isochronous endpoint does not need to be cleared."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBIsochronousOutTransferResult",
        "",
        "USBIsochronousOutTransferResult",
        "",
        [
            [
                "USBIsochronousOutTransferResult.USBIsochronousOutTransferResult()",
                "Creates a new USBIsochronousOutTransferResult object with the provided packet field."
            ],
            [
                "USBIsochronousOutTransferResult.packetsRead only",
                "Returns an array of USBIsochronousOutTransferPacket objects containing the result of each request to send a packet to the device."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USBOutTransferResult",
        "",
        "USBOutTransferResult",
        "",
        [
            [
                "USBOutTransferResult.USBOutTransferResult()",
                "Creates a new USBOutTransferResult object with the provided status and bytesWritten fields."
            ],
            [
                "USBOutTransferResult.bytesWrittenRead only",
                "Returns the number of bytes from the transfer request that were sent to the device."
            ],
            [
                "USBOutTransferResult.statusRead only",
                "Returns the status of the transfer request, one of: \"ok\" - The transfer was successful. \"stall\" - The device indicated an error by generating a stall condition on the endpoint. A stall on a bulk or interrupt endpoint must be cleared by calling clearHalt() before transferOut() can be called again."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/UserProximityEvent",
        "",
        "UserProximityEvent",
        "",
        [
            [
                "UserProximityEvent.near",
                "Indicates if the device has sensed a nearby physical object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/USVString",
        "",
        "USVString",
        "",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/ValidityState",
        "",
        "ValidityState",
        "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
        [
            [
                "badInput Read only",
                "A Boolean that is true if the user has provided input that the browser is unable to convert."
            ],
            [
                "customError Read only",
                "A Boolean indicating whether the element's custom validity message has been set to a non-empty string by calling the element's setCustomValidity() method."
            ],
            [
                "patternMismatch Read only",
                "A Boolean that is true if the value does not match the specified pattern, and false if it does match. If true, the element matches the :invalid CSS pseudo-class."
            ],
            [
                "rangeOverflow Read only",
                "A Boolean that is true if the value is greater than the maximum specified by the max attribute, or false if it is less than or equal to the maximum. If true, the element matches the :invalid and :out-of-range and CSS pseudo-classes."
            ],
            [
                "rangeUnderflow Read only",
                "A Boolean that is true if the value is less than the minimum specified by the min attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
            ],
            [
                "stepMismatch Read only",
                "A Boolean that is true if the value does not fit the rules determined by the step attribute (that is, it's not evenly divisible by the step value), or false if it does fit the step rule. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
            ],
            [
                "tooLong Read only",
                "A Boolean that is true if the value exceeds the specified maxlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is less than or equal to the maximum length. Note: This property is never true in Gecko, because elements' values are prevented from being longer than maxlength. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
            ],
            [
                "tooShort Read only",
                "A Boolean that is true if the value fails to meet the specified minlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is greater than or equal to the minimum length. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes."
            ],
            [
                "typeMismatch Read only",
                "A Boolean that is true if the value is not in the required syntax (when type is email or url), or false if the syntax is correct. If true, the element matches the :invalid CSS pseudo-class."
            ],
            [
                "valid Read only",
                "A Boolean that is true if the element meets all its validation constraints, and is therefore considered to be valid, or false if it fails any constraint. If true, the element matches the :valid CSS pseudo-class; the :invalid CSS pseudo-class otherwise."
            ],
            [
                "valueMissing Read only",
                "A Boolean that is true if the element has a required attribute, but no value, or false otherwise. If true, the element matches the :invalid CSS pseudo-class."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VideoConfiguration",
        "",
        "VideoConfiguration",
        "The VideoConfiguration dictionary of the Media Capabilities API is used to define the video file being tested when calling the MediaCapabilities methods encodingInfo() and decodingInfo() to determine whether or not the described video configuration is supported, and how smoothly and how smoooth and power-efficient it can be handled.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/VideoPlaybackQuality",
        "",
        "VideoPlaybackQuality",
        "",
        [
            [
                "creationTime Read only",
                "A DOMHighResTimeStamp containing the time in milliseconds between the start of the navigation and the creation of the object."
            ],
            [
                "droppedVideoFrames Read only",
                "An unsigned long giving the number of video frames dropped since the creation of the associated HTMLVideoElement."
            ],
            [
                "totalVideoFrames Read only",
                "An unsigned long giving the number of video frames created and dropped since the creation of the associated HTMLVideoElement."
            ],
            [
                "corruptedVideoFrames Read only",
                "An unsigned long giving the number of video frames corrupted since the creation of the associated HTMLVideoElement. A corrupted frame may be created or dropped."
            ],
            [
                "totalFrameDelay Read only",
                "A double containing the sum of the frame delay since the creation of the associated HTMLVideoElement. The frame delay is the difference between a frame's theoretical presentation time and its effective display time."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VideoTrack",
        "",
        "VideoTrack",
        "The VideoTrack interface represents a single video track from a <video> element. The most common use for accessing a VideoTrack object is to toggle its selected property in order to make it the active video track for its <video> element.",
        [
            [
                "selected",
                "A Boolean value which controls whether or not the video track is active. Only a single video track can be active at any given time, so setting this property to true for one track while another track is active will make that other track inactive."
            ],
            [
                "id Read only",
                "A DOMString which uniquely identifies the track within the media. This ID can be used to locate a specific track within a video track list by calling VideoTrackList.getTrackById(). The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification."
            ],
            [
                "kind Read only",
                "A DOMString specifying the category into which the track falls. For example, the main video track would have a kind of \"main\"."
            ],
            [
                "label Read only",
                "A DOMString providing a human-readable label for the track. For example, a track whose kind is \"sign\" might have a label of \"A sign-language interpretation\". This string is empty if no label is provided."
            ],
            [
                "language Read only",
                "A DOMString specifying the video track's primary language, or an empty string if unknown. The language is specified as a BCP 47 (RFC 5646) language code, such as \"en-US\" or \"pt-BR\"."
            ],
            [
                "sourceBuffer Read only",
                "The SourceBuffer that created the track. Returns null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VideoTrackList",
        "",
        "VideoTrackList",
        "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list.",
        [
            [
                "length Read only",
                "The number of tracks in the list."
            ],
            [
                "selectedIndex Read only",
                "The index of the currently selected track, if any, or −1 otherwise."
            ],
            [
                "onaddtrack",
                "An event handler to be called when the addtrack event is fired, indicating that a new video track has been added to the media element."
            ],
            [
                "onchange",
                "An event handler to be called when the change event occurs — that is, when the value of the selected property for a track has changed, due to the track being made active or inactive."
            ],
            [
                "onremovetrack",
                "An event handler to call when the removetrack event is sent, indicating that a video track has been removed from the media element."
            ],
            [
                "getTrackById()",
                "Returns the VideoTrack found within the VideoTrackList whose id matches the specified string. If no match is found, null is returned."
            ],
            [
                "addtrack",
                "Fired when a new video track has been added to the media element. Also available via the onaddtrack property."
            ],
            [
                "change",
                "Fired when a video track has been made active or inactive. Also available via the onchange property."
            ],
            [
                "removetrack",
                "Fired when a new video track has been removed from the media element. Also available via the onremovetrack property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VisualViewport",
        "",
        "VisualViewport",
        "",
        [
            [
                "VisualViewport.offsetLeft Read only",
                "Returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels."
            ],
            [
                "VisualViewport.offsetTop Read only",
                "Returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels."
            ],
            [
                "VisualViewport.pageLeft Read only",
                "Returns the x coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels."
            ],
            [
                "VisualViewport.pageTop Read only",
                "Returns the y coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels."
            ],
            [
                "VisualViewport.width Read only",
                "Returns the width of the visual viewport in CSS pixels."
            ],
            [
                "VisualViewport.height Read only",
                "Returns the height of the visual viewport in CSS pixels."
            ],
            [
                "VisualViewport.scale Read only",
                "Returns the pinch-zoom scaling factor applied to the visual viewport."
            ],
            [
                "resize",
                "Fired when the visual viewport is resized. Also available via the VisualViewport.onresize property."
            ],
            [
                "scroll",
                "Fired when the visual viewport is scrolled. Also available via the VisualViewport.onscroll property."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRDisplay",
        "",
        "VRDisplay",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRDisplay.capabilities Read only",
                "Returns a VRDisplayCapabilities object that indicates the various capabilities of the VRDisplay."
            ],
            [
                "VRDisplay.depthFar",
                "Gets and sets the z-depth defining the far plane of the eye view frustum, i.e. the furthest viewable boundary of the scene."
            ],
            [
                "VRDisplay.depthNear",
                "Gets and sets the z-depth defining the near plane of the eye view frustum, i.e. the nearest viewable boundary of the scene."
            ],
            [
                "VRDisplay.displayId Read only",
                "Returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see Gamepad.displayId)."
            ],
            [
                "VRDisplay.displayName Read only",
                "Returns a human-readable name to identify the VRDisplay."
            ],
            [
                "VRDisplay.hardwareUnitId",
                "Returns a DOMString defining the shared ID of the display, and any other devices that are part of that hardware set (e.g. controllers). This is no longer needed, and has been removed from the spec. Displays now use VRDisplay.displayId, and corresponsing controllers will now return the same ID under Gamepad.displayId."
            ],
            [
                "VRDisplay.isConnected Read only",
                "Returns a Boolean indicating whether the VRDisplay is connected to the computer."
            ],
            [
                "VRDisplay.isPresenting Read only",
                "Returns a Boolean indicating whether the VRDisplay is currently having content presented through it."
            ],
            [
                "VRDisplay.stageParameters Read only",
                "Returns a VRStageParameters object containing room-scale parameters, if the VRDisplay is capable of supporting room-scale experiences."
            ],
            [
                "VRDisplay.getEyeParameters()",
                "Returns the VREyeParameters object containing the eye parameters for the specified eye."
            ],
            [
                "VRDisplay.getFrameData()",
                "Accepts a VRFrameData object and populates it with the information required to render the current frame."
            ],
            [
                "VRDisplay.getImmediatePose()",
                "Returns a VRPose object defining the current pose of the VRDisplay, with no prediction applied. This is no longer needed, and has been removed from the spec."
            ],
            [
                "VRDisplay.getLayers()",
                "Returns the layers currently being presented by the VRDisplay."
            ],
            [
                "VRDisplay.getPose()",
                "Returns a VRPose object defining the future predicted pose of the VRDisplay as it will be when the current frame is actually presented. This method is deprecated — instead, you should use VRDisplay.getFrameData(), which also provides a VRPose object."
            ],
            [
                "VRDisplay.resetPose()",
                "Resets the pose for this VRDisplay, treating its current VRPose.position and VRPose.orientation as the \"origin/zero\" values."
            ],
            [
                "VRDisplay.cancelAnimationFrame()",
                "A special implementation of Window.cancelAnimationFrame that allows callbacks registered with VRDisplay.requestAnimationFrame() to be unregistered."
            ],
            [
                "VRDisplay.requestAnimationFrame()",
                "A special implementation of Window.requestAnimationFrame containing a callback function that will be called every time a new frame of the VRDisplay presentation is rendered."
            ],
            [
                "VRDisplay.requestPresent()",
                "Starts the VRDisplay presenting a scene."
            ],
            [
                "VRDisplay.exitPresent()",
                "Stops the VRDisplay presenting a scene."
            ],
            [
                "VRDisplay.submitFrame()",
                "Captures the current state of the VRLayerInit currently being presented and displays it on the VRDisplay."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRDisplayCapabilities",
        "",
        "VRDisplayCapabilities",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRDisplayCapabilities.canPresent Read only",
                "Returns a Boolean stating whether the VR display is capable of presenting content (e.g. through an HMD)."
            ],
            [
                "VRDisplayCapabilities.hasExternalDisplay Read only",
                "Returns a Boolean stating whether the VR display is separate from the device's primary display."
            ],
            [
                "VRDisplayCapabilities.hasOrientation Read only",
                "Returns a Boolean stating whether the VR display can track and return orientation information."
            ],
            [
                "VRDisplayCapabilities.hasPosition Read only",
                "Returns a Boolean stating whether the VR display can track and return position information."
            ],
            [
                "VRDisplayCapabilities.maxLayers Read only",
                "Returns a number indicating the maximum number of VRLayerInits that the VR display can present at once (e.g. the maximum length of the array that VRDisplay.requestPresent() can accept.)"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRDisplayEvent",
        "",
        "VRDisplayEvent",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRDisplayEvent.VRDisplayEvent()",
                "Creates a VRDisplayEvent object instance."
            ],
            [
                "VRDisplayEvent.display Read only",
                "The VRDisplay associated with this event."
            ],
            [
                "VRDisplayEvent.reason Read only",
                "A human-readable reason why the event was fired."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VREyeParameters",
        "",
        "VREyeParameters",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VREyeParameters.offset Read only",
                "Represents the offset from the center point between the user's eyes to the center of the eye, measured in meters."
            ],
            [
                "VREyeParameters.fieldOfView Read only",
                "Describes the current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD)."
            ],
            [
                "VREyeParameters.renderWidth Read only",
                "Describes the recommended render target width of each eye viewport, in pixels."
            ],
            [
                "VREyeParameters.renderHeight Read only",
                "Describes the recommended render target height of each eye viewport, in pixels."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRFieldOfView",
        "",
        "VRFieldOfView",
        "",
        [
            [
                "VRFieldOfView.upDegrees Read only",
                "The number of degrees upwards that the field of view extends in."
            ],
            [
                "VRFieldOfView.rightDegrees Read only",
                "The number of degrees to the right that the field of view extends in."
            ],
            [
                "VRFieldOfView.downDegrees Read only",
                "The number of degrees downwards that the field of view extends in."
            ],
            [
                "VRFieldOfView.leftDegrees Read only",
                "The number of degrees to the left that the field of view extends in."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRFrameData",
        "",
        "VRFrameData",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRFrameData.VRFrameData()",
                "Creates a VRFrameData object instance."
            ],
            [
                "VRFrameData.leftProjectionMatrix Read only",
                "A Float32Array representing a 4x4 matrix that describes the projection to be used for the left eye’s rendering."
            ],
            [
                "VRFrameData.leftViewMatrix Read only",
                "A Float32Array representing a 4x4 matrix that describes the view transform to be used for the left eye’s rendering."
            ],
            [
                "VRFrameData.pose Read only",
                "The VRPose of the VRDisplay at the current VRFrameData.timestamp."
            ],
            [
                "VRFrameData.rightProjectionMatrix Read only",
                "A Float32Array representing a 4x4 matrix that describes the projection to be used for the right eye’s rendering."
            ],
            [
                "VRFrameData.rightViewMatrix Read only",
                "A Float32Array representing a 4x4 matrix that describes the view transform to be used for the right eye’s rendering."
            ],
            [
                "VRFrameData.timestamp Read only",
                "A constantly increasing timestamp value representing the time a frame update occurred."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRLayerInit",
        "",
        "VRLayerInit",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRLayerInit.leftBounds",
                "Defines the left texture bounds of the canvas whose contents will be presented by the VRDisplay."
            ],
            [
                "VRLayerInit.rightBounds",
                "Defines the right texture bounds of the canvas whose contents will be presented by the VRDisplay."
            ],
            [
                "VRLayerInit.source",
                "Defines the canvas whose contents will be presented by the VRDisplay when VRDisplay.submitFrame() is called."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRPose",
        "",
        "VRPose",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRPose.position Read only",
                "Returns the position of the VRDisplay at the current VRPose.timestamp as a 3D vector"
            ],
            [
                "VRPose.linearVelocity Read only",
                "Returns the linear velocity of the VRDisplay at the current VRPose.timestamp, in meters per second."
            ],
            [
                "VRPose.linearAcceleration Read only",
                "Returns the linear acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second."
            ],
            [
                "VRPose.orientation Read only",
                "Returns the orientation of the sensor at the current VRPose.timestamp, as a quarternion value."
            ],
            [
                "VRPose.angularVelocity Read only",
                "Returns the angular velocity of the VRDisplay at the current VRPose.timestamp, in radians per second."
            ],
            [
                "VRPose.angularAcceleration Read only",
                "Returns the angular acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second."
            ],
            [
                "VRPose.timeStamp Read only",
                "Returns the current time stamp of the system — a monotonically increasing value useful for determining if position data has been updated, and what order updates have occurred in. This version of timestamp has been removed from the spec — instead, timestamps are now returned when VRDisplay.getFrameData() is called — see VRFrameData.timestamp."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VRStageParameters",
        "",
        "VRStageParameters",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "VRStageParameters.sittingToStandingTransform Read only",
                "Contains a matrix that transforms the sitting-space view matrices of VRFrameData to standing-space."
            ],
            [
                "VRStageParameters.sizeX Read only",
                "Returns the width of the play-area bounds in meters."
            ],
            [
                "VRStageParameters.sizeY Read only",
                "Returns the depth of the play-area bounds in meters."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VTTCue",
        "",
        "VTTCue",
        "",
        [
            [
                "VTTCue(startTime, endTime, text)",
                "Returns a newly created VTTCue object that covers the given time range and has the given text."
            ],
            [
                "startTime",
                "The time, in seconds and fractions of a second, that describes the beginning of the range of the media data to which the cue applies."
            ],
            [
                "endTime",
                "The time, in seconds and fractions of a second, that describes the end of the range of the media data to which the cue applies."
            ],
            [
                "text",
                "The raw text of the cue, and rules for its interpretation."
            ],
            [
                "VTTCue.region",
                "A VTTRegion object describing the video's sub-region that the cue will be drawn onto, or null if none is assigned."
            ],
            [
                "VTTCue.vertical",
                "Returns an enum representing the cue writing direction."
            ],
            [
                "VTTCue.snapToLines",
                "Returns true if the VTTCue.line attribute is an integer number of lines or a percentage of the video size."
            ],
            [
                "VTTCue.line",
                "Returns the line positioning of the cue. This can be the string auto or a number whose interpretation depends on the value of VTTCue.snapToLines."
            ],
            [
                "VTTCue.lineAlign",
                "Returns an enum representing the alignment of the VTTCue.line."
            ],
            [
                "VTTCue.position",
                "Returns the indentation of the cue within the line. This can be the string auto or a number representing the percentage of the VTTCue.region, or the video size if VTTCue.region is null."
            ],
            [
                "VTTCue.positionAlign",
                "Returns an enum representing the alignment of the cue. This is used to determine what the VTTCue.position is anchored to. The default is auto."
            ],
            [
                "VTTCue.size",
                "Returns a double representing the size of the cue, as a percentage of the video size."
            ],
            [
                "VTTCue.textAlign",
                "Returns an enum representing the alignment of all the lines of text within the cue box."
            ],
            [
                "VTTCue.text",
                "Returns a DOMString with the contents of the cue."
            ],
            [
                "getCueAsHTML()",
                "Returns the cue text as a DocumentFragment."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/VTTRegion",
        "",
        "VTTRegion",
        "",
        [
            [
                "VTTRegion()",
                "Returns a newly created VTTRegion object."
            ],
            [
                "VTTRegion.id",
                "A DOMString that identifies the region."
            ],
            [
                "VTTRegion.width",
                "A double representing the width of the region, as a percentage of the video."
            ],
            [
                "VTTRegion.lines",
                "A double representing the height of the region, in number of lines."
            ],
            [
                "VTTRegion.regionAnchorX",
                "A double representing the region anchor X offset, as a percentage of the region."
            ],
            [
                "VTTRegion.regionAnchorY",
                "A double representing the region anchor Y offset, as a percentage of the region."
            ],
            [
                "VTTRegion.viewportAnchorX",
                "A double representing the viewport anchor X offset, as a percentage of the video."
            ],
            [
                "VTTRegion.viewportAnchorY",
                "A double representing the viewport anchor Y offset, as a percentage of the video."
            ],
            [
                "VTTRegion.scroll",
                "An enum representing how adding new cues will move existing cues."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WakeLock",
        "",
        "WakeLock",
        "This page is not complete.",
        [
            [
                "request",
                "Requests a WakeLockSentinel object, which returns a Promise that resolves with a WakeLockSentinel object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WakeLockSentinel",
        "",
        "WakeLockSentinel",
        "This page is not complete.",
        [
            [
                "released Read only",
                "Returns a boolean indicating whether the WakeLockSentinel has been released."
            ],
            [
                "type Read only",
                "Returns a String representation of the currently acquired WakeLockSentinel type. Return values are: 'screen': A screen wake lock. Prevents devices from dimming or locking the screen."
            ],
            [
                "onrelease",
                "Fired when the release() method is called or the wake lock is released by the user agent."
            ],
            [
                "release()",
                "Releases the WakeLockSentinel, returning a Promise that is resolved once the sentinel has been successfully released."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WaveShaperNode",
        "",
        "WaveShaperNode",
        "",
        [
            [
                "WaveShaperNode()",
                "Creates a new instance of an WaveShaperNode object."
            ],
            [
                "WaveShaperNode.curve",
                "Is a Float32Array of numbers describing the distortion to apply."
            ],
            [
                "WaveShaperNode.oversample",
                "Is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_color_buffer_float",
        "",
        "WEBGL_color_buffer_float",
        "The WEBGL_color_buffer_float extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.",
        [
            [
                "ext.RGBA32F_EXT",
                "RGBA 32-bit floating-point color-renderable format."
            ],
            [
                "ext.RGB32F_EXT ( )",
                "RGB 32-bit floating-point color-renderable format."
            ],
            [
                "ext.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT",
                "?"
            ],
            [
                "ext.UNSIGNED_NORMALIZED_EXT",
                "?"
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_astc",
        "",
        "WEBGL_compressed_texture_astc",
        "The WEBGL_compressed_texture_astc extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.",
        [
            [
                "ext.getSupportedProfiles()",
                "Returns an array of strings containing the names of the ASTC profiles supported by the implementation."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_atc",
        "",
        "WEBGL_compressed_texture_atc",
        "This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        [
            [
                "ext.COMPRESSED_RGB_ATC_WEBGL",
                "Compresses RGB textures with no alpha channel."
            ],
            [
                "ext.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL",
                "Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp)."
            ],
            [
                "ext.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL",
                "Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_etc",
        "",
        "WEBGL_compressed_texture_etc",
        "The WEBGL_compressed_texture_etc extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.",
        [
            [
                "ext.COMPRESSED_R11_EAC",
                "One-channel (red) unsigned format compression."
            ],
            [
                "ext.COMPRESSED_SIGNED_R11_EAC",
                "One-channel (red) signed format compression."
            ],
            [
                "ext.COMPRESSED_RG11_EAC",
                "Two-channel (red and green) unsigned format compression."
            ],
            [
                "ext.COMPRESSED_SIGNED_RG11_EAC",
                "Two-channel (red and green) signed format compression."
            ],
            [
                "ext.COMPRESSED_RGB8_ETC2",
                "Compresses RGB8 data with no alpha channel."
            ],
            [
                "ext.COMPRESSED_RGBA8_ETC2_EAC",
                "Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately."
            ],
            [
                "ext.COMPRESSED_SRGB8_ETC2",
                "Compresses sRGB8 data with no alpha channel."
            ],
            [
                "ext.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
                "Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately."
            ],
            [
                "ext.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
                "Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent."
            ],
            [
                "ext.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
                "Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_etc1",
        "",
        "WEBGL_compressed_texture_etc1",
        "The WEBGL_compressed_texture_etc1 extension is part of the WebGL API and exposes the ETC1 compressed texture format.",
        [
            [
                "ext.COMPRESSED_RGB_ETC1_WEBGL",
                "Compresses 24-bit RGB data with no alpha channel."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc",
        "",
        "WEBGL_compressed_texture_pvrtc",
        "The WEBGL_compressed_texture_pvrtc extension is part of the WebGL API and exposes four PVRTC compressed texture formats.",
        [
            [
                "ext.COMPRESSED_RGB_PVRTC_4BPPV1_IMG",
                "RGB compression in 4-bit mode. One block for each 4×4 pixels."
            ],
            [
                "ext.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",
                "RGBA compression in 4-bit mode. One block for each 4×4 pixels."
            ],
            [
                "ext.COMPRESSED_RGB_PVRTC_2BPPV1_IMG",
                "RGB compression in 2-bit mode. One block for each 8×4 pixels."
            ],
            [
                "ext.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG",
                "RGBA compression in 2-bit mode. One block for each 8×4 pixels."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb",
        "",
        "WEBGL_compressed_texture_s3tc_srgb",
        "The WEBGL_compressed_texture_s3tc_srgb extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.",
        [
            [
                "ext.COMPRESSED_SRGB_S3TC_DXT1_EXT",
                "A DXT1-compressed image in an sRGB image format."
            ],
            [
                "ext.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT",
                "A DXT1-compressed image in an sRGB image format with a simple on/off alpha value."
            ],
            [
                "ext.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT",
                "A DXT3-compressed image in an sRGBA image format."
            ],
            [
                "ext.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT",
                "A DXT5-compressed image in an sRGBA image format."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc",
        "",
        "WEBGL_compressed_texture_s3tc",
        "The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.",
        [
            [
                "ext.COMPRESSED_RGB_S3TC_DXT1_EXT",
                "A DXT1-compressed image in an RGB image format."
            ],
            [
                "ext.COMPRESSED_RGBA_S3TC_DXT1_EXT",
                "A DXT1-compressed image in an RGB image format with a simple on/off alpha value."
            ],
            [
                "ext.COMPRESSED_RGBA_S3TC_DXT3_EXT",
                "A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression."
            ],
            [
                "ext.COMPRESSED_RGBA_S3TC_DXT5_EXT",
                "A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_debug_renderer_info",
        "",
        "WEBGL_debug_renderer_info",
        "The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.",
        [
            [
                "ext.UNMASKED_VENDOR_WEBGL",
                "Vendor string of the graphics driver."
            ],
            [
                "ext.UNMASKED_RENDERER_WEBGL",
                "Renderer string of the graphics driver."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_debug_shaders",
        "",
        "WEBGL_debug_shaders",
        "The WEBGL_debug_shaders extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.",
        [
            [
                "WEBGL_debug_shaders.getTranslatedShaderSource()",
                "Returns the translated shader source."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_depth_texture",
        "",
        "WEBGL_depth_texture",
        "The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.",
        [
            [
                "ext.UNSIGNED_INT_24_8_WEBGL",
                "Unsigned integer type for 24-bit depth texture data."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_draw_buffers",
        "",
        "WEBGL_draw_buffers",
        "The WEBGL_draw_buffers extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.",
        [
            [
                "ext.COLOR_ATTACHMENT0_WEBGL ext.COLOR_ATTACHMENT1_WEBGL ext.COLOR_ATTACHMENT2_WEBGL ext.COLOR_ATTACHMENT3_WEBGL ext.COLOR_ATTACHMENT4_WEBGL ext.COLOR_ATTACHMENT5_WEBGL ext.COLOR_ATTACHMENT6_WEBGL ext.COLOR_ATTACHMENT7_WEBGL ext.COLOR_ATTACHMENT8_WEBGL ext.COLOR_ATTACHMENT9_WEBGL ext.COLOR_ATTACHMENT10_WEBGL ext.COLOR_ATTACHMENT11_WEBGL ext.COLOR_ATTACHMENT12_WEBGL ext.COLOR_ATTACHMENT13_WEBGL ext.COLOR_ATTACHMENT14_WEBGL ext.COLOR_ATTACHMENT15_WEBGL",
                "A GLenum specifying a color buffer."
            ],
            [
                "ext.DRAW_BUFFER0_WEBGL ext.DRAW_BUFFER1_WEBGL ext.DRAW_BUFFER2_WEBGL ext.DRAW_BUFFER3_WEBGL ext.DRAW_BUFFER4_WEBGL ext.DRAW_BUFFER5_WEBGL ext.DRAW_BUFFER6_WEBGL ext.DRAW_BUFFER7_WEBGL ext.DRAW_BUFFER8_WEBGL ext.DRAW_BUFFER9_WEBGL ext.DRAW_BUFFER10_WEBGL ext.DRAW_BUFFER11_WEBGL ext.DRAW_BUFFER12_WEBGL ext.DRAW_BUFFER13_WEBGL ext.DRAW_BUFFER14_WEBGL ext.DRAW_BUFFER15_WEBGL",
                "A GLenum returning a draw buffer."
            ],
            [
                "ext.MAX_COLOR_ATTACHMENTS_WEBGL",
                "A GLint indicating the maximum number of framebuffer color attachment points."
            ],
            [
                "ext.MAX_DRAW_BUFFERS_WEBGL",
                "A GLint indicating the maximum number of draw buffers."
            ],
            [
                "ext.drawBuffersWEBGL()",
                "Defines the draw buffers to which all fragment colors are written. (When using WebGL2, this method is available as gl.drawBuffers() by default)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_lose_context",
        "",
        "WEBGL_lose_context",
        "The WEBGL_lose_context extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.",
        [
            [
                "WEBGL_lose_context.loseContext()",
                "Simulates losing the context."
            ],
            [
                "WEBGL_lose_context.restoreContext()",
                "Simulates restoring the context."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WEBGL_multi_draw",
        "",
        "WEBGL_multi_draw",
        "The WEBGL_multi_draw extension is part of the WebGL API and allows to render more than one primitive with a single function call. This can improve a WebGL application's performance as it reduces binding costs in the renderer and speeds up GPU thread time with uniform data.",
        [
            [
                "ext.multiDrawArraysWEBGL()",
                "Renders multiple primitives from array data (identical to multiple calls to drawArrays)."
            ],
            [
                "ext.multiDrawElementsWEBGL()",
                "Renders multiple primitives from element array data (identical to multiple calls to drawElements)."
            ],
            [
                "ext.multiDrawArraysInstancedWEBGL()",
                "Renders multiple primitives from array data (identical to multiple calls to drawArraysInstanced)."
            ],
            [
                "ext.multiDrawElementsInstancedWEBGL()",
                "Renders multiple primitives from element array data (identical to multiple calls to drawElementsInstanced)."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGL2RenderingContext",
        "",
        "WebGL2RenderingContext",
        "The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML <canvas> element.",
        [
            [
                "WebGL2RenderingContext.getIndexedParameter()",
                "Returns the indexed value for the given target."
            ],
            [
                "WebGL2RenderingContext.bufferData()",
                "Initializes and creates the buffer object's data store."
            ],
            [
                "WebGL2RenderingContext.bufferSubData()",
                "Updates a subset of a buffer object's data store."
            ],
            [
                "WebGL2RenderingContext.copyBufferSubData()",
                "Copies part of the data of a buffer to another buffer."
            ],
            [
                "WebGL2RenderingContext.getBufferSubData()",
                "Reads data from a buffer and writes them to an ArrayBuffer or SharedArrayBuffer."
            ],
            [
                "WebGL2RenderingContext.blitFramebuffer()",
                "Transfers a block of pixels from the read framebuffer to the draw framebuffer."
            ],
            [
                "WebGL2RenderingContext.framebufferTextureLayer()",
                "Attaches a single layer of a texture to a framebuffer."
            ],
            [
                "WebGL2RenderingContext.invalidateFramebuffer()",
                "Invalidates the contents of attachments in a framebuffer."
            ],
            [
                "WebGL2RenderingContext.invalidateSubFramebuffer()",
                "Invalidates portions of the contents of attachments in a framebuffer"
            ],
            [
                "WebGL2RenderingContext.readBuffer()",
                "Selects a color buffer as the source for pixels."
            ],
            [
                "WebGL2RenderingContext.getInternalformatParameter()",
                "Returns information about implementation-dependent support for internal formats."
            ],
            [
                "WebGL2RenderingContext.renderbufferStorageMultisample()",
                "Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used."
            ],
            [
                "WebGL2RenderingContext.texStorage2D()",
                "Specifies all levels of two-dimensional texture storage."
            ],
            [
                "WebGL2RenderingContext.texStorage3D()",
                "Specifies all levels of a three-dimensional texture or two-dimensional array texture."
            ],
            [
                "WebGL2RenderingContext.texImage3D()",
                "Specifies a three-dimensional texture image."
            ],
            [
                "WebGL2RenderingContext.texSubImage3D()",
                "Specifies a sub-rectangle of the current 3D texture."
            ],
            [
                "WebGL2RenderingContext.copyTexSubImage3D()",
                "Copies pixels from the current WebGLFramebuffer into an existing 3D texture sub-image."
            ],
            [
                "WebGL2RenderingContext.compressedTexImage3D()",
                "Specifies a three-dimensional texture image in a compressed format."
            ],
            [
                "WebGL2RenderingContext.compressedTexSubImage3D()",
                "Specifies a three-dimensional sub-rectangle for a texture image in a compressed format."
            ],
            [
                "WebGL2RenderingContext.getFragDataLocation()",
                "Returns the binding of color numbers to user-defined varying out variables."
            ],
            [
                "WebGL2RenderingContext.uniform[1234][uif][v]()",
                "Methods specifying values of uniform variables."
            ],
            [
                "WebGL2RenderingContext.uniformMatrix[234]x[234]fv()",
                "Methods specifying matrix values for uniform variables."
            ],
            [
                "WebGL2RenderingContext.vertexAttribI4[u]i[v]()",
                "Methods specifying integer values for generic vertex attributes."
            ],
            [
                "WebGL2RenderingContext.vertexAttribIPointer()",
                "Specifies integer data formats and locations of vertex attributes in a vertex attributes array."
            ],
            [
                "WebGL2RenderingContext.vertexAttribDivisor()",
                "Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with gl.drawArraysInstanced() and gl.drawElementsInstanced()."
            ],
            [
                "WebGL2RenderingContext.drawArraysInstanced()",
                "Renders primitives from array data. In addition, it can execute multiple instances of the range of elements."
            ],
            [
                "WebGL2RenderingContext.drawElementsInstanced()",
                "Renders primitives from array data. In addition, it can execute multiple instances of a set of elements."
            ],
            [
                "WebGL2RenderingContext.drawRangeElements()",
                "Renders primitives from array data in a given range."
            ],
            [
                "WebGL2RenderingContext.drawBuffers()",
                "Specifies a list of color buffers to be drawn into."
            ],
            [
                "WebGL2RenderingContext.clearBuffer[fiuv]()",
                "Clears buffers from the currently bound framebuffer."
            ],
            [
                "WebGL2RenderingContext.createQuery()",
                "Creates a new WebGLQuery object."
            ],
            [
                "WebGL2RenderingContext.deleteQuery()",
                "Deletes a given WebGLQuery object."
            ],
            [
                "WebGL2RenderingContext.isQuery()",
                "Returns true if a given object is a valid WebGLQuery object."
            ],
            [
                "WebGL2RenderingContext.beginQuery()",
                "Begins an asynchronous query."
            ],
            [
                "WebGL2RenderingContext.endQuery()",
                "Marks the end of an asynchronous query."
            ],
            [
                "WebGL2RenderingContext.getQuery()",
                "Returns a WebGLQuery object for a given target."
            ],
            [
                "WebGL2RenderingContext.getQueryParameter()",
                "Returns information about a query."
            ],
            [
                "WebGL2RenderingContext.createSampler()",
                "Creates a new WebGLSampler object."
            ],
            [
                "WebGL2RenderingContext.deleteSampler()",
                "Deletes a given WebGLSampler object."
            ],
            [
                "WebGL2RenderingContext.bindSampler()",
                "Binds a given WebGLSampler to a texture unit."
            ],
            [
                "WebGL2RenderingContext.isSampler()",
                "Returns true if a given object is a valid WebGLSampler object."
            ],
            [
                "WebGL2RenderingContext.samplerParameter[if]()",
                "Sets sampler parameters."
            ],
            [
                "WebGL2RenderingContext.getSamplerParameter()",
                "Returns sampler parameter information."
            ],
            [
                "WebGL2RenderingContext.fenceSync()",
                "Creates a new WebGLSync object and inserts it into the GL command stream."
            ],
            [
                "WebGL2RenderingContext.isSync()",
                "Returns true if the passed object is a valid WebGLSync object."
            ],
            [
                "WebGL2RenderingContext.deleteSync()",
                "Deletes a given WebGLSync object."
            ],
            [
                "WebGL2RenderingContext.clientWaitSync()",
                "Blocks and waits for a WebGLSync object to become signaled or a given timeout to be passed."
            ],
            [
                "WebGL2RenderingContext.waitSync()",
                "Returns immediately, but waits on the GL server until the given WebGLSync object is signaled."
            ],
            [
                "WebGL2RenderingContext.getSyncParameter()",
                "Returns parameter information of a WebGLSync object."
            ],
            [
                "WebGL2RenderingContext.createTransformFeedback()",
                "Creates and initializes WebGLTransformFeedback objects."
            ],
            [
                "WebGL2RenderingContext.deleteTransformFeedback()",
                "Deletes a given WebGLTransformFeedback object."
            ],
            [
                "WebGL2RenderingContext.isTransformFeedback()",
                "Returns true if the passed object is a valid WebGLTransformFeedback object."
            ],
            [
                "WebGL2RenderingContext.bindTransformFeedback()",
                "Binds a passed WebGLTransformFeedback object to the current GL state."
            ],
            [
                "WebGL2RenderingContext.beginTransformFeedback()",
                "Starts a transform feedback operation."
            ],
            [
                "WebGL2RenderingContext.endTransformFeedback()",
                "Ends a transform feedback operation."
            ],
            [
                "WebGL2RenderingContext.transformFeedbackVaryings()",
                "Specifies values to record in WebGLTransformFeedback buffers."
            ],
            [
                "WebGL2RenderingContext.getTransformFeedbackVarying()",
                "Returns information about varying variables from WebGLTransformFeedback buffers."
            ],
            [
                "WebGL2RenderingContext.pauseTransformFeedback()",
                "Pauses a transform feedback operation."
            ],
            [
                "WebGL2RenderingContext.resumeTransformFeedback()",
                "Resumes a transform feedback operation."
            ],
            [
                "WebGL2RenderingContext.bindBufferBase()",
                "Binds a given WebGLBuffer to a given binding point (target) at a given index."
            ],
            [
                "WebGL2RenderingContext.bindBufferRange()",
                "Binds a range of a given WebGLBuffer to a given binding point (target) at a given index."
            ],
            [
                "WebGL2RenderingContext.getUniformIndices()",
                "Retrieves the indices of a number of uniforms within a WebGLProgram."
            ],
            [
                "WebGL2RenderingContext.getActiveUniforms()",
                "Retrieves information about active uniforms within a WebGLProgram."
            ],
            [
                "WebGL2RenderingContext.getUniformBlockIndex()",
                "Retrieves the index of a uniform block within a WebGLProgram."
            ],
            [
                "WebGL2RenderingContext.getActiveUniformBlockParameter()",
                "Retrieves information about an active uniform block within a WebGLProgram."
            ],
            [
                "WebGL2RenderingContext.getActiveUniformBlockName()",
                "Retrieves the name of the active uniform block at a given index within a WebGLProgram."
            ],
            [
                "WebGL2RenderingContext.uniformBlockBinding()",
                "Assigns binding points for active uniform blocks."
            ],
            [
                "WebGL2RenderingContext.createVertexArray()",
                "Creates a new WebGLVertexArrayObject."
            ],
            [
                "WebGL2RenderingContext.deleteVertexArray()",
                "Deletes a given WebGLVertexArrayObject."
            ],
            [
                "WebGL2RenderingContext.isVertexArray()",
                "Returns true if a given object is a valid WebGLVertexArrayObject."
            ],
            [
                "WebGL2RenderingContext.bindVertexArray()",
                "Binds a given WebGLVertexArrayObject to the buffer."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLActiveInfo",
        "",
        "WebGLActiveInfo",
        "The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.",
        [
            [
                "WebGLActiveInfo.name",
                "The read-only name of the requested variable."
            ],
            [
                "WebGLActiveInfo.size",
                "The read-only size of the requested variable."
            ],
            [
                "WebGLActiveInfo.type",
                "The read-only type of the requested variable."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLBuffer",
        "",
        "WebGLBuffer",
        "The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLContextEvent",
        "",
        "WebGLContextEvent",
        "The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.",
        [
            [
                "WebGLContextEvent.statusMessage",
                "A read-only property containing additional information about the event."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLFramebuffer",
        "",
        "WebGLFramebuffer",
        "The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLProgram",
        "",
        "WebGLProgram",
        "The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL). To create a WebGLProgram, call the GL context's createProgram() function. After attaching the shader programs using attachShader(), you link them into a usable program. This is shown in the code below.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLQuery",
        "",
        "WebGLQuery",
        "The WebGLQuery interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLRenderbuffer",
        "",
        "WebGLRenderbuffer",
        "The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLRenderingContext",
        "",
        "WebGLRenderingContext",
        "The WebGLRenderingContext interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.",
        [
            [
                "WebGLRenderingContext.canvas",
                "A read-only back-reference to the HTMLCanvasElement. Might be null if it is not associated with a <canvas> element."
            ],
            [
                "WebGLRenderingContext.commit()",
                "Pushes frames back to the original HTMLCanvasElement, if the context is not directly fixed to a specific canvas."
            ],
            [
                "WebGLRenderingContext.drawingBufferWidth",
                "The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context."
            ],
            [
                "WebGLRenderingContext.drawingBufferHeight",
                "The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context."
            ],
            [
                "WebGLRenderingContext.getContextAttributes()",
                "Returns a WebGLContextAttributes object that contains the actual context parameters. Might return null, if the context is lost."
            ],
            [
                "WebGLRenderingContext.isContextLost()",
                "Returns true if the context is lost, otherwise returns false."
            ],
            [
                "WebGLRenderingContext.makeXRCompatible()",
                "Ensures the context is compatible with the user's XR hardware, re-creating the context if necessary with a new configuration to do so. This can be used to start an application using standard 2D presentation, then transition to using a VR or AR mode later."
            ],
            [
                "WebGLRenderingContext.scissor()",
                "Defines the scissor box."
            ],
            [
                "WebGLRenderingContext.viewport()",
                "Sets the viewport."
            ],
            [
                "WebGLRenderingContext.activeTexture()",
                "Selects the active texture unit."
            ],
            [
                "WebGLRenderingContext.blendColor()",
                "Sets the source and destination blending factors."
            ],
            [
                "WebGLRenderingContext.blendEquation()",
                "Sets both the RGB blend equation and alpha blend equation to a single equation."
            ],
            [
                "WebGLRenderingContext.blendEquationSeparate()",
                "Sets the RGB blend equation and alpha blend equation separately."
            ],
            [
                "WebGLRenderingContext.blendFunc()",
                "Defines which function is used for blending pixel arithmetic."
            ],
            [
                "WebGLRenderingContext.blendFuncSeparate()",
                "Defines which function is used for blending pixel arithmetic for RGB and alpha components separately."
            ],
            [
                "WebGLRenderingContext.clearColor()",
                "Specifies the color values used when clearing color buffers."
            ],
            [
                "WebGLRenderingContext.clearDepth()",
                "Specifies the depth value used when clearing the depth buffer."
            ],
            [
                "WebGLRenderingContext.clearStencil()",
                "Specifies the stencil value used when clearing the stencil buffer."
            ],
            [
                "WebGLRenderingContext.colorMask()",
                "Sets which color components to enable or to disable when drawing or rendering to a WebGLFramebuffer."
            ],
            [
                "WebGLRenderingContext.cullFace()",
                "Specifies whether or not front- and/or back-facing polygons can be culled."
            ],
            [
                "WebGLRenderingContext.depthFunc()",
                "Specifies a function that compares incoming pixel depth to the current depth buffer value."
            ],
            [
                "WebGLRenderingContext.depthMask()",
                "Sets whether writing into the depth buffer is enabled or disabled."
            ],
            [
                "WebGLRenderingContext.depthRange()",
                "Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates."
            ],
            [
                "WebGLRenderingContext.disable()",
                "Disables specific WebGL capabilities for this context."
            ],
            [
                "WebGLRenderingContext.enable()",
                "Enables specific WebGL capabilities for this context."
            ],
            [
                "WebGLRenderingContext.frontFace()",
                "Specifies whether polygons are front- or back-facing by setting a winding orientation."
            ],
            [
                "WebGLRenderingContext.getParameter()",
                "Returns a value for the passed parameter name."
            ],
            [
                "WebGLRenderingContext.getError()",
                "Returns error information."
            ],
            [
                "WebGLRenderingContext.hint()",
                "Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation."
            ],
            [
                "WebGLRenderingContext.isEnabled()",
                "Tests whether a specific WebGL capability is enabled or not for this context."
            ],
            [
                "WebGLRenderingContext.lineWidth()",
                "Sets the line width of rasterized lines."
            ],
            [
                "WebGLRenderingContext.pixelStorei()",
                "Specifies the pixel storage modes"
            ],
            [
                "WebGLRenderingContext.polygonOffset()",
                "Specifies the scale factors and units to calculate depth values."
            ],
            [
                "WebGLRenderingContext.sampleCoverage()",
                "Specifies multi-sample coverage parameters for anti-aliasing effects."
            ],
            [
                "WebGLRenderingContext.stencilFunc()",
                "Sets the both front and back function and reference value for stencil testing."
            ],
            [
                "WebGLRenderingContext.stencilFuncSeparate()",
                "Sets the front and/or back function and reference value for stencil testing."
            ],
            [
                "WebGLRenderingContext.stencilMask()",
                "Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes."
            ],
            [
                "WebGLRenderingContext.stencilMaskSeparate()",
                "Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes."
            ],
            [
                "WebGLRenderingContext.stencilOp()",
                "Sets both the front and back-facing stencil test actions."
            ],
            [
                "WebGLRenderingContext.stencilOpSeparate()",
                "Sets the front and/or back-facing stencil test actions."
            ],
            [
                "WebGLRenderingContext.bindBuffer()",
                "Binds a WebGLBuffer object to a given target."
            ],
            [
                "WebGLRenderingContext.bufferData()",
                "Updates buffer data."
            ],
            [
                "WebGLRenderingContext.bufferSubData()",
                "Updates buffer data starting at a passed offset."
            ],
            [
                "WebGLRenderingContext.createBuffer()",
                "Creates a WebGLBuffer object."
            ],
            [
                "WebGLRenderingContext.deleteBuffer()",
                "Deletes a WebGLBuffer object."
            ],
            [
                "WebGLRenderingContext.getBufferParameter()",
                "Returns information about the buffer."
            ],
            [
                "WebGLRenderingContext.isBuffer()",
                "Returns a Boolean indicating if the passed buffer is valid."
            ],
            [
                "WebGLRenderingContext.bindFramebuffer()",
                "Binds a WebGLFrameBuffer object to a given target."
            ],
            [
                "WebGLRenderingContext.checkFramebufferStatus()",
                "Returns the status of the framebuffer."
            ],
            [
                "WebGLRenderingContext.createFramebuffer()",
                "Creates a WebGLFrameBuffer object."
            ],
            [
                "WebGLRenderingContext.deleteFramebuffer()",
                "Deletes a WebGLFrameBuffer object."
            ],
            [
                "WebGLRenderingContext.framebufferRenderbuffer()",
                "Attaches a WebGLRenderingBuffer object to a WebGLFrameBuffer object."
            ],
            [
                "WebGLRenderingContext.framebufferTexture2D()",
                "Attaches a textures image to a WebGLFrameBuffer object."
            ],
            [
                "WebGLRenderingContext.getFramebufferAttachmentParameter()",
                "Returns information about the framebuffer."
            ],
            [
                "WebGLRenderingContext.isFramebuffer()",
                "Returns a Boolean indicating if the passed WebGLFrameBuffer object is valid."
            ],
            [
                "WebGLRenderingContext.readPixels()",
                "Reads a block of pixels from the WebGLFrameBuffer."
            ],
            [
                "WebGLRenderingContext.bindRenderbuffer()",
                "Binds a WebGLRenderBuffer object to a given target."
            ],
            [
                "WebGLRenderingContext.createRenderbuffer()",
                "Creates a WebGLRenderBuffer object."
            ],
            [
                "WebGLRenderingContext.deleteRenderbuffer()",
                "Deletes a WebGLRenderBuffer object."
            ],
            [
                "WebGLRenderingContext.getRenderbufferParameter()",
                "Returns information about the renderbuffer."
            ],
            [
                "WebGLRenderingContext.isRenderbuffer()",
                "Returns a Boolean indicating if the passed WebGLRenderingBuffer is valid."
            ],
            [
                "WebGLRenderingContext.renderbufferStorage()",
                "Creates a renderbuffer data store."
            ],
            [
                "WebGLRenderingContext.bindTexture()",
                "Binds a WebGLTexture object to a given target."
            ],
            [
                "WebGLRenderingContext.compressedTexImage2D()",
                "Specifies a 2D texture image in a compressed format."
            ],
            [
                "WebGLRenderingContext.compressedTexSubImage2D()",
                "Specifies a 2D texture sub-image in a compressed format."
            ],
            [
                "WebGLRenderingContext.copyTexImage2D()",
                "Copies a 2D texture image."
            ],
            [
                "WebGLRenderingContext.copyTexSubImage2D()",
                "Copies a 2D texture sub-image."
            ],
            [
                "WebGLRenderingContext.createTexture()",
                "Creates a WebGLTexture object."
            ],
            [
                "WebGLRenderingContext.deleteTexture()",
                "Deletes a WebGLTexture object."
            ],
            [
                "WebGLRenderingContext.generateMipmap()",
                "Generates a set of mipmaps for a WebGLTexture object."
            ],
            [
                "WebGLRenderingContext.getTexParameter()",
                "Returns information about the texture."
            ],
            [
                "WebGLRenderingContext.isTexture()",
                "Returns a Boolean indicating if the passed WebGLTexture is valid."
            ],
            [
                "WebGLRenderingContext.texImage2D()",
                "Specifies a 2D texture image."
            ],
            [
                "WebGLRenderingContext.texSubImage2D()",
                "Updates a sub-rectangle of the current WebGLTexture."
            ],
            [
                "WebGLRenderingContext.texParameterf()",
                "Sets texture parameters."
            ],
            [
                "WebGLRenderingContext.texParameteri()",
                "Sets texture parameters."
            ],
            [
                "WebGLRenderingContext.attachShader()",
                "Attaches a WebGLShader to a WebGLProgram."
            ],
            [
                "WebGLRenderingContext.bindAttribLocation()",
                "Binds a generic vertex index to a named attribute variable."
            ],
            [
                "WebGLRenderingContext.compileShader()",
                "Compiles a WebGLShader."
            ],
            [
                "WebGLRenderingContext.createProgram()",
                "Creates a WebGLProgram."
            ],
            [
                "WebGLRenderingContext.createShader()",
                "Creates a WebGLShader."
            ],
            [
                "WebGLRenderingContext.deleteProgram()",
                "Deletes a WebGLProgram."
            ],
            [
                "WebGLRenderingContext.deleteShader()",
                "Deletes a WebGLShader."
            ],
            [
                "WebGLRenderingContext.detachShader()",
                "Detaches a WebGLShader."
            ],
            [
                "WebGLRenderingContext.getAttachedShaders()",
                "Returns a list of WebGLShader objects attached to a WebGLProgram."
            ],
            [
                "WebGLRenderingContext.getProgramParameter()",
                "Returns information about the program."
            ],
            [
                "WebGLRenderingContext.getProgramInfoLog()",
                "Returns the information log for a WebGLProgram object."
            ],
            [
                "WebGLRenderingContext.getShaderParameter()",
                "Returns information about the shader."
            ],
            [
                "WebGLRenderingContext.getShaderPrecisionFormat()",
                "Returns a WebGLShaderPrecisionFormat object describing the precision for the numeric format of the shader."
            ],
            [
                "WebGLRenderingContext.getShaderInfoLog()",
                "Returns the information log for a WebGLShader object."
            ],
            [
                "WebGLRenderingContext.getShaderSource()",
                "Returns the source code of a WebGLShader as a string."
            ],
            [
                "WebGLRenderingContext.isProgram()",
                "Returns a Boolean indicating if the passed WebGLProgram is valid."
            ],
            [
                "WebGLRenderingContext.isShader()",
                "Returns a Boolean indicating if the passed WebGLShader is valid."
            ],
            [
                "WebGLRenderingContext.linkProgram()",
                "Links the passed WebGLProgram object."
            ],
            [
                "WebGLRenderingContext.shaderSource()",
                "Sets the source code in a WebGLShader."
            ],
            [
                "WebGLRenderingContext.useProgram()",
                "Uses the specified WebGLProgram as part the current rendering state."
            ],
            [
                "WebGLRenderingContext.validateProgram()",
                "Validates a WebGLProgram."
            ],
            [
                "WebGLRenderingContext.disableVertexAttribArray()",
                "Disables a vertex attribute array at a given position."
            ],
            [
                "WebGLRenderingContext.enableVertexAttribArray()",
                "Enables a vertex attribute array at a given position."
            ],
            [
                "WebGLRenderingContext.getActiveAttrib()",
                "Returns information about an active attribute variable."
            ],
            [
                "WebGLRenderingContext.getActiveUniform()",
                "Returns information about an active uniform variable."
            ],
            [
                "WebGLRenderingContext.getAttribLocation()",
                "Returns the location of an attribute variable."
            ],
            [
                "WebGLRenderingContext.getUniform()",
                "Returns the value of a uniform variable at a given location."
            ],
            [
                "WebGLRenderingContext.getUniformLocation()",
                "Returns the location of a uniform variable."
            ],
            [
                "WebGLRenderingContext.getVertexAttrib()",
                "Returns information about a vertex attribute at a given position."
            ],
            [
                "WebGLRenderingContext.getVertexAttribOffset()",
                "Returns the address of a given vertex attribute."
            ],
            [
                "WebGLRenderingContext.uniform[1234][fi][v]()",
                "Specifies a value for a uniform variable."
            ],
            [
                "WebGLRenderingContext.uniformMatrix[234]fv()",
                "Specifies a matrix value for a uniform variable."
            ],
            [
                "WebGLRenderingContext.vertexAttrib[1234]f[v]()",
                "Specifies a value for a generic vertex attribute."
            ],
            [
                "WebGLRenderingContext.vertexAttribPointer()",
                "Specifies the data formats and locations of vertex attributes in a vertex attributes array."
            ],
            [
                "WebGLRenderingContext.clear()",
                "Clears specified buffers to preset values."
            ],
            [
                "WebGLRenderingContext.drawArrays()",
                "Renders primitives from array data."
            ],
            [
                "WebGLRenderingContext.drawElements()",
                "Renders primitives from element array data."
            ],
            [
                "WebGLRenderingContext.finish()",
                "Blocks execution until all previously called commands are finished."
            ],
            [
                "WebGLRenderingContext.flush()",
                "Empties different buffer commands, causing all commands to be executed as quickly as possible."
            ],
            [
                "WebGLRenderingContext.getSupportedExtensions()",
                "Returns an Array of DOMString elements with all the supported WebGL extensions."
            ],
            [
                "WebGLRenderingContext.getExtension()",
                "Returns an extension object."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLSampler",
        "",
        "WebGLSampler",
        "The WebGLSampler interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLShader",
        "",
        "WebGLShader",
        "The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLShaderPrecisionFormat",
        "",
        "WebGLShaderPrecisionFormat",
        "The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.",
        [
            [
                "WebGLShaderPrecisionFormat.rangeMin Read only",
                "The base 2 log of the absolute value of the minimum value that can be represented."
            ],
            [
                "WebGLShaderPrecisionFormat.rangeMax Read only",
                "The base 2 log of the absolute value of the maximum value that can be represented."
            ],
            [
                "WebGLShaderPrecisionFormat.precision Read only",
                "The number of bits of precision that can be represented. For integer formats this value is always 0."
            ]
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLSync",
        "",
        "WebGLSync",
        "The WebGLSync interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLTexture",
        "",
        "WebGLTexture",
        "The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLTransformFeedback",
        "",
        "WebGLTransformFeedback",
        "The WebGLTransformFeedback interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLUniformLocation",
        "",
        "WebGLUniformLocation",
        "The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.",
        [
            
        ]
    ],
    [
        "/en-US/docs/Web/API/WebGLVertexArrayObject",
        "",
        "WebGLVertexArrayObject",
        "The WebGLVertexArrayObject interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.",
        [
            
        ]
    ]
]